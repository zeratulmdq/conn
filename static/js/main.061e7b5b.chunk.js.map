{"version":3,"sources":["widgets/Sticky.tsx","widgets/Arrow.tsx","settings/Checkbox.tsx","types.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Sticky","dragging","initialX","initialY","handleDragStart","e","props","onDragStart","widget","cursor","onMouseDown","id","handleMouseUp","onMouseUp","handleMouseHover","onMouseHover","handleMouseLeave","onMouseLeave","this","selected","x","y","width","height","onMouseMove","style","top","left","border","className","SNAPPING_POINT_WIDTH","React","Component","Arrow","state","direction","pointerEventsEnabled","setDirection","getPoints","start","end","isHorizontalStart","type","setState","points","enablePointerEvents","console","log","disablePointerEvents","connectionDot","key","isStart","cx","cy","r","stroke","fill","onDragPointStart","handleMouseMove","clientX","clientY","minY","Math","min","maxY","max","minX","maxX","pathGenerator","chartBranch","isHorizontalEnd","d","strokeWidth","p1","p2","p3","d1","d2","midDistance","segment2Position","convergenceTarget","convergenceSide","position","p4","d3","pointerEvents","diffStartX","diffEndX","undefined","diffStartY","diffEndY","path","xmlns","version","PureComponent","Checkbox","checked","handleOnChange","prevState","onCheckedChange","onChange","defaultChecked","label","stickyFactory","spec","uuid","arrowFactory","arrowType","initialIsHorizontal","toOrientation","settingsStyle","borderStyle","backgroundColor","padding","App","ref","settings","stickToConvergentWidgetSide","initialId","endId","widgets","mousePosition","mouseOverSticky","handleArrowPointDragStart","initial","handleStickyMouseDown","arrow","updateDisconnectedArrow","handleStickyMouseUp","draggingArrow","startWidget","endWidget","Object","values","find","w","isHorizontalConnection","abs","updateArrow","cancelArrowCreation","handleDoubleClick","stickyWidth","ctrlKey","s","handleDrag","deltaX","deltaY","draggingWidgets","map","length","connectedArrows","filter","includes","reduce","acc","cur","movedWidgets","handleMouseHoverSticky","newWidgets","handleMouseLeaveSticky","handleWidgetDragStart","shiftKey","stopPropagation","button","handleKeyDown","newCursor","selectedWidgetsId","prevWidgets","forEach","handleMouseDown","isChartSideArrow","updateArrowChartSide","setArrowChartBranch","handleRef","focus","draggingWidget","chartBranchArrow","getSharedChartBranchArrow","assign","chartBranchArrows","draggingPosition","connectedWidget","startPosition","endPosition","getWidgetSideMidPosition","snappingPoint","convergesOnEnd","convergencePoint","nonConvergencePoint","convergentWidget","nonConvergentWidget","middleX","getIntersectionMiddle","middleY","startWidgetCenter","endWidgetCenter","distX","distY","distXToCenter","distYToCenter","a","b","distance","horizontal","aCenter","bCenter","min1","size1","min2","size2","max1","max2","intersection","ARROW_MARGIN","value","point","newPoint","tabIndex","onDoubleClick","onKeyDown","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.061e7b5b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Sticky.css\";\nimport { StickyWidget } from \"../types\";\n\nconst SNAPPING_POINT_WIDTH = 20;\nconst SNAPPING_POINT_CENTER = SNAPPING_POINT_WIDTH / 2;\n\ninterface PropTypes {\n  cursor: React.CSSProperties[\"cursor\"];\n  onMouseDown: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseUp: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onDragStart: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseHover: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseLeave: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  selected: boolean;\n  widget: StickyWidget;\n}\n\nclass Sticky extends React.Component<PropTypes> {\n  dragging: boolean = false;\n  initialX: number = 0;\n  initialY: number = 0;\n\n  handleDragStart = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onDragStart, widget, cursor, onMouseDown } = this.props;\n    if (cursor === 'crosshair') onMouseDown(widget.id, e);\n    else onDragStart(widget.id, e);\n  };\n\n  handleMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onMouseUp, cursor, widget } = this.props;\n    if (cursor === 'crosshair') onMouseUp(widget.id, e);\n  };\n  \n  handleMouseHover = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onMouseHover, widget } = this.props;\n    onMouseHover(widget.id, e);\n  };\n\n  handleMouseLeave = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onMouseLeave, widget } = this.props;\n    onMouseLeave(widget.id, e);\n  };\n\n  render() {\n    const {\n      cursor,\n      selected,\n      widget: { x, y , width, height},\n    } = this.props;\n    return (\n      <div\n        onMouseUp={this.handleMouseUp}\n        onMouseDown={this.handleDragStart}\n        onMouseMove={this.handleMouseHover}\n        onMouseLeave={this.handleMouseLeave}\n        style={{\n          top: y,\n          left: x,\n          width: width,\n          height: height,\n          cursor: cursor === \"crosshair\" ? \"crosshair\" : \"pointer\",\n          border: selected ? \"2px solid blue\" : \"none\",\n        }}\n        className=\"Sticky\"\n        >\n        <div\n          className=\"snapping-point top\"\n          style={{\n            top: 0 - SNAPPING_POINT_CENTER,\n            left: (width / 2) - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"top\"\n        ></div>\n        <div\n          className=\"snapping-point right\"\n          style={{\n            top: (height / 2) - SNAPPING_POINT_CENTER,\n            left: width - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"right\"\n        ></div>\n        <div\n          className=\"snapping-point bottom\"\n          style={{\n            top: height - SNAPPING_POINT_CENTER,\n            left: (width / 2) - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"bottom\"\n        ></div>\n        <div\n          className=\"snapping-point left\"\n          style={{\n            top: (height / 2) - SNAPPING_POINT_CENTER,\n            left: 0 - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"left\"\n        ></div>\n      </div>\n    );\n  }\n}\n\nexport default Sticky;\n","import React from \"react\";\nimport \"./Sticky.css\";\nimport \"./Arrow.css\";\nimport { ArrowWidget, ChartBranch, Point } from \"../types\";\n\ntype Direction = 'horizontal' | 'vertical' | 'other';\n\nconst MIN_SEGMENT_DISTANCE = 10;\n\ninterface PropTypes {\n  widget: ArrowWidget;\n  onDragPointStart: (id: string, e: React.MouseEvent, isStart: boolean) => void;\n}\n\ninterface State {\n  direction: Direction;\n  pointerEventsEnabled: boolean;\n  x?: number;\n  y?: number;\n}\n\nclass Arrow extends React.PureComponent<PropTypes, State> {\n  state: State = { direction: 'other', pointerEventsEnabled: false };\n\n  componentDidMount() {\n    this.setDirection();\n  }\n\n  componentDidUpdate() {\n    const { start, end } = this.getPoints();\n\n    if (this.state.x && this.state.direction === 'vertical') {\n      const diffStartX = this.state.x - start.x\n      const diffEndX = this.state.x - end.x;\n      if ((diffStartX > 0 && diffEndX > 0) || (diffStartX < 0 && diffEndX < 0)) {\n        this.setState({ x: undefined });\n      }\n    }\n\n    if (this.state.y && this.state.direction === 'horizontal') {\n      const diffStartY = this.state.y - start.y\n      const diffEndY = this.state.y - end.y;\n      if ((diffStartY > 0 && diffEndY > 0) || (diffStartY < 0 && diffEndY < 0)) {\n        this.setState({ y: undefined });\n      }\n    }\n  }\n\n  setDirection = () => {\n    const { start, end } = this.getPoints();\n    const isHorizontalStart = start.type === \"right\" || start.type === \"left\";\n    const isHorizontalEnd = end.type === \"right\" || end.type === \"left\";\n\n    if (isHorizontalStart !== isHorizontalEnd) this.setState({ direction: 'other' });\n\n    this.setState({ direction: isHorizontalStart ? 'vertical' : 'horizontal' });\n  }\n\n  getPoints = () => {\n    const { points } = this.props.widget;\n    const start = points[0];\n    const end = points[1];\n\n    return { start, end }\n  }\n\n  enablePointerEvents = () => {\n    if (this.state.pointerEventsEnabled) return;\n\n    console.log('enable pointer events')\n\n    this.setState({ pointerEventsEnabled: true})\n  }\n\n  disablePointerEvents = () => {\n    if (!this.state.pointerEventsEnabled) return;\n\n    console.log('disable pointer events')\n\n    this.setState({ pointerEventsEnabled: false})\n  }\n\n  connectionDot = (x: number, y: number, key: string, isStart?: boolean) => {\n    const handleDragPointStart = (e: React.MouseEvent) => {\n      const { onDragPointStart, widget } = this.props;\n      onDragPointStart(widget.id, e, !!isStart);\n    }\n    return <circle\n      key={key}\n      cx={`${x}`}\n      cy={`${y}`}\n      r=\"5\"\n      stroke={isStart ? 'black' : '#1c7ff9'}\n      fill={isStart ? 'white' : '#1c7ff9'}\n      onMouseDown={handleDragPointStart}\n      ></circle>\n  };\n\n  handleMouseMove = ({ clientX, clientY }: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n    this.setDirection();\n\n    if(!this.state.pointerEventsEnabled || this.state.direction === 'other') return;\n\n    const { start, end } = this.getPoints();\n\n    if (this.state.direction === 'vertical') {\n      const minX = Math.min(start.x, end.x);\n      const maxX = Math.max(start.x, end.x);\n\n      const limitStart = minX < clientX - MIN_SEGMENT_DISTANCE;\n      const limitEnd = maxX > clientX + MIN_SEGMENT_DISTANCE;\n\n      if (limitStart && limitEnd && this.state.x !== clientX)\n        this.setState({ x: clientX })\n\n      return;\n    }\n\n    const minY = Math.min(start.y, end.y);\n    const maxY = Math.max(start.y, end.y);\n\n    const limitStart = minY < clientY - MIN_SEGMENT_DISTANCE;\n    const limitEnd = maxY > clientY + MIN_SEGMENT_DISTANCE;\n\n    if (limitStart && limitEnd && this.state.y !== clientY)\n      this.setState({ y: clientY });\n  }\n\n  pathGenerator = (\n    points: Point[],\n    chartBranch: ChartBranch | null,\n    enablePointerEvents: () => void,\n    x: number | undefined,\n    y: number | undefined\n  ) => {\n    const start = points[0];\n    const end = points[1];\n    const isHorizontalStart = start.type === \"right\" || start.type === \"left\";\n    const isHorizontalEnd = end.type === \"right\" || end.type === \"left\";\n\n    // 1-segment straight line\n    if((isHorizontalStart && start.y === end.y) ||\n      (!isHorizontalStart && start.x === end.x)) {\n        const d = `M ${start.x} ${start.y} L ${end.x} ${end.y}`;\n        return [\n          this.connectionDot(start.x, start.y, '0', true),\n          <path d={d} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" key=\"1\" />,\n          this.connectionDot(end.x, end.y, '2'),\n        ];\n    }\n\n    // 2-segments line\n    if(isHorizontalStart !== isHorizontalEnd) {\n      const p1 = `${start.x} ${start.y}`;\n      const p2 = isHorizontalStart ? `${end.x} ${start.y}` : `${start.x} ${end.y}`;\n      const p3 = `${end.x} ${end.y}`;\n\n      const d1 = `M ${p1} L ${p2}`;\n      const d2 = `M ${p2} L ${p3}`;\n      return [\n        this.connectionDot(start.x, start.y, '0', true),\n        <path d={d1} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" key=\"1\" />,\n        <path d={d2} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" key=\"2\" />,\n        this.connectionDot(end.x, end.y, '3'),\n      ];\n    }\n\n    // 3-segments line\n    const midDistance = isHorizontalStart ? (end.x - start.x) / 2 : (end.y - start.y) / 2;\n    let segment2Position = isHorizontalStart && x\n      ? x\n      : !isHorizontalStart && y\n      ? y\n      : isHorizontalStart\n      ? start.x + midDistance\n      : start.y + midDistance;\n\n    if(chartBranch)\n    {\n      const convergenceTarget = chartBranch.type === \"manyToOne\" ? end : start;\n      if(chartBranch.convergenceSide === convergenceTarget.type) {\n        segment2Position = isHorizontalStart && x\n          ? x\n          : !isHorizontalStart && y\n          ? y\n          : chartBranch.position;\n      }\n    }\n\n    const p1 = `${start.x} ${start.y}`;\n    const p2 = isHorizontalStart ? `${segment2Position} ${start.y}` : ` ${start.x} ${segment2Position}`;\n    const p3 = isHorizontalStart ? `${segment2Position} ${end.y}` : ` ${end.x} ${segment2Position}`;\n    const p4 = `${end.x} ${end.y}`;\n\n    const d1 = `M ${p1} L ${p2}`;\n    const d2 = `M ${p2} L ${p3}`;\n    const d3 = `M ${p3} L ${p4}`;\n\n    const cursor = isHorizontalStart ? 'ew-resize' : 'ns-resize'\n\n    return [\n      this.connectionDot(start.x, start.y, '0', true),\n      <path d={d1} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" key=\"1\" />,\n      <path\n        key=\"2\"\n        d={d2}\n        stroke=\"black\"\n        strokeWidth=\"2\"\n        fill=\"none\"\n        style={{\n          cursor,\n          pointerEvents: 'auto'\n        }}\n        onMouseDown={enablePointerEvents}\n      />,\n      <path d={d3} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" key=\"3\" />,\n      this.connectionDot(end.x, end.y, '4'),\n    ];\n  };\n\n  render() {\n    const path = this.pathGenerator(\n      this.props.widget.points,\n      this.props.widget.chartBranch,\n      this.enablePointerEvents,\n      this.state.x,\n      this.state.y\n    );\n\n    return (\n      <svg\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          pointerEvents: this.state.pointerEventsEnabled ? \"auto\" : \"none\",\n        }}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        version=\"1.1\"\n        className=\"Arrow\"\n        onMouseUp={this.disablePointerEvents}\n        onMouseMove={this.handleMouseMove}\n      >\n        { path }\n      </svg>\n    );\n  }\n}\n\nexport default Arrow;","import React from \"react\";\r\n\r\ninterface PropTypes {\r\n  label: string;\r\n  onCheckedChange: (checked: boolean) => void;\r\n}\r\n\r\ninterface State {\r\n  checked: boolean;\r\n}\r\n\r\nclass Checkbox extends React.PureComponent<PropTypes, State> {\r\n  state: State = {\r\n    checked: false,\r\n  };\r\n\r\n  handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => { \r\n    this.setState((prevState) => {\r\n      const checked = !prevState.checked;\r\n      this.props.onCheckedChange(checked);\r\n      return {\r\n        checked\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{height: \"auto\"}}>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            style={{width: 15, height: 15}}\r\n            onChange={this.handleOnChange}\r\n            defaultChecked={this.state.checked} />\r\n          {this.props.label}\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checkbox;","import * as uuid from \"uuid\";\n\ninterface W {\n  height: number;\n  width: number;\n  id: string;\n  x: number;\n  y: number;\n}\n\nexport type PointType = \"bottom\" | \"top\" | \"left\" | \"right\";\nexport type Orientation = \"horizontal\" | \"vertical\";\nexport type ChartBranchType = \"oneToOne\" | \"oneToMany\" | \"manyToOne\";\n\nexport interface Point {\n  x: number;\n  y: number;\n  type: PointType;\n}\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport interface ChartBranch {\n  position: number; // fixed position where arrows share the 2nd branch segment\n  convergenceSide: PointType;  // side of the widget where the arrows converge (might be start or end widget depending of ChartBranchType)\n  type: ChartBranchType;\n}\n\n// initial: initial simple arrow, centered to the connected widgets on both ends, bent into 3 segments having the same length in both parallel segments.\n// chartBranch: created from an 'initial' arrow, centered to the connected widgets on both ends, bent into 3 segments, can share inital segment with other 'chartBranch' arrows, 1st segment size stays put.\n// chartSide: created from an 'initial' arrow, moved to the side of a group of 'chartBranch' arrows and can be on any point of both connected widgets.\nexport type ArrowType = \"initial\" | \"chartBranch\" | \"chartSide\";\n\nexport type StickyWidget = W & { type: \"sticky\" };\nexport type ArrowWidget = W & {\n  type: \"arrow\";\n  points: Point[];\n  start: string | null;\n  startPoint?: 'top' | 'right' | 'bottom' | 'left' | null;\n  endPoint?: 'top' | 'right' | 'bottom' | 'left' | null;\n  end: string | null;\n  arrowType: ArrowType;\n  chartBranch: ChartBranch | null;\n  initialIsHorizontal: boolean;\n};\n\nexport type Widget = StickyWidget | ArrowWidget;\n\nexport const stickyFactory = (spec: Partial<StickyWidget>): StickyWidget => ({\n  id: uuid.v4(),\n  height: spec.height ?? 100,\n  width: spec.width ?? 100,\n  type: \"sticky\",\n  x: (spec.x || 0) - 50,\n  y: (spec.y || 0) - 50,\n});\n\nexport const arrowFactory = (spec: Partial<ArrowWidget>): ArrowWidget => ({\n  id: uuid.v4(),\n  height: 0,\n  width: 0,\n  type: \"arrow\",\n  x: (spec.x || 0) - 25,\n  y: (spec.y || 0) - 25,\n  start: spec.start || null,\n  end: spec.end || null,\n  points: [],\n  arrowType: spec.arrowType || \"initial\",\n  chartBranch: null,\n  initialIsHorizontal: spec.initialIsHorizontal || true,\n});\n\nexport const toOrientation = (type: PointType) : Orientation => {\n  return type === \"left\" || type === \"right\" ? \"horizontal\" : \"vertical\";\n}\n","import React, { CSSProperties } from \"react\";\nimport \"./App.css\";\nimport Sticky from \"./widgets/Sticky\";\nimport Arrow from \"./widgets/Arrow\";\nimport Checkbox from \"./settings/Checkbox\";\nimport {\n  stickyFactory,\n  Widget,\n  StickyWidget,\n  ArrowWidget,\n  arrowFactory,\n  Point,\n  Position,\n  toOrientation,\n  ChartBranch,\n} from \"./types\";\n\nexport const TOLERANCE = 10;\nexport const ARROW_MARGIN = 10;\nexport const TWO_SEGMENT_ARROW_MIN = 20;\n\nexport const settingsStyle: React.CSSProperties = {\n  position: \"absolute\",\n  top: 0,\n  width:\"auto\",\n  height: \"auto\",\n  borderStyle: \"solid\",\n  backgroundColor: \"lightgray\",\n  padding: 10,\n};\n\ninterface State {\n  settings:{\n    stickToConvergentWidgetSide: boolean;\n  };\n  cursor: React.CSSProperties[\"cursor\"];\n  dragging: string[] | null;\n  initialId: string | null;\n  endId: string | null;\n  selected: string[] | null;\n  widgets: Record<string, Widget>;\n}\n\nclass App extends React.Component<{}, State> {\n  ref: HTMLDivElement | null = null;\n\n  state: State = {\n    settings :{\n      stickToConvergentWidgetSide: false,\n    },\n    cursor: \"auto\",\n    dragging: null,\n    initialId: null,\n    endId: null,\n    selected: null,\n    widgets: {},\n  };\n  mousePosition: Position | null = null;\n  mouseOverSticky: boolean = false;\n\n  cancelArrowCreation() {\n    this.setState((prevState) => {\n      if(prevState.dragging && prevState.dragging.length) {\n        // delete dragging arrow if any\n        const draggingWidget = { ...prevState.widgets[prevState.dragging[0]] };\n        if(draggingWidget.type === \"arrow\") {\n          const prevWidgets = prevState.widgets;\n          delete prevWidgets[draggingWidget.id];\n          return {\n            ...prevState,\n            dragging: null,\n            initialId: null,\n            endId: null,\n            cursor: \"auto\",\n            widgets: { ...prevWidgets },\n          }\n        }\n      }\n\n      return {\n        ...prevState,\n        dragging: null,\n        initialId: null,\n        endId: null,\n        cursor: \"auto\",\n      }\n    });\n  }\n\n  handleArrowPointDragStart = (id: string, e: React.MouseEvent, isStart: boolean) => {\n    if (isStart) {\n      const end = (this.state.widgets[id] as ArrowWidget).end;\n      this.setState((prevState) => (\n        {\n          ...prevState,\n          cursor: 'crosshair',\n          dragging: [id],\n          endId: end,\n          initialId: null,\n          widgets: {\n            ...prevState.widgets,\n            [id]: {\n              ...prevState.widgets[id],\n              start: null,\n            }\n          }\n        }\n      ));\n    } else {\n      const initial = (this.state.widgets[id] as ArrowWidget).start;\n      this.setState((prevState) => (\n        {\n          ...prevState,\n          cursor: 'crosshair',\n          dragging: [id],\n          initialId: initial,\n          endId: null,\n          widgets: {\n            ...prevState.widgets,\n            [id]: {\n              ...prevState.widgets[id],\n              end: null,\n            }\n          }\n        }\n      ));\n    }\n  }\n\n  handleStickyMouseDown = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    if (this.state.cursor !== \"crosshair\")\n      return;\n    // start arrow creation\n    if (!this.state.dragging) {\n      const mousePosition: Position = {x: e.clientX, y: e.clientY };\n      // this.setState({initialId: id});\n\n      // create Arrow for dragging without end widget\n      this.setState((prevState) => {\n        const arrow = {\n          ...arrowFactory({ start: id, end: null }),\n        };\n\n        this.updateDisconnectedArrow(arrow, prevState.widgets, mousePosition);\n\n        return {\n          ...prevState,\n          initialId: id,\n          widgets: {\n            ...prevState.widgets,\n            [arrow.id]: arrow,\n          },\n          dragging: [arrow.id],\n        };\n      });\n\n      return;\n    }\n  }\n\n  handleStickyMouseUp = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    if (this.state.initialId === id || this.state.endId === id) {\n      this.cancelArrowCreation();\n      return;\n    }\n\n    if (this.state.cursor !== \"crosshair\")\n      return;\n    \n    this.setState((prevState) => {\n      if (!prevState.dragging)\n        return { ...prevState };\n      \n      const draggingArrow = { ...prevState.widgets[prevState.dragging[0]] } as ArrowWidget;\n      const startWidget = prevState.widgets[draggingArrow.start ?? id];\n      const endWidget = prevState.widgets[draggingArrow.end ?? id];\n\n      // avoid duplicate arrow (same start and end)\n      const duplicateArrow = Object.values(prevState.widgets).find(w => w.type===\"arrow\" && w.id !== draggingArrow.id && w.start === startWidget.id && w.end === endWidget.id);\n      if(duplicateArrow) {\n        return { ...prevState }\n      }\n      \n      // update Arrow start/end and connect it to both widgets\n      const isHorizontalConnection = Math.abs((startWidget.x - endWidget.x) / (startWidget.y - endWidget.y)) > 1;\n      draggingArrow.start = startWidget.id;\n      draggingArrow.end = endWidget.id;\n      draggingArrow.initialIsHorizontal = isHorizontalConnection;\n\n      this.updateArrow(draggingArrow, prevState.widgets);\n\n      return {\n        ...prevState,\n        cursor: \"auto\",\n        dragging: null,\n        initialId: null,\n        endId: null,\n        widgets: {\n          ...prevState.widgets,\n          [draggingArrow.id]: draggingArrow,\n        },\n      };\n    });\n  };\n\n  handleDoubleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    // create rectangular stickies while holding CTRL down\n    const stickyWidth = e.ctrlKey ? 150 : 100;\n    const s = stickyFactory({ x: e.clientX, y: e.clientY, width: stickyWidth });\n    this.setState((prevState) => ({\n      selected: [s.id],\n      widgets: {\n        ...prevState.widgets,\n        [s.id]: s,\n      },\n    }));\n  };\n\n  handleDrag = (e: React.MouseEvent<HTMLDivElement>) => {\n    const deltaX = this.mousePosition ? e.clientX - this.mousePosition.x : e.clientX;\n    const deltaY = this.mousePosition ? e.clientY - this.mousePosition.y : e.clientY;\n    this.mousePosition = {x: e.clientX, y: e.clientY };\n    const { dragging, widgets } = this.state;\n\n    if (!dragging)\n      return;\n    const draggingWidgets = dragging.map(id => widgets[id]);\n    if(draggingWidgets.length > 1 || draggingWidgets[0].type === \"sticky\") {\n      // update connected arrows\n      const connectedArrows = Object.values(widgets)\n      .filter(\n        (w) =>\n          w.type === \"arrow\" &&\n          dragging &&\n          ((w.start && dragging.includes(w.start)) ||\n          (w.end && dragging.includes(w.end))))\n      .reduce((acc, cur) => {\n        const arrow = cur as ArrowWidget;\n        this.updateArrow(arrow, widgets);\n        if (dragging &&\n          ((arrow.start && dragging.includes(arrow.start)) &&\n          (arrow.end && dragging.includes(arrow.end))) &&\n          arrow.chartBranch && arrow.chartBranch.type === 'oneToOne') {\n            arrow.chartBranch.position = arrow.chartBranch.position + (arrow.initialIsHorizontal ? deltaX : deltaY);\n          }\n        \n        return {\n          ...acc,\n          [arrow.id]: {\n            ...arrow,\n          },\n        };\n      }, {} as Record<string, Widget>);\n  \n      const movedWidgets: Record<string, Widget> = draggingWidgets.reduce((acc, cur) => {\n        return {\n          ...acc,\n          [cur.id]: {\n            ...cur,\n            x: cur.x + deltaX,\n            y: cur.y + deltaY,\n          }\n        };\n      }, {});\n      this.setState({\n        widgets: {\n          ...widgets,\n          ...movedWidgets,\n          ...connectedArrows,\n        }\n      });\n    } else if (draggingWidgets[0].type === \"arrow\" && !this.mouseOverSticky) {\n      const draggingArrow = { ...draggingWidgets[0] };\n      // update arrow dragged end\n      if (!draggingArrow.end || !draggingArrow.start)\n        this.updateDisconnectedArrow(draggingArrow, widgets, this.mousePosition);\n      \n      this.setState({\n        widgets: {\n          ...widgets,\n          [draggingArrow.id]: draggingArrow,\n        },\n      });\n    }\n  };\n\n  handleMouseHoverSticky = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    this.mouseOverSticky = true;\n    const { dragging, widgets } = this.state;\n    if (!dragging) return;\n    // stick to widget when hovering while dragging\n    const draggingWidgets = dragging.map(id => widgets[id]);\n    if(draggingWidgets.length === 1 &&\n      draggingWidgets[0].type === \"arrow\" &&\n      draggingWidgets[0].start !== id &&\n      draggingWidgets[0].end !== id) {\n      const draggingArrow = { ...draggingWidgets[0] };\n      // connect to widget and update arrow\n      draggingArrow.start = draggingArrow.start ?? id;\n      draggingArrow.end = draggingArrow.end ?? id;\n      this.updateArrow(draggingArrow, widgets);\n      const newWidgets = { ...widgets, [draggingArrow.id]: draggingArrow };\n      this.setState({\n        widgets: newWidgets,\n      });\n    };\n  }\n\n  handleMouseLeaveSticky = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    this.mouseOverSticky = false;\n    const { dragging, widgets } = this.state;\n    if (!dragging) return;\n    const draggingWidgets = dragging.map(id => widgets[id]);\n    if (draggingWidgets.length === 1 &&\n      draggingWidgets[0].type === \"arrow\" &&\n      draggingWidgets[0].start && draggingWidgets[0].end &&\n      (draggingWidgets[0].start === id ||\n      draggingWidgets[0].end === id)) {\n      // disconnect from widget and update arrow\n      const draggingArrow = { ...draggingWidgets[0] };\n      draggingArrow.start = draggingArrow.start === id ? null : draggingArrow.start;\n      draggingArrow.end = draggingArrow.end === id ? null : draggingArrow.end;\n      this.updateDisconnectedArrow(draggingArrow, widgets, {x: e.clientX, y: e.clientY});\n      \n      this.setState({\n        widgets: {\n          ...widgets,\n          [draggingArrow.id]: draggingArrow,\n        },\n      });\n    }\n  }\n\n  handleWidgetDragStart = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    const { shiftKey } = e;\n    e.stopPropagation();\n\n    if (e.button !== 0)\n      return;\n\n    if(this.state.dragging)\n      return;\n\n    const selected = (this.state.selected && (this.state.selected.includes(id) || shiftKey))\n    ? !this.state.selected.includes(id)\n      ? [...this.state.selected, id]\n      : this.state.selected\n    : [id];\n    const dragging = (this.state.selected && this.state.selected.includes(id)) ? this.state.selected : [id];\n\n    this.setState({\n      dragging,\n      selected,\n    });\n  };\n\n  handleKeyDown = (e: React.KeyboardEvent) => {\n    if(e.key === \"c\") {\n      const newCursor = this.state.cursor === \"auto\" ? \"crosshair\" : \"auto\";\n      if(newCursor === \"auto\") {\n        this.cancelArrowCreation();\n      } else {\n        this.setState({\n          cursor: newCursor,\n        });\n      }\n    }\n\n    if ((e.key === \"Backspace\" || e.key === \"Delete\") && !!this.state.selected) {\n      this.setState((prevState) => {\n        const selectedWidgetsId = prevState.selected || null;\n        const prevWidgets = prevState.widgets;\n        selectedWidgetsId?.forEach(id => {\n          Object.values(prevWidgets).forEach((w) => {\n            if (w.type === \"arrow\" && (w.start === id || w.end === id))\n              delete prevWidgets[w.id];\n          });\n          delete prevWidgets[id]\n        });\n\n        return {\n          ...prevState,\n          selected: null,\n          widgets: { ...prevWidgets },\n        };\n      });\n    }\n  };\n\n  handleMouseDown = () => {\n    this.setState({ selected: null });\n  };\n\n  handleMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n    const draggingWidgets = this.state.dragging && this.state.dragging.map(id => this.state.widgets[id]);\n    if(draggingWidgets && draggingWidgets.length === 1 && draggingWidgets[0].type === \"arrow\") {\n      if (this.state.initialId || this.state.endId) {\n        this.cancelArrowCreation();\n      }\n      return;\n    }\n    this.setState((prevState) => {\n      \n      if (!prevState.dragging)\n        return { ...prevState };\n      \n      const connectedArrows = Object.values(prevState.widgets)\n      .filter(\n        (w) =>\n          w.type === \"arrow\" &&\n          (((w.start && prevState.dragging?.includes(w.start)) || (w.end && prevState.dragging?.includes(w.end))))\n      ).map(w=> w as ArrowWidget)\n      .reduce((acc, arrow) => {\n\n        // stick to your branch side\n        if(!prevState.settings.stickToConvergentWidgetSide || arrow.arrowType !== \"chartBranch\") {\n          if(this.isChartSideArrow(arrow, prevState.widgets)) {\n            const startWidget = prevState.widgets[arrow.start || \"\"] as StickyWidget;\n            const endWidget = prevState.widgets[arrow.end || \"\"] as StickyWidget;\n            if(this.updateArrowChartSide(arrow, startWidget, endWidget)) {\n              arrow.arrowType = \"chartSide\";\n            }\n          }\n          \n          // update chart branches state (for both start and end arrows)\n          this.setArrowChartBranch(arrow, prevState.widgets, false);\n        }\n          \n        // update initial axis\n        arrow.initialIsHorizontal = arrow.points[0].type === \"left\" || arrow.points[0].type === \"right\";\n\n        return {\n          ...acc,\n          [arrow.id]: {\n            ...arrow,\n          },\n        };\n      }, {} as Record<string, Widget>);\n      \n      return {\n        dragging: null,\n        widgets: {\n          ...prevState.widgets,\n          ...connectedArrows,\n        },\n      };\n    });\n  };\n\n  handleRef = (ref: HTMLDivElement) => {\n    this.ref = ref;\n    // start focused to listen for key presses\n    if(this.ref) {\n      this.ref.focus();\n    }\n  }\n\n  // finds if this arrow should be a part of a branchChart\n  setArrowChartBranch(arrow: ArrowWidget, widgets: Record<string, Widget>, dragging: boolean) {\n    if(!this.state.settings.stickToConvergentWidgetSide && arrow.chartBranch) {\n      // don't recalculate if chartBranchSide didn't change\n      let convergencePoint = arrow.chartBranch.type === \"manyToOne\" ? arrow.points[1] : arrow.points[0];\n      if(convergencePoint.type === arrow.chartBranch.convergenceSide)\n      return;\n    }\n    \n    const chartBranchArrow = this.getSharedChartBranchArrow(arrow, widgets);\n    // don't force chartBranching while dragging on an empty side of the origin/end widget\n    if(dragging && !chartBranchArrow) {\n      arrow.chartBranch = null;\n      return;\n    }\n  \n    // don't set arrowType while dragging (wait until mouseUp)\n    if(!dragging) {\n      arrow.arrowType = \"chartBranch\";\n    }\n    \n    if(chartBranchArrow && chartBranchArrow.chartBranch) {\n      // become part of an existing chartBranch\n      if(chartBranchArrow.chartBranch.type === \"oneToOne\") {\n        // if we are just adding the 2nd arrow to this chartBranch, update type and convergenceSide beforehand\n        if(chartBranchArrow.start === arrow.start ){\n          chartBranchArrow.chartBranch.type = \"oneToMany\";\n          chartBranchArrow.chartBranch.convergenceSide = arrow.points[0].type;\n        } else {\n          chartBranchArrow.chartBranch.type = \"manyToOne\";\n          chartBranchArrow.chartBranch.convergenceSide = arrow.points[1].type;\n        }\n      }\n      arrow.chartBranch = Object.assign({}, chartBranchArrow.chartBranch);\n    } else {\n      // new lonely charBranch arrow\n      let chartBranch: ChartBranch = {\n        position: 0,\n        convergenceSide: arrow.points[0].type,\n        type: \"oneToOne\"\n      };\n      // on new branch, set 2nd segment position to half the distance in X or Y depending on orientation \n      if(toOrientation(chartBranch.convergenceSide) === \"horizontal\") {\n        chartBranch.position = arrow.points[0].x + ((arrow.points[1].x - arrow.points[0].x) / 2);\n      } else {\n        chartBranch.position = arrow.points[0].y + ((arrow.points[1].y - arrow.points[0].y) / 2);\n      }\n      arrow.chartBranch = chartBranch;\n    }\n  }\n\n  // find another arrow that share same origin or end point and already has chartBranch defined\n  getSharedChartBranchArrow(arrow: ArrowWidget, widgets: Record<string, Widget>) {\n    const chartBranchArrows = Object.values(widgets)\n    .filter(\n      (w) =>\n      w.type === \"arrow\" &&\n      w.id !== arrow.id &&\n      w.arrowType === \"chartBranch\" &&\n      w.chartBranch &&\n      ((w.start === arrow.start && w.points[0].type === arrow.points[0].type) ||\n       (w.end === arrow.end && w.points[1].type === arrow.points[1].type))\n    ).map(w => w as ArrowWidget);\n    \n    return chartBranchArrows.length > 0 ? chartBranchArrows[0] : null;\n  }\n\n  // used when dragging an arrow point that is connected to only one widget \n  updateDisconnectedArrow(arrow: ArrowWidget, widgets: Record<string, Widget>, draggingPosition: Position) {\n    const startWidget = widgets[arrow.start || \"\"];\n    const endWidget = widgets[arrow.end || \"\"];\n    \n    const connectedWidget = startWidget ? startWidget : endWidget;\n\n    const startPosition: Position = startWidget ? {x: startWidget.x, y: startWidget.y } : draggingPosition;\n    const endPosition: Position = endWidget ? {x: endWidget.x, y: endWidget.y } : draggingPosition;\n\n    // initial dummy values\n    let points: Point[] = [{type: \"right\", x: 0, y: 0}, {type: \"left\", x: 1, y: 0}];\n\n    const isHorizontalStart = Math.abs((startPosition.x - endPosition.x) / (startPosition.y - endPosition.y)) > 1;\n    // change connections depending on positioning (and wich side is the connectedWidget)\n    if(isHorizontalStart) {\n      if(connectedWidget.x + connectedWidget.width + TOLERANCE < draggingPosition.x) {\n        points[0].type = startWidget ? \"right\" : \"left\";\n        points[1].type = startWidget ? \"left\" : \"right\";\n      } else {\n        points[0].type = startWidget ? \"left\" : \"right\";\n        points[1].type = startWidget ? \"right\" : \"left\";\n      }\n    } else {\n      if (connectedWidget.y + connectedWidget.height + TOLERANCE < draggingPosition.y) {\n        points[0].type = startWidget ? \"bottom\" : \"top\";\n        points[1].type = startWidget ? \"top\" : \"bottom\";\n      } else {\n        points[0].type = startWidget ? \"top\" : \"bottom\";\n        points[1].type = startWidget ? \"bottom\" : \"top\";\n      }\n    }\n    points[0] = startWidget ? this.getWidgetSideMidPosition(points[0], startWidget) : {...points[0], x: draggingPosition.x, y: draggingPosition.y};\n    points[1] = endWidget ? this.getWidgetSideMidPosition(points[1], endWidget) : {...points[1], x: draggingPosition.x, y: draggingPosition.y};\n    arrow.points = points;\n  }\n\n  // updates arrow points (start/end) in both position and type\n  updateArrow(arrow: ArrowWidget, widgets: Record<string, Widget>, snappingPoint?: string | null) {\n    const startWidget = widgets[arrow.start || \"\"];\n    const endWidget = widgets[arrow.end || \"\"];\n    \n    // initial dummy values\n    let points: Point[] = [{type: \"right\", x: 0, y: 0}, {type: \"left\", x: 1, y: 0}];\n    \n    if(arrow.points.length === 2) {\n      points = arrow.points;\n    }\n    \n    // stick to your branch side\n    if(!this.state.settings.stickToConvergentWidgetSide || arrow.arrowType !== \"chartBranch\") {\n      const isHorizontalStart = Math.abs((startWidget.x - endWidget.x) / (startWidget.y - endWidget.y)) > 1;\n      // change connections depending on positioning\n      if(isHorizontalStart) {\n        if (startWidget.x + startWidget.width + TOLERANCE < endWidget.x) {\n          points[0].type = \"right\";\n          points[1].type = \"left\";\n        } else {\n          points[0].type = \"left\";\n          points[1].type = \"right\";\n        }\n      } else {\n        if (startWidget.y + startWidget.height + TOLERANCE < endWidget.y) {\n          points[0].type = \"bottom\";\n          points[1].type = \"top\";\n        } else {\n          points[0].type = \"top\";\n          points[1].type = \"bottom\";\n        }\n      }\n      points[0] = this.getWidgetSideMidPosition(points[0], startWidget);\n      points[1] = this.getWidgetSideMidPosition(points[1], endWidget);\n      arrow.points = points;\n      \n      // check if being a chartSide arrow\n      if(this.isChartSideArrow(arrow, widgets)) {\n        this.updateArrowChartSide(arrow, startWidget, endWidget);\n      }\n      \n      // check if being part of a chartBranch\n      this.setArrowChartBranch(arrow, widgets, true);\n    }\n    \n    // update chartBranch arrows\n    // this is mainly used for a branched arrow whose widget is \"behind\" the branch fixed position \n    if(arrow.chartBranch) {\n      // on \"oneOnOne\" we consider the start widget as the convergent one\n      const convergesOnEnd = arrow.chartBranch.type === \"manyToOne\"; \n      let convergencePoint = convergesOnEnd ? arrow.points[1] : arrow.points[0];\n      let nonConvergencePoint = convergesOnEnd ? arrow.points[0] : arrow.points[1];\n      const convergentWidget = convergesOnEnd ? endWidget : startWidget;\n      const nonConvergentWidget = convergesOnEnd ? startWidget : endWidget;\n      \n      convergencePoint = this.getWidgetSideMidPosition(convergencePoint, convergentWidget);\n      nonConvergencePoint = this.getWidgetSideMidPosition(nonConvergencePoint, nonConvergentWidget);\n    \n      if(toOrientation(arrow.chartBranch.convergenceSide) === \"horizontal\") {\n        // if inside, use 2-segment arrow\n        if(arrow.chartBranch.position >= nonConvergentWidget.x && arrow.chartBranch.position <= nonConvergentWidget.x + nonConvergentWidget.width) {\n          nonConvergencePoint.x = arrow.chartBranch.position;\n          nonConvergencePoint.y = (nonConvergentWidget.y + nonConvergentWidget.height/2) > convergencePoint.y ? nonConvergentWidget.y : nonConvergentWidget.y + nonConvergentWidget.height;\n        // otherwise use regular 3-segment arrow but make sure it connects to the correct side\n        } else {\n          nonConvergencePoint.type = arrow.chartBranch.position < nonConvergentWidget.x ? \"left\" : \"right\";\n          nonConvergencePoint = this.getWidgetSideMidPosition(nonConvergencePoint, nonConvergentWidget);\n        }\n      } else {  // vertical\n        // if inside, use 2-segment arrow\n        if(arrow.chartBranch.position >= nonConvergentWidget.y && arrow.chartBranch.position <= nonConvergentWidget.y + nonConvergentWidget.height) {\n          nonConvergencePoint.x = (nonConvergentWidget.x + nonConvergentWidget.width/2) > convergencePoint.x ? nonConvergentWidget.x : nonConvergentWidget.x + nonConvergentWidget.width;\n          nonConvergencePoint.y = arrow.chartBranch.position;\n        // otherwise use regular 3-segment arrow but make sure it connects to the correct side\n        } else {\n          nonConvergencePoint.type = arrow.chartBranch.position < nonConvergentWidget.y ? \"top\" : \"bottom\";\n          nonConvergencePoint = this.getWidgetSideMidPosition(nonConvergencePoint, nonConvergentWidget);\n        }\n      }\n\n      arrow.points[0] = convergesOnEnd ? nonConvergencePoint : convergencePoint;\n      arrow.points[1] = convergesOnEnd ? convergencePoint : nonConvergencePoint;\n    }\n  }\n  \n  isChartSideArrow(arrow: ArrowWidget, widgets: Record<string, Widget>) {\n    // can't be chartSide if there is any chartBranch on current side\n    if(this.getSharedChartBranchArrow(arrow, widgets)) return;\n\n    return ((arrow.initialIsHorizontal && (arrow.points[0].type === \"top\" || arrow.points[0].type === \"bottom\")) ||\n    (!arrow.initialIsHorizontal && (arrow.points[0].type === \"left\" || arrow.points[0].type === \"right\")));\n  }\n\n  // returns true if using intersection chartSide\n  updateArrowChartSide(arrow: ArrowWidget, startWidget: Widget, endWidget: Widget) {\n    // if widgets limits are intersecting, use chartSide connector\n    if(arrow.initialIsHorizontal) {\n      const middleX = this.getIntersectionMiddle(startWidget.x, startWidget.width, endWidget.x, endWidget.width);\n      if(middleX) {\n        arrow.points[0].x = middleX;\n        arrow.points[1].x = middleX;\n        return true;\n      }\n    } else {\n      const middleY = this.getIntersectionMiddle(startWidget.y, startWidget.height, endWidget.y, endWidget.height);\n      if(middleY) {\n        arrow.points[0].y = middleY;\n        arrow.points[1].y = middleY;\n        return true;\n      }\n    }\n\n    // if there is no intersection, use original axis side\n    if(arrow.initialIsHorizontal) {\n      arrow.points[0].type = endWidget.x > startWidget.x + (startWidget.width / 2) ? \"right\" : \"left\";\n    } else {\n      arrow.points[0].type = endWidget.y > startWidget.y + (startWidget.height / 2) ? \"bottom\" : \"top\";\n    }\n    arrow.points[0] = this.getWidgetSideMidPosition(arrow.points[0], startWidget);\n    \n    const startWidgetCenter = {x: startWidget.x + (startWidget.width/2), y: startWidget.y + (startWidget.height/2)};\n    const endWidgetCenter = {x: endWidget.x + (endWidget.width/2), y: endWidget.y + (endWidget.height/2)};\n    const distX = Math.abs(startWidgetCenter.x - endWidgetCenter.x) - (startWidget.width/2 + endWidget.width/2);\n    const distY = Math.abs(startWidgetCenter.y - endWidgetCenter.y) - (startWidget.height/2 + endWidget.height/2);\n    const widgetsTooClose = arrow.initialIsHorizontal ? distX <= ARROW_MARGIN : distY <= ARROW_MARGIN;\n    \n    // if widgets are too close, use 2-segments arrow\n    if(widgetsTooClose) {\n      // never closer than 20px from origin and never less than 10px from target side\n      if(arrow.initialIsHorizontal) {\n        arrow.points[1].type = endWidget.y > arrow.points[0].y ? \"top\" : \"bottom\";\n        let distXToCenter = startWidget.width/2 + Math.max(distX + ARROW_MARGIN, TWO_SEGMENT_ARROW_MIN);\n        arrow.points[1].x = startWidgetCenter.x + (arrow.points[0].type === \"right\" ? distXToCenter : -distXToCenter);\n        arrow.points[1].y = arrow.points[1].type === \"top\" ? endWidget.y : endWidget.y + endWidget.height;\n      } else {\n        arrow.points[1].type = endWidget.x > arrow.points[0].x ? \"left\" : \"right\";\n        let distYToCenter = startWidget.height/2 + Math.max(distY + ARROW_MARGIN, TWO_SEGMENT_ARROW_MIN);\n        arrow.points[1].x = arrow.points[1].type === \"left\" ? endWidget.x : endWidget.x + endWidget.width;\n        arrow.points[1].y = startWidgetCenter.y + (arrow.points[0].type === \"bottom\" ? distYToCenter : -distYToCenter);\n      }\n    // otherwise use regular 3-segments arrow\n    } else {\n      if(arrow.initialIsHorizontal) {\n        \tarrow.points[1].type = arrow.points[0].type === \"right\" ? \"left\" : \"right\";\n      } else {\n        arrow.points[1].type = arrow.points[0].type === \"bottom\" ? \"top\" : \"bottom\";\n      }\n      arrow.points[1] = this.getWidgetSideMidPosition(arrow.points[1], endWidget);\n    }\n\n    return false;\n  }\n\n  // returns if any widgets are at \"distance\" or lower in the requested axis\n  widgetsTooClose(a: Widget, b: Widget, distance: number, horizontal: boolean) {\n    const aCenter = {x: a.x + (a.width/2), y: a.y + (a.height/2)};\n    const bCenter = {x: b.x + (b.width/2), y: b.y + (b.height/2)};\n    if(horizontal) {\n      const distX = Math.abs(aCenter.x - bCenter.x) - (a.width/2 + b.width/2);\n      return distX <= distance;\n    }\n    const distY = Math.abs(aCenter.y - bCenter.y) - (a.height/2 + b.height/2);\n    return distY <= distance;\n  }\n\n  // returns the middle point of an intersection\n  getIntersectionMiddle(min1: number, size1: number, min2: number, size2: number) {\n    const max1 = min1 + size1;\n    const max2 = min2 + size2;\n\n    // TODO: none of this works when moving endWidget\n    // TODO: make sure this works with different shaped widgets\n    // if((this.between(min1, min2, max2) && this.between(max1, min2, max2)) ||\n    //    (this.between(min2, min1, max1) && this.between(max2, min1, max1))) {\n    if((min1 === min2 && max1 === max2) ||\n      (min1 > min2 && min1 < max2)) {\n      const intersection = max2 - min1;\n      if(intersection <= ARROW_MARGIN * 2) return null;\n      \n      return min1 + (intersection / 2);\n    } else if(max1 > min2 && max1 < max2) {\n      const intersection = max1 - min2;\n      if(intersection <= ARROW_MARGIN * 2) return null;\n\n      return max1 - (intersection / 2);\n    }\n\n    // no intersection\n    return null;\n  }\n\n  between(value: number, min: number, max: number) {\n    return value>min && value<max;\n  }\n  \n  getWidgetSideMidPosition(point: Point, widget: Widget) {\n    let newPoint: Point = {type: point.type, x: 0, y: 0};\n    switch(point.type) {\n      case \"top\":\n        newPoint.x = widget.x + widget.width / 2;\n        newPoint.y = widget.y;\n        break;\n      case \"right\":\n        newPoint.x = widget.x + widget.width;\n        newPoint.y = widget.y + widget.height / 2;\n        break;\n      case \"bottom\":\n        newPoint.x = widget.x + widget.width / 2;\n        newPoint.y = widget.y + widget.height;\n        break;\n      case \"left\":\n        newPoint.x = widget.x;\n        newPoint.y = widget.y + widget.height / 2;\n        break;\n    }\n\n    return newPoint;\n  }\n\n  render() {\n    const { cursor, selected, widgets } = this.state;\n    return (\n      <div>\n        <div\n          id=\"canvas\"\n          style={{ cursor }}\n          className={`App ${cursor === 'crosshair' ? 'connector-mode' : ''}`}\n          tabIndex={1}\n          onDoubleClick={this.handleDoubleClick}\n          onKeyDown={this.handleKeyDown}\n          onMouseMove={this.handleDrag}\n          onMouseDown={this.handleMouseDown}\n          onMouseUp={this.handleMouseUp}\n          ref={this.handleRef}\n          >\n          {Object.values(widgets).map((w) => {\n            if (w.type === \"sticky\") {\n              return (\n                <Sticky\n                cursor={cursor}\n                onMouseDown={this.handleStickyMouseDown}\n                onMouseUp={this.handleStickyMouseUp}\n                onDragStart={this.handleWidgetDragStart}\n                onMouseHover={this.handleMouseHoverSticky}\n                onMouseLeave={this.handleMouseLeaveSticky}\n                selected={!!selected?.includes(w.id)}\n                widget={w}\n                key={w.id}\n                />\n                );\n            }\n            \n            if (w.type === \"arrow\") {\n              return <Arrow widget={w} key={w.id} onDragPointStart={this.handleArrowPointDragStart}/>;\n            }\n            \n            return null;\n          })}\n        </div>\n        <div id=\"settings\" style={settingsStyle}>\n          <Checkbox\n            label=\"Stick To Convergent Widget Side\"\n            onCheckedChange={(checked) => this.setState({settings: { stickToConvergentWidgetSide: checked }})} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}