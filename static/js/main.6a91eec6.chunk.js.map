{"version":3,"sources":["widgets/Sticky.tsx","widgets/Arrow.tsx","settings/Checkbox.tsx","types.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Sticky","dragging","initialX","initialY","handleDragStart","e","props","onDragStart","widget","cursor","onMouseDown","id","handleMouseUp","onMouseUp","handleMouseHover","onMouseHover","handleMouseLeave","onMouseLeave","this","selected","x","y","width","height","onMouseMove","style","top","left","border","className","SNAPPING_POINT_WIDTH","React","Component","Arrow","state","draggingSegment","draggingSegmentNumber","editing","label","ref","getPoints","points","start","end","length","handleSegmentDragStart","index","onDragSegmentStart","clientX","clientY","normalizedIndex","setState","handleSegmentDragEnd","console","log","pos","position","onDragSegmentEnd","undefined","handleMouseMove","type","onDragSegment","connectionDot","key","direction","handleDragPointStart","onDragPointStart","stroke","fill","d","fillRule","transform","getRotation","transformOrigin","cx","cy","r","strokeWidth","dir","pathGenerator","showLabels","isHorizontalStart","arrowPath","forEach","point","next","push","pointerEvents","paths","createLabel","withConnectionDot","labelSize","middlePointIndex","Math","floor","middlePoint","nextMiddlePoint","center","tabIndex","onClick","handleTextClick","handleRef","window","editingLabel","document","addEventListener","handleDocClick","b","getBoundingClientRect","okH","okV","textContent","removeEventListener","path","contentEditable","suppressContentEditableWarning","xmlns","version","PureComponent","Checkbox","checked","handleOnChange","prevState","onCheckedChange","onChange","defaultChecked","stickyFactory","spec","uuid","arrowFactory","arrowType","chartBranch","initialIsHorizontal","toOrientation","arrowIsHorizontal","arrow","settingsStyle","borderStyle","backgroundColor","padding","App","settings","stickToConvergentWidgetSide","initialId","endId","widgets","newSegment","mousePosition","mouseOverSticky","handleArrowPointDragStart","isStart","startPoint","initial","endPoint","handleStickyMouseDown","handleStickyMouseUp","stopPropagation","draggingArrow","startWidget","endWidget","setArrowChartBranch","cancelArrowCreation","handleDoubleClick","stickyWidth","ctrlKey","metaKey","s","handleDrag","deltaX","deltaY","draggingWidgets","map","arrows","Object","values","filter","w","connectedArrows","includes","reduce","acc","cur","updateArrow","a","movedWidgets","handleMouseHoverSticky","target","targetChanged","newWidgets","opositePoint","handleMouseLeaveSticky","handleWidgetDragStart","shiftKey","button","handleKeyDown","newCursor","selectedWidgetsId","prevWidgets","handleMouseDown","isDraggingArrow","getConnectedStickyPos","coords","STICKY_HEIGHT","draggingPoint","isChartSideArrow","updateArrowChartSide","focus","getStartPointType","first","second","getEndPointType","reverse","handleDragSementStart","arrowId","horizontalDrag","isFirst","isLast","last","third","unalteredEndPoints","slice","unalteredPoints","handleDragSegment","handleDragSegmentEnd","splice","startType","endType","setIntermidiatePoints","p2","p3","p4","isHorizontalEnd","midDistance","segment2Position","convergenceTarget","convergenceSide","handleCheckStick","handleCheckLabels","draggingWidget","chartBranchArrow","getSharedChartBranchArrow","assign","chartBranchArrows","draggingPosition","isDisconnectedArrow","connectedWidget","draggingX","draggingY","draggingWidth","draggingHeight","getWidgetSideMidPosition","convergesOnEnd","convergencePoint","nonConvergencePoint","convergentWidget","nonConvergentWidget","middleX","getIntersectionMiddle","middleY","startWidgetCenter","endWidgetCenter","distX","abs","distY","distXToCenter","max","distYToCenter","min1","size1","min2","size2","max1","max2","intersection","ARROW_MARGIN","value","min","newPoint","onDoubleClick","onKeyDown","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6a91eec6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Sticky.css\";\nimport { StickyWidget } from \"../types\";\n\nconst SNAPPING_POINT_WIDTH = 30;\nconst SNAPPING_POINT_CENTER = SNAPPING_POINT_WIDTH / 2;\n\ninterface PropTypes {\n  cursor: React.CSSProperties[\"cursor\"];\n  onMouseDown: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseUp: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onDragStart: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseHover: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseLeave: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  selected: boolean;\n  widget: StickyWidget;\n}\n\nclass Sticky extends React.Component<PropTypes> {\n  dragging: boolean = false;\n  initialX: number = 0;\n  initialY: number = 0;\n\n  handleDragStart = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onDragStart, widget, cursor, onMouseDown } = this.props;\n    if (cursor === 'crosshair') onMouseDown(widget.id, e);\n    else onDragStart(widget.id, e);\n  };\n\n  handleMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onMouseUp, cursor, widget } = this.props;\n    if (cursor === 'crosshair') onMouseUp(widget.id, e);\n  };\n  \n  handleMouseHover = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onMouseHover, widget } = this.props;\n    onMouseHover(widget.id, e);\n  };\n\n  handleMouseLeave = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onMouseLeave, widget } = this.props;\n    onMouseLeave(widget.id, e);\n  };\n\n  render() {\n    const {\n      cursor,\n      selected,\n      widget: { x, y , width, height},\n    } = this.props;\n    return (\n      <div\n        onMouseUp={this.handleMouseUp}\n        onMouseDown={this.handleDragStart}\n        onMouseMove={this.handleMouseHover}\n        onMouseLeave={this.handleMouseLeave}\n        style={{\n          top: y,\n          left: x,\n          width: width,\n          height: height,\n          cursor: cursor === \"crosshair\" ? \"crosshair\" : \"pointer\",\n          border: selected ? \"2px solid blue\" : \"none\",\n        }}\n        className=\"Sticky\"\n        >\n        <div\n          className=\"snapping-point top\"\n          style={{\n            top: 0 - SNAPPING_POINT_CENTER,\n            left: (width / 2) - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"top\"\n        ></div>\n        <div\n          className=\"snapping-point right\"\n          style={{\n            top: (height / 2) - SNAPPING_POINT_CENTER,\n            left: width - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"right\"\n        ></div>\n        <div\n          className=\"snapping-point bottom\"\n          style={{\n            top: height - SNAPPING_POINT_CENTER,\n            left: (width / 2) - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"bottom\"\n        ></div>\n        <div\n          className=\"snapping-point left\"\n          style={{\n            top: (height / 2) - SNAPPING_POINT_CENTER,\n            left: 0 - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"left\"\n        ></div>\n        {/* <svg className=\"auto-affordance\">\n        <circle\n          cx={`${width / 2}`}\n          cy={`${height / 2}`}\n          r=\"5\"\n          stroke={'#1c7ff9'}\n          fill='none'\n          ></circle>\n          </svg> */}\n      </div>\n    );\n  }\n}\n\nexport default Sticky;\n","import React from \"react\";\nimport \"./Sticky.css\";\nimport \"./Arrow.css\";\nimport { ArrowWidget, Point, PointType, Position } from \"../types\";\n\ntype Direction = 'horizontal' | 'vertical' | 'other';\n\ndeclare const window: any;\n\ninterface PropTypes {\n  widget: ArrowWidget;\n  onDragPointStart: (id: string, e: React.MouseEvent, isStart: boolean) => void;\n  onDragSegmentEnd: (id: string, index: number, position?: number) => void;\n  onDragSegment: (id: string, index: number, position: Position) => void;\n  onDragSegmentStart: (id: string, index: number, position: Position) => void;\n  showLabels: boolean;\n}\n\ninterface State {\n  draggingSegment: boolean;\n  draggingSegmentNumber: number; // indicates which segment is being dragged\n  position?: number;\n  editing: boolean;\n  label: string;\n}\n\nclass Arrow extends React.PureComponent<PropTypes, State> {\n  state: State = {\n    draggingSegment: false,\n    draggingSegmentNumber: -1,\n    editing: false,\n    label: 'label',\n  };\n  ref: SVGTextElement | null = null;\n\n  getPoints = () => {\n    const { points } = this.props.widget;\n    const start = points[0];\n    const end = points[points.length - 1];\n\n    return { start, end }\n  }\n\n  handleSegmentDragStart = (e: React.MouseEvent, index: number) => {\n    if (this.state.draggingSegment) return;\n    this.props.onDragSegmentStart(this.props.widget.id, index, { x: e.clientX, y: e.clientY })\n    const normalizedIndex = index === 0\n      ? 1\n      : index;\n    this.setState({ draggingSegment: true, draggingSegmentNumber: normalizedIndex })\n  }\n\n  handleSegmentDragEnd = () => {\n    console.log('handleSegmentDragEnd')\n    if (!this.state.draggingSegment) return;\n    // Create chart branch after dragging middle segment\n    const pos = this.state.position;\n    this.props.onDragSegmentEnd(this.props.widget.id, this.state.draggingSegmentNumber, pos);\n    this.setState({ draggingSegment: false, draggingSegmentNumber: -1, position: undefined })\n  }\n\n  handleMouseMove = ({ clientX, clientY }: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n    const { draggingSegmentNumber } = this.state;\n    if(!this.state.draggingSegment) return;\n\n    const { start } = this.getPoints();\n    \n    if ((start.type === 'right' || start.type === 'left') && draggingSegmentNumber % 2 !== 0 ) {\n      this.setState({ position: clientX });\n    } else {\n      this.setState({ position: clientY });\n    }\n    this.props.onDragSegment(this.props.widget.id, draggingSegmentNumber, { x: clientX, y: clientY });\n  }\n\n  connectionDot = (x: number, y: number, key: string, direction?: PointType) => {\n    const handleDragPointStart = (e: React.MouseEvent) => {\n      const { onDragPointStart, widget } = this.props;\n      onDragPointStart(widget.id, e, !direction);\n    }\n    if (!direction) {\n      return <circle\n        key={key}\n        cx={`${x}`}\n        cy={`${y}`}\n        r=\"2\"\n        stroke='transparent'\n        fill='black'\n        strokeWidth=\"6\"\n        onMouseDown={handleDragPointStart}\n        ></circle>\n    } else {\n      return <path\n        key={key}\n        className='connectionDot'\n        stroke=\"#000\"\n        fill=\"#000\"\n        d={`M${x} ${y} L${x - 8} ${y + 3}V${y - 3}z`}\n        fillRule=\"evenodd\"\n        style={{ transform: `rotate(${this.getRotation(direction)}deg)`, transformOrigin: `${x}px ${y}px` }}\n        onMouseDown={handleDragPointStart}\n      />;\n    }\n  };\n  getRotation = (dir: PointType) => {\n    switch (dir) {\n      case 'right': return 180;\n      case 'left': return 0;\n      case 'top': return 90;\n      case 'bottom': return -90;\n    }\n  }\n\n  pathGenerator = () => {\n    const { points } = this.props.widget;\n    const { showLabels } = this.props;\n    if (points.length < 2) return null;\n    // const { position } = this.state;\n    const start = points[0];\n    const end = points[points.length - 1];\n    const withConnectionDot = (arrowPath: JSX.Element[]) => [\n      this.connectionDot(start.x, start.y, '0'),\n      ...arrowPath,\n      this.connectionDot(end.x, end.y, '100', end.type),\n    ];\n    const isHorizontalStart = start.type === \"right\" || start.type === \"left\";\n    const cursor = (index: number) => (isHorizontalStart && index % 2 !== 0) || (!isHorizontalStart && index % 2 === 0) ? 'ew-resize' : 'ns-resize'\n    const arrowPath: JSX.Element[] = [];\n    points.forEach((point, index) => {\n      const onDragStart = (e: React.MouseEvent) => this.handleSegmentDragStart(e, index);\n      const next = points[index + 1];\n      if (!next) return;\n      arrowPath.push(<path\n        key={index + 1} // 0 is the first circle\n        d={`M ${point.x} ${point.y} L ${next.x} ${next.y}`}\n        stroke=\"black\"\n        strokeWidth=\"2\"\n        fill=\"none\"\n        style={{\n          cursor: cursor(index),\n          pointerEvents: 'auto'\n        }}\n        onMouseDown={onDragStart}\n      />)\n    });\n\n    const paths = arrowPath;\n    if (showLabels) paths.push(this.createLabel(points));\n    return withConnectionDot(paths);\n  };\n\n  createLabel = (points: Point[]) => {\n    const { label } = this.state;\n\n    // super hacky sizing method\n    const labelSize = { width: 8.5 * label.length, height: 18 };\n    const middlePointIndex = Math.floor(points.length / 2);\n    const middlePoint = points[middlePointIndex - 1];\n    const nextMiddlePoint = points[middlePointIndex];\n    const center = {\n      x:\n        middlePoint.x +\n        (nextMiddlePoint.x - middlePoint.x) / 2 -\n        labelSize.width / 2,\n      y:\n        middlePoint.y +\n        (nextMiddlePoint.y - middlePoint.y) / 2 +\n        labelSize.height / 4,\n    };\n    return (\n      <text\n        key=\"label\"\n        transform={`matrix(1 0 0 1 ${center.x} ${center.y})`}\n        style={{\n          cursor: this.state.editing ? 'auto' : 'pointer',\n          pointerEvents: 'auto'\n        }}\n        tabIndex={0}\n        onClick={this.handleTextClick}\n        ref={this.handleRef}\n      >\n        {label}\n      </text>\n    );\n  };\n\n  handleRef = (ref: SVGTextElement) => {\n    this.ref = ref;\n  }\n\n  handleTextClick = () => {\n    if (this.state.editing) return;\n\n    // hacky hack to prevent 'c' shortcut to screw up typing\n    window.editingLabel = true;\n    this.setState({ editing: true });\n    document.addEventListener('click', this.handleDocClick);\n  };\n\n  handleDocClick  = (e: any) => {\n    if (!this.ref) return;\n    const b = this.ref.getBoundingClientRect();\n    const okH = e.clientX > b.left && e.clientX < b.left + b.width;\n    const okV = e.clientY > b.top && e.clientY < b.top + b.height;\n    const inside = okH && okV;\n    if (!inside) {\n      window.editingLabel = false;\n      this.setState({\n        editing: false,\n        label: this.ref.textContent || '',\n      });\n      document.removeEventListener('click', this.handleDocClick);\n    }\n  };\n\n  render() {\n    const path = this.pathGenerator();\n    if (!path) return null;\n    const { editing, draggingSegment } = this.state;\n\n    return (\n      <div\n        contentEditable={editing}\n        suppressContentEditableWarning\n      >\n        <svg\n          style={{\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            pointerEvents: draggingSegment ? \"auto\" : \"none\",\n          }}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          version=\"1.1\"\n          className=\"Arrow\"\n          onMouseUp={this.handleSegmentDragEnd}\n          onMouseMove={this.handleMouseMove}\n        >\n          { path }\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default Arrow;\n","import React from \"react\";\r\n\r\ninterface PropTypes {\r\n  label: string;\r\n  onCheckedChange: (checked: boolean) => void;\r\n}\r\n\r\ninterface State {\r\n  checked: boolean;\r\n}\r\n\r\nclass Checkbox extends React.PureComponent<PropTypes, State> {\r\n  state: State = {\r\n    checked: false,\r\n  };\r\n\r\n  handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => { \r\n    this.setState((prevState) => {\r\n      const checked = !prevState.checked;\r\n      this.props.onCheckedChange(checked);\r\n      return {\r\n        checked\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{height: \"auto\"}}>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            style={{width: 15, height: 15}}\r\n            onChange={this.handleOnChange}\r\n            defaultChecked={this.state.checked} />\r\n          {this.props.label}\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checkbox;","import * as uuid from \"uuid\";\n\ninterface W {\n  height: number;\n  width: number;\n  id: string;\n  x: number;\n  y: number;\n}\n\nexport type PointType = \"bottom\" | \"top\" | \"left\" | \"right\";\nexport type Orientation = \"horizontal\" | \"vertical\";\nexport type ChartBranchType = \"oneToOne\" | \"oneToMany\" | \"manyToOne\";\n\nexport interface Point {\n  x: number;\n  y: number;\n  type?: PointType; // only first and last points have type\n}\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport interface ChartBranch {\n  position: number; // fixed position where arrows share the 2nd branch segment\n  convergenceSide?: PointType;  // side of the widget where the arrows converge (might be start or end widget depending of ChartBranchType)\n  type: ChartBranchType;\n}\n\n// initial: initial simple arrow, centered to the connected widgets on both ends, bent into 3 segments having the same length in both parallel segments.\n// chartBranch: created from an 'initial' arrow, centered to the connected widgets on both ends, bent into 3 segments, can share inital segment with other 'chartBranch' arrows, 1st segment size stays put.\n// chartSide: created from an 'initial' arrow, moved to the side of a group of 'chartBranch' arrows and can be on any point of both connected widgets.\nexport type ArrowType = \"initial\" | \"chartBranch\" | \"chartSide\";\n\nexport type StickyWidget = W & { type: \"sticky\" };\nexport type ArrowWidget = W & {\n  type: \"arrow\";\n  points: Point[];\n  start: string | null;\n  startPoint?: PointType | null; // when start point is manually set\n  endPoint?: PointType | null; // when end point is manually set\n  end: string | null;\n  arrowType: ArrowType;\n  chartBranch: ChartBranch | null;\n  initialIsHorizontal: boolean;\n  showLabels: boolean;\n};\n\nexport type Widget = StickyWidget | ArrowWidget;\n\nexport const stickyFactory = (spec: Partial<StickyWidget>): StickyWidget => ({\n  id: uuid.v4(),\n  height: spec.height ?? 100,\n  width: spec.width ?? 100,\n  type: \"sticky\",\n  x: spec.x || 0,\n  y: spec.y || 0,\n});\n\nexport const arrowFactory = (spec: Partial<ArrowWidget>): ArrowWidget => ({\n  id: uuid.v4(),\n  height: 0,\n  width: 0,\n  type: \"arrow\",\n  x: (spec.x || 0) - 25,\n  y: (spec.y || 0) - 25,\n  start: spec.start || null,\n  end: spec.end || null,\n  points: [],\n  arrowType: spec.arrowType || \"initial\",\n  chartBranch: null,\n  initialIsHorizontal: spec.initialIsHorizontal || true,\n  showLabels: spec.showLabels || false,\n});\n\nexport const toOrientation = (type: PointType) : Orientation => {\n  return type === \"left\" || type === \"right\" ? \"horizontal\" : \"vertical\";\n}\n","import React, { CSSProperties } from \"react\";\nimport \"./App.css\";\nimport Sticky from \"./widgets/Sticky\";\nimport Arrow from \"./widgets/Arrow\";\nimport Checkbox from \"./settings/Checkbox\";\nimport {\n  stickyFactory,\n  Widget,\n  StickyWidget,\n  ArrowWidget,\n  arrowFactory,\n  Point,\n  Position,\n  toOrientation,\n  ChartBranch,\n  PointType,\n} from \"./types\";\n\nexport const SNAPPING_DISTANCE = 10;\nexport const TOLERANCE = 10;\nexport const ARROW_MARGIN = 10;\nexport const TWO_SEGMENT_ARROW_MIN = 20;\nexport const STICKY_HEIGHT = 100;\n\nconst arrowIsHorizontal = (arrow: ArrowWidget) =>\n  arrow.points[0].type === 'left' || arrow.points[0].type === 'right';\n\nexport const settingsStyle: React.CSSProperties = {\n  position: \"absolute\",\n  top: 0,\n  width:\"auto\",\n  height: \"auto\",\n  borderStyle: \"solid\",\n  backgroundColor: \"lightgray\",\n  padding: 10,\n};\n\ndeclare const window: any;\n\ninterface State {\n  settings:{\n    stickToConvergentWidgetSide: boolean;\n    showLabels: boolean;\n  };\n  cursor: React.CSSProperties[\"cursor\"];\n  dragging: string[] | null;\n  initialId: string | null;\n  endId: string | null;\n  selected: string[] | null;\n  widgets: Record<string, Widget>;\n  newSegment: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  ref: HTMLDivElement | null = null;\n\n  state: State = {\n    settings :{\n      stickToConvergentWidgetSide: false,\n      showLabels: false,\n    },\n    cursor: \"auto\",\n    dragging: null,\n    initialId: null,\n    endId: null,\n    selected: null,\n    widgets: {},\n    newSegment: false,\n  };\n  mousePosition: Position | null = null;\n  mouseOverSticky: boolean = false;\n\n  cancelArrowCreation() {\n    this.setState((prevState) => {\n      if(prevState.dragging && prevState.dragging.length) {\n        // delete dragging arrow if any\n        const draggingWidget = { ...prevState.widgets[prevState.dragging[0]] };\n        if(draggingWidget.type === \"arrow\") {\n          const prevWidgets = prevState.widgets;\n          delete prevWidgets[draggingWidget.id];\n          return {\n            ...prevState,\n            dragging: null,\n            initialId: null,\n            endId: null,\n            cursor: \"auto\",\n            widgets: { ...prevWidgets },\n          }\n        }\n      }\n\n      return {\n        ...prevState,\n        dragging: null,\n        initialId: null,\n        endId: null,\n        cursor: \"auto\",\n      }\n    });\n  }\n\n  handleArrowPointDragStart = (id: string, e: React.MouseEvent, isStart: boolean) => {\n    if (isStart) {\n      const end = (this.state.widgets[id] as ArrowWidget).end;\n      this.setState((prevState) => (\n        {\n          ...prevState,\n          cursor: 'crosshair',\n          dragging: [id],\n          endId: end,\n          initialId: null,\n          widgets: {\n            ...prevState.widgets,\n            [id]: {\n              ...prevState.widgets[id],\n              start: null,\n              startPoint: null,\n              initialIsHorizontal: arrowIsHorizontal(prevState.widgets[id] as ArrowWidget),\n            }\n          }\n        }\n      ));\n    } else {\n      const initial = (this.state.widgets[id] as ArrowWidget).start;\n      this.setState((prevState) => (\n        {\n          ...prevState,\n          cursor: 'crosshair',\n          dragging: [id],\n          initialId: initial,\n          endId: null,\n          widgets: {\n            ...prevState.widgets,\n            [id]: {\n              ...prevState.widgets[id],\n              end: null,\n              endPoint: null,\n              initialIsHorizontal: arrowIsHorizontal(prevState.widgets[id] as ArrowWidget),\n            }\n          }\n        }\n      ));\n    }\n  }\n\n  handleStickyMouseDown = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    if (this.state.cursor !== \"crosshair\")\n      return;\n    // start arrow creation\n    if (!this.state.dragging) {\n      // create Arrow for dragging without end widget\n      this.setState((prevState) => {\n        const arrow = {\n          ...arrowFactory({ start: id, end: null }),\n        };\n\n        return {\n          ...prevState,\n          initialId: id,\n          endId: null,\n          widgets: {\n            ...prevState.widgets,\n            [arrow.id]: arrow,\n          },\n          dragging: [arrow.id],\n        };\n      });\n\n      return;\n    }\n  }\n\n  handleStickyMouseUp = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation(); // avoid executing `handleMouseUp`\n    if (this.state.initialId === id || this.state.endId === id) {\n      this.cancelArrowCreation();\n      return;\n    }\n\n    if (this.state.cursor !== \"crosshair\")\n      return;\n    \n    this.setState((prevState) => {\n      if (!prevState.dragging)\n        return { ...prevState };\n      \n      const draggingArrow = { ...prevState.widgets[prevState.dragging[0]] } as ArrowWidget;\n      const startWidget = prevState.widgets[draggingArrow.start ?? id];\n      const endWidget = prevState.widgets[draggingArrow.end ?? id];\n      \n      // update Arrow start/end and connect it to both widgets\n      draggingArrow.start = startWidget.id;\n      draggingArrow.end = endWidget.id;\n      draggingArrow.initialIsHorizontal = arrowIsHorizontal(draggingArrow);\n      // update chart branches state (for both start and end arrows)\n      this.setArrowChartBranch(draggingArrow as ArrowWidget, this.state.widgets, false);\n\n      return {\n        ...prevState,\n        cursor: \"auto\",\n        dragging: null,\n        initialId: null,\n        endId: null,\n        widgets: {\n          ...prevState.widgets,\n          [draggingArrow.id]: draggingArrow,\n        },\n      };\n    });\n  };\n\n  handleDoubleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    // create rectangular stickies while holding CTRL down\n    const stickyWidth = (e.ctrlKey || e.metaKey) ? 150 : 100;\n    const s = stickyFactory({ x: e.clientX - (stickyWidth / 2), y: e.clientY - 50, width: stickyWidth });\n    this.setState((prevState) => ({\n      selected: [s.id],\n      widgets: {\n        ...prevState.widgets,\n        [s.id]: s,\n      },\n    }));\n  };\n\n  handleDrag = (e: React.MouseEvent<HTMLDivElement>) => {\n    const deltaX = this.mousePosition ? e.clientX - this.mousePosition.x : e.clientX;\n    const deltaY = this.mousePosition ? e.clientY - this.mousePosition.y : e.clientY;\n    this.mousePosition = {x: e.clientX, y: e.clientY };\n    const { dragging, widgets } = this.state;\n\n    if (!dragging)\n      return;\n    const draggingWidgets = dragging.map(id => widgets[id]);\n    if(draggingWidgets.length > 1 || draggingWidgets[0].type === \"sticky\") {\n      const arrows = Object.values(widgets).filter(w => w.type === \"arrow\") as ArrowWidget[];\n      // update connected arrows\n      const connectedArrows = Object.values(widgets)\n      .filter(\n        (w) =>\n          w.type === \"arrow\" &&\n          dragging &&\n          ((w.start && dragging.includes(w.start)) ||\n          (w.end && dragging.includes(w.end))))\n      .reduce((acc, cur) => {\n        const arrow = cur as ArrowWidget;\n        this.updateArrow(arrow);\n        if (dragging &&\n          ((arrow.start && dragging.includes(arrow.start)) &&\n          (arrow.end && dragging.includes(arrow.end))) &&\n          arrow.chartBranch) {\n            if (arrow.chartBranch.type === 'oneToOne') {\n              arrow.chartBranch.position = arrow.chartBranch.position + (arrowIsHorizontal(arrow) ? deltaX : deltaY);\n            } else {\n              arrows.forEach(a => {\n                if (a.chartBranch && a.chartBranch?.position === arrow.chartBranch?.position) {\n                  if ((a.end && !dragging.includes(a.end)) || (a.start && !dragging.includes(a.start))) {\n                    return;\n                  } else {\n                    arrow.chartBranch.position = arrow.chartBranch.position + (arrowIsHorizontal(arrow) ? deltaX : deltaY);\n                  }\n                }\n              })\n            }\n          }\n        \n        return {\n          ...acc,\n          [arrow.id]: {\n            ...arrow,\n          },\n        };\n      }, {} as Record<string, Widget>);\n  \n      const movedWidgets: Record<string, Widget> = draggingWidgets.reduce((acc, cur) => {\n        return {\n          ...acc,\n          [cur.id]: {\n            ...cur,\n            x: cur.x + deltaX,\n            y: cur.y + deltaY,\n          }\n        };\n      }, {});\n      this.setState({\n        widgets: {\n          ...widgets,\n          ...movedWidgets,\n          ...connectedArrows,\n        }\n      });\n    } else if (draggingWidgets[0].type === \"arrow\" && !this.mouseOverSticky) {\n      const draggingArrow = { ...draggingWidgets[0] };\n      // update arrow dragged end\n      if (!draggingArrow.end || !draggingArrow.start)\n        this.updateArrow(draggingArrow, this.mousePosition);\n      \n      this.setState({\n        widgets: {\n          ...widgets,\n          [draggingArrow.id]: draggingArrow,\n        },\n      });\n    }\n  };\n\n  handleMouseHoverSticky = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    this.mouseOverSticky = true;\n    const target = (e.target as Element).id || null;\n    const { dragging, widgets } = this.state;\n    if (!dragging) return;\n    // stick to widget when hovering while dragging\n    const draggingWidgets = dragging.map(id => widgets[id]);\n    if(draggingWidgets.length === 1 &&\n      draggingWidgets[0].type === \"arrow\") {\n        const draggingArrow = { ...draggingWidgets[0] };\n        // update Arrow start/end and connect it to both widgets\n        const isStart = !!this.state.endId;\n        const targetChanged = isStart\n          ? draggingArrow.startPoint !== target && draggingArrow.start === id\n          : draggingArrow.endPoint !== target && draggingArrow.end === id;\n        if ((draggingArrow.start !== id &&\n          draggingArrow.end !== id) || targetChanged)\n          {\n            // connect to widget and update arrow\n            draggingArrow.start = draggingArrow.start ?? id;\n            draggingArrow.end = draggingArrow.end ?? id;\n            if (isStart) {\n              draggingArrow.startPoint = target !== \"auto\" ? target as PointType : null;\n              draggingArrow.arrowType = 'initial';\n              draggingArrow.chartBranch = null;\n            } else {\n              draggingArrow.endPoint = target !== \"auto\" ? target as PointType : null;\n              draggingArrow.arrowType = 'initial';\n              draggingArrow.chartBranch = null;\n            }\n            this.updateArrow(draggingArrow);\n            const newWidgets = { ...widgets, [draggingArrow.id]: draggingArrow };\n            this.setState({\n              widgets: newWidgets,\n            });\n          }\n    };\n  }\n\n  opositePoint = (point: PointType) => {\n    switch (point) {\n      case 'top': return 'bottom';\n      case 'bottom': return 'top';\n      case 'right': return 'left';\n      case 'left': return 'right';\n    }\n  }\n\n  handleMouseLeaveSticky = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    this.mouseOverSticky = false;\n    const { dragging, widgets } = this.state;\n    if (!dragging) return;\n    const draggingWidgets = dragging.map(id => widgets[id]);\n    if (draggingWidgets.length === 1 &&\n      draggingWidgets[0].type === \"arrow\" &&\n      draggingWidgets[0].start && draggingWidgets[0].end &&\n      (draggingWidgets[0].start === id ||\n      draggingWidgets[0].end === id)) {\n      // disconnect from widget and update arrow\n      const draggingArrow = { ...draggingWidgets[0] };\n      draggingArrow.startPoint = draggingArrow.start === id ? null : draggingArrow.startPoint;\n      draggingArrow.endPoint = draggingArrow.end === id ? null : draggingArrow.endPoint;\n      draggingArrow.start = draggingArrow.start === id ? null : draggingArrow.start;\n      draggingArrow.end = draggingArrow.end === id ? null : draggingArrow.end;\n      \n      this.setState({\n        widgets: {\n          ...widgets,\n          [draggingArrow.id]: draggingArrow,\n        },\n      });\n    }\n    if (draggingWidgets.length === 1 && draggingWidgets[0].type === \"arrow\" && ((draggingWidgets[0].start === id && !draggingWidgets[0].end) || (draggingWidgets[0].end === id && !draggingWidgets[0].start))) {\n      const draggingArrow = { ...draggingWidgets[0] };\n      const widget = this.state.widgets[id];\n      const x = e.clientX;\n      const y = e.clientY;\n      const isHorizontalStart = y > widget.y && y < widget.y + widget.height;\n      const startPoint = isHorizontalStart\n        ? x <= widget.x\n          ? 'left'\n          : 'right'\n        : y <= widget.y\n          ? 'top'\n          : 'bottom';\n      const endPoint = this.opositePoint(startPoint);\n\n      // set initial points\n      this.setState({\n        widgets: {\n          ...widgets,\n          [draggingArrow.id]: {\n            ...draggingArrow,\n            points: [{ x, y, type: startPoint }, { x, y, type: endPoint }],\n            initialIsHorizontal: isHorizontalStart,\n          },\n        },\n      });\n    }\n  }\n\n  handleWidgetDragStart = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    const { shiftKey } = e;\n    e.stopPropagation();\n\n    if (e.button !== 0)\n      return;\n\n    if(this.state.dragging)\n      return;\n\n    const selected = (this.state.selected && (this.state.selected.includes(id) || shiftKey))\n    ? !this.state.selected.includes(id)\n      ? [...this.state.selected, id]\n      : this.state.selected\n    : [id];\n    const dragging = (this.state.selected && this.state.selected.includes(id)) ? this.state.selected : [id];\n\n    this.setState({\n      dragging,\n      selected,\n    });\n  };\n\n  handleKeyDown = (e: React.KeyboardEvent) => {\n    if((e.key === \"c\" || e.key === \"C\") && !window.editingLabel) {\n      const newCursor = this.state.cursor === \"auto\" ? \"crosshair\" : \"auto\";\n      if(newCursor === \"auto\") {\n        this.cancelArrowCreation();\n      } else {\n        this.setState({\n          cursor: newCursor,\n        });\n      }\n    }\n\n    if ((e.key === \"Backspace\" || e.key === \"Delete\") && !!this.state.selected) {\n      this.setState((prevState) => {\n        const selectedWidgetsId = prevState.selected || null;\n        const prevWidgets = prevState.widgets;\n        selectedWidgetsId?.forEach(id => {\n          Object.values(prevWidgets).forEach((w) => {\n            if (w.type === \"arrow\" && (w.start === id || w.end === id))\n              delete prevWidgets[w.id];\n          });\n          delete prevWidgets[id]\n        });\n\n        return {\n          ...prevState,\n          selected: null,\n          widgets: { ...prevWidgets },\n        };\n      });\n    }\n  };\n\n  handleMouseDown = () => {\n    this.setState({ selected: null });\n  };\n\n  // true when creating an arrow, or when dragging arrow point\n  isDraggingArrow = () => {\n    const draggingWidgets = this.state.dragging && this.state.dragging.map(id => this.state.widgets[id]);\n    return draggingWidgets && draggingWidgets.length === 1 && draggingWidgets[0].type === \"arrow\";\n  }\n\n  getConnectedStickyPos = (point: Point, stickyWidth: number) => {\n    let coords = { x: 0, y: 0 };\n    switch(point.type) {\n      case \"top\":\n        coords.x = point.x - stickyWidth / 2;\n        coords.y = point.y;\n        break;\n      case \"right\":\n        coords.x = point.x - stickyWidth;\n        coords.y = point.y - STICKY_HEIGHT / 2;\n        break;\n      case \"bottom\":\n        coords.x = point.x - stickyWidth / 2;\n        coords.y = point.y - STICKY_HEIGHT;\n        break;\n      case \"left\":\n        coords.x = point.x;\n        coords.y = point.y - stickyWidth / 2;\n        break;\n    }\n\n    return coords;\n  }\n\n  handleMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n    if(this.isDraggingArrow()) {\n      if (this.state.initialId || this.state.endId) {\n        if (this.state.endId) {\n          this.cancelArrowCreation();\n          return;\n        }\n        // sticky auto-creation after dropping an arrow in the canvas\n        const stickyWidth = (e.ctrlKey || e.metaKey) ? 150 : 100;\n        const draggingWidgets = this.state.dragging && this.state.dragging.map(id => this.state.widgets[id]);\n        const draggingArrow = draggingWidgets && { ...draggingWidgets[0] as ArrowWidget };\n        const draggingPoint = draggingArrow && draggingArrow.points[draggingArrow.points.length - 1];\n        if (!draggingPoint || !draggingArrow) return;\n        const pos = this.getConnectedStickyPos(draggingPoint, stickyWidth);\n        const s = stickyFactory({ ...pos, width: stickyWidth });\n        draggingArrow.end = s.id;\n        draggingArrow.initialIsHorizontal = arrowIsHorizontal(draggingArrow);\n        // update chart branches state (for both start and end arrows)\n        this.setArrowChartBranch(draggingArrow as ArrowWidget, this.state.widgets, false);\n        if (draggingArrow) {\n          this.setState({\n            selected: [s.id],\n            dragging: null,\n            initialId: null,\n            endId: null,\n            cursor: \"auto\",\n            widgets: {\n              ...this.state.widgets,\n              [s.id]: s,\n              [draggingArrow.id]: {\n                ...draggingArrow,\n              }\n            },\n          });\n        }\n      }\n      return;\n    }\n    this.setState((prevState) => {\n      \n      if (!prevState.dragging)\n        return { ...prevState };\n      \n      const connectedArrows = Object.values(prevState.widgets)\n      .filter(\n        (w) =>\n          w.type === \"arrow\" &&\n          (((w.start && prevState.dragging?.includes(w.start)) || (w.end && prevState.dragging?.includes(w.end))))\n      ).map(w=> w as ArrowWidget)\n      .reduce((acc, arrow) => {\n\n        // stick to your branch side\n        if(!prevState.settings.stickToConvergentWidgetSide || arrow.arrowType !== \"chartBranch\") {\n          if(this.isChartSideArrow(arrow, prevState.widgets)) {\n            const startWidget = prevState.widgets[arrow.start || \"\"] as StickyWidget;\n            const endWidget = prevState.widgets[arrow.end || \"\"] as StickyWidget;\n            if(this.updateArrowChartSide(arrow, startWidget, endWidget)) {\n              arrow.arrowType = \"chartSide\";\n            }\n          }\n          \n          // update chart branches state (for both start and end arrows)\n          this.setArrowChartBranch(arrow, prevState.widgets, false);\n        }\n          \n        // update initial axis\n        arrow.initialIsHorizontal = arrowIsHorizontal(arrow);\n\n        return {\n          ...acc,\n          [arrow.id]: {\n            ...arrow,\n          },\n        };\n      }, {} as Record<string, Widget>);\n      \n      return {\n        dragging: null,\n        widgets: {\n          ...prevState.widgets,\n          ...connectedArrows,\n        },\n      };\n    });\n  };\n\n  handleRef = (ref: HTMLDivElement) => {\n    this.ref = ref;\n    // start focused to listen for key presses\n    if(this.ref) {\n      this.ref.focus();\n    }\n  }\n\n  getStartPointType = (points: Point[]) => {\n    if (points.length < 2) return undefined;\n    const first = points[0];\n    const second = points[1];\n    if (first.x < second.x) return 'right';\n    if (first.x > second.x) return 'left';\n    if (first.y < second.y) return 'bottom';\n    return 'top';\n  }\n\n  getEndPointType = (points: Point[]) => {\n    const reverse = [...points].reverse();\n    return this.getStartPointType(reverse);\n  }\n\n  handleDragSementStart = (arrowId: string, index: number, pos: Position) => {\n    const arrow = this.state.widgets[arrowId] as ArrowWidget;\n    const horizontalDrag = arrowIsHorizontal(arrow)\n      ? index % 2 !== 0\n      : index % 2 === 0;\n    const isFirst = index === 0;\n    const isLast = index === arrow.points.length - 2;\n    // if it's the first or last segment, create a new node\n    if (index === 0 || index === arrow.points.length - 2) {\n\n      if (isFirst && isLast) {\n        const first = arrow.points[0];\n        const last = arrow.points[1];\n        if (horizontalDrag) {\n          const second = { x: pos.x, y: first.y };\n          const third = { x: pos.x, y: last.y };\n          arrow.points = [{ ...first, type: 'right' }, second, third, { ...last, type: 'right' }];\n          // arrow.startPoint = 'right';\n          // arrow.endPoint = 'right';\n        } else {\n          const second = { x: first.x, y: pos.y };\n          const third = { x: last.x, y: pos.y };\n          arrow.points = [{ ...first, type: 'top' }, second, third, { ...last, type: 'top' }];\n          // arrow.startPoint = 'top';\n          // arrow.endPoint = 'top';\n        }\n      } else if (isFirst) {\n        const unalteredEndPoints = arrow.points.slice(2);\n        const first = arrow.points[0];\n        if (horizontalDrag) {\n          const second = { x: pos.x, y: first.y };\n          const third = { x: pos.x, y: arrow.points[1].y };\n          arrow.points = [{ ...first, type: 'right' }, second, third, ...unalteredEndPoints];\n          // arrow.startPoint = 'right';\n        } else {\n          const second = { x: first.x, y: pos.y };\n          const third = { x: arrow.points[1].x, y: pos.y };\n          arrow.points = [{ ...first, type: 'top' }, second, third, ...unalteredEndPoints];\n          // arrow.startPoint = 'top';\n        }\n      } else if (isLast) {\n        const unalteredPoints = arrow.points.slice(0, arrow.points.length - 2);\n        const last = arrow.points[arrow.points.length - 1];\n        if (last.type === 'right' || last.type === 'left') {\n          const second = { x: last.x, y: pos.y };\n          const third = { x: arrow.points[arrow.points.length - 2].x, y: pos.y };\n          arrow.points = [...unalteredPoints, third, second, { ...last, type: 'top' }];\n          // arrow.endPoint = 'top';\n        } else {\n          const second = { x: pos.x, y: last.y };\n          const third = { x: pos.x, y: arrow.points[arrow.points.length - 2].y };\n          arrow.points = [...unalteredPoints, third, second, { ...last, type: 'right' }];\n          // arrow.endPoint = 'right';\n        }\n      }\n      this.setState({ widgets: { ...this.state.widgets, [arrowId]: arrow}, newSegment: isFirst || isLast });\n    }\n  }\n\n  handleDragSegment = (arrowId: string, index: number, pos: Position) => {\n    const arrow = this.state.widgets[arrowId] as ArrowWidget;\n    const horizontalDrag = arrowIsHorizontal(arrow)\n      ? index % 2 !== 0\n      : index % 2 === 0;\n    // if it's the first or last segment, create a new node\n    if (index === 0 || index === arrow.points.length - 1) {\n      return;\n    } else {\n      if (horizontalDrag) {\n        arrow.points[index].x = pos.x;\n        arrow.points[index + 1].x = pos.x;\n      } else {\n        arrow.points[index].y = pos.y;\n        arrow.points[index + 1].y = pos.y;\n      }\n    }\n    this.setState({ widgets: { ...this.state.widgets, [arrowId]: arrow} });\n  }\n\n  handleDragSegmentEnd = (arrowId: string, index: number, position?: number) => {\n    const arrow = this.state.widgets[arrowId] as ArrowWidget;\n    const { points } = arrow;\n    const horizontalDrag = arrowIsHorizontal(arrow)\n      ? index % 2 !== 0\n      : index % 2 === 0;\n    // merge segments if they are in the same axis\n    if (horizontalDrag) {\n      if (arrow.points[index].x === arrow.points[index - 1].x) {\n        arrow.points.splice(index, 2);\n      } else if (arrow.points[index + 1].x === arrow.points[index + 2].x) {\n        arrow.points.splice(index + 1, 2);\n      }\n    } else {\n      if (arrow.points[index].y === arrow.points[index - 1].y) {\n        arrow.points.splice(index, 2);\n      } else if (arrow.points[index + 1].y === arrow.points[index + 2].y) {\n        arrow.points.splice(index + 1, 2);\n      }\n    }\n    const startType = this.getStartPointType(points);\n    const endType = this.getEndPointType(points);\n    arrow.points[0].type = startType;\n    arrow.points[points.length - 1].type = endType;\n    if (index === 1) this.setArrowChartBranch(arrow, this.state.widgets, false, position);\n    if (this.state.newSegment) {\n      arrow.startPoint = startType;\n      arrow.endPoint = endType;\n      this.updateArrow(arrow);\n    }\n    this.setState({ widgets: { ...this.state.widgets, [arrowId]: arrow}, newSegment: false });\n  }\n\n  // finds if this arrow should be a part of a branchChart\n  setArrowChartBranch(arrow: ArrowWidget, widgets: Record<string, Widget>, dragging: boolean, position?: number) {\n    if(!this.state.settings.stickToConvergentWidgetSide && arrow.chartBranch) {\n      // don't recalculate if chartBranchSide and position didn't change\n      let convergencePoint = arrow.chartBranch.type === \"manyToOne\" ? arrow.points[arrow.points.length - 1] : arrow.points[0];\n      if(convergencePoint.type === arrow.chartBranch.convergenceSide && (!position || arrow.chartBranch.position === position)) {\n        console.log('not recalculating chart branch');\n        return;\n      }\n    }\n    \n    const chartBranchArrow = this.getSharedChartBranchArrow(arrow, widgets);\n    // don't force chartBranching while dragging on an empty side of the origin/end widget\n    // or if arrow has explicitly set start or end point\n    if((dragging && !chartBranchArrow) || arrow.points.length === 2) {\n      arrow.arrowType = 'initial';\n      arrow.chartBranch = null;\n      console.log('setting chart branch null');\n      return;\n    }\n\n    arrow.arrowType = \"chartBranch\";\n    \n    if(chartBranchArrow && chartBranchArrow.chartBranch && !position) {\n      console.log('become part of an existing chartBranch');\n      // become part of an existing chartBranch\n      if(chartBranchArrow.chartBranch.type === \"oneToOne\") {\n        // if we are just adding the 2nd arrow to this chartBranch, update type and convergenceSide beforehand\n        if(chartBranchArrow.start === arrow.start ){\n          chartBranchArrow.chartBranch.type = \"oneToMany\";\n          chartBranchArrow.chartBranch.convergenceSide = arrow.points[0].type;\n        } else {\n          chartBranchArrow.chartBranch.type = \"manyToOne\";\n          chartBranchArrow.chartBranch.convergenceSide = arrow.points[arrow.points.length - 1].type;\n        }\n      }\n      arrow.chartBranch = Object.assign({}, chartBranchArrow.chartBranch);\n    } else if ((!arrow.startPoint && !arrow.endPoint) || position) {\n      // new lonely charBranch arrow\n      console.log('new lonely charBranch arrow');\n      let chartBranch: ChartBranch = {\n        position: position || 0,\n        convergenceSide: arrow.points[0].type,\n        type: \"oneToOne\"\n      };\n      // on new branch, set 2nd segment position to half the distance in X or Y depending on orientation\n      // unless explicit position is passed as parameter\n      if (!position) {\n        console.log('convergenceSide: ', chartBranch.convergenceSide);\n        if(toOrientation(chartBranch.convergenceSide || 'right') === \"horizontal\") {\n          chartBranch.position = arrow.points[0].x + ((arrow.points[arrow.points.length - 1].x - arrow.points[0].x) / 2);\n        } else {\n          chartBranch.position = arrow.points[0].y + ((arrow.points[arrow.points.length - 1].y - arrow.points[0].y) / 2);\n        }\n      }\n      arrow.chartBranch = chartBranch;\n    }\n  }\n\n  // find another arrow that share same origin or end point and already has chartBranch defined\n  getSharedChartBranchArrow(arrow: ArrowWidget, widgets: Record<string, Widget>) {\n    const chartBranchArrows = Object.values(widgets)\n    .filter(\n      (w) =>\n      w.type === \"arrow\" &&\n      w.id !== arrow.id &&\n      w.arrowType === \"chartBranch\" &&\n      w.chartBranch &&\n      ((w.start === arrow.start && w.points[0].type === arrow.points[0].type) ||\n       (w.end === arrow.end && w.points[w.points.length - 1].type === arrow.points[arrow.points.length - 1].type))\n    ).map(w => w as ArrowWidget);\n    \n    return chartBranchArrows.length > 0 ? chartBranchArrows[0] : null;\n  }\n\n  // updates arrow points (start/end) in both position and type\n  // draggingPosition is undefined when the arrow is connected to a start and\n  // end widget\n  // if it's not undefined, it means it's a disconnected arrow\n  updateArrow(arrow: ArrowWidget, draggingPosition?: Position) {\n    const { widgets } = this.state;\n    const startWidget = widgets[arrow.start || \"\"];\n    const endWidget = widgets[arrow.end || \"\"];\n    const isDisconnectedArrow = !!draggingPosition;\n\n    const connectedWidget = startWidget ? startWidget : endWidget;\n    if (!connectedWidget) return;\n\n    const points = [...arrow.points];\n\n    // stick to your branch side\n    if(!this.state.settings.stickToConvergentWidgetSide || arrow.arrowType !== \"chartBranch\") {\n      // change connections depending on positioning\n      const draggingX = draggingPosition ? draggingPosition.x : endWidget.x;\n      const draggingY = draggingPosition ? draggingPosition.y : endWidget.y;\n      const draggingWidth = draggingPosition ? 0 : endWidget.width;\n      const draggingHeight = draggingPosition ? 0 : endWidget.height;\n      if (points.length < 5) {\n        if (arrow.initialIsHorizontal) {\n          if (connectedWidget.x + connectedWidget.width + TOLERANCE < draggingX) {\n            points[0].type = startWidget ? \"right\" : \"left\";\n            points[points.length - 1].type = startWidget ? \"left\" : \"right\";\n          } else if (draggingX + draggingWidth + TOLERANCE < connectedWidget.x) {\n            points[0].type = startWidget ? \"left\" : \"right\";\n            points[points.length - 1].type = startWidget ? \"right\" : \"left\";\n          } else if (draggingY > connectedWidget.y + connectedWidget.height) {\n            points[0].type = startWidget ? \"bottom\" : \"top\";\n            points[points.length - 1].type = startWidget ? \"top\" : \"bottom\";\n          } else {\n            points[0].type = startWidget ? \"top\" : \"bottom\";\n            points[points.length - 1].type = startWidget ? \"bottom\" : \"top\";\n          }\n        } else {\n          if (connectedWidget.y + connectedWidget.height + TOLERANCE < draggingY) {\n            points[0].type = startWidget ? \"bottom\" : \"top\";\n            points[points.length - 1].type = startWidget ? \"top\" : \"bottom\";\n          } else if (draggingY + draggingHeight + TOLERANCE < connectedWidget.y) {\n            points[0].type = startWidget ? \"top\" : \"bottom\";\n            points[points.length - 1].type = startWidget ? \"bottom\" : \"top\";\n          } else if (draggingX > connectedWidget.x + connectedWidget.width) {\n            points[0].type = startWidget ? \"right\" : \"left\";\n            points[points.length - 1].type = startWidget ? \"left\" : \"right\";\n          } else {\n            points[0].type = startWidget ? \"left\" : \"right\";\n            points[points.length - 1].type = startWidget ? \"right\" : \"left\";\n          }\n        }\n        // it the connector starts / ends where it should automatically,\n        // don't force startPoint / endPoint any more\n        if (arrow.startPoint) {\n          if (arrow.startPoint === points[0].type) {\n            arrow.startPoint = null;\n          } else {\n            points[0].type = arrow.startPoint;\n          }\n        }\n        if (arrow.endPoint) {\n          if (arrow.endPoint === points[points.length - 1].type) {\n            arrow.endPoint = null;\n          } else {\n            points[points.length - 1].type = arrow.endPoint;\n          }\n        }\n      }\n\n\n      points[0] = startWidget ? this.getWidgetSideMidPosition(points[0], startWidget) : {...points[0], x: (draggingPosition as Position).x, y: (draggingPosition as Position).y};\n      points[points.length - 1] = endWidget ? this.getWidgetSideMidPosition(points[points.length - 1], endWidget) : {...points[points.length - 1], x: (draggingPosition as Position).x, y: (draggingPosition as Position).y};\n      arrow.points = points;\n      \n      // check if being a chartSide arrow\n      if(this.isChartSideArrow(arrow, widgets) && points.length < 5) {\n        console.log('IS CHART SIDE ARROW');\n        if (isDisconnectedArrow) {\n          this.updateArrowChartSide(arrow, connectedWidget, endWidget, draggingPosition, !!endWidget);\n        } else {\n          this.updateArrowChartSide(arrow, startWidget, endWidget);\n        }\n      }\n\n      // snap the two points while creating an arrow\n      if (isDisconnectedArrow && arrow.points.length < 5) {\n        const points = arrow.points;\n        if (points[0].type === 'left' || points[0].type === 'right') {\n          if (points[points.length - 1].y <= points[0].y + SNAPPING_DISTANCE && points[points.length - 1].y >= points[0].y - SNAPPING_DISTANCE) {\n            points[points.length - 1].y = points[0].y;\n          }\n        } else if (points[0].type === 'top' || points[0].type === 'bottom') {\n          if (points[points.length - 1].x <= points[0].x + SNAPPING_DISTANCE && points[points.length - 1].x >= points[0].x - SNAPPING_DISTANCE) {\n            points[points.length - 1].x = points[0].x;\n          }\n        }\n      }\n      \n      // check if being part of a chartBranch\n      this.setArrowChartBranch(arrow, widgets, true);\n    }\n    \n    // update chartBranch arrows\n    // this is mainly used for a branched arrow whose widget is \"behind\" the branch fixed position \n    if(arrow.chartBranch && startWidget && endWidget && points.length < 5) {\n      // on \"oneOnOne\" we consider the start widget as the convergent one\n      const convergesOnEnd = arrow.chartBranch.type === \"manyToOne\"; \n      let convergencePoint = convergesOnEnd ? arrow.points[arrow.points.length - 1] : arrow.points[0];\n      let nonConvergencePoint = convergesOnEnd ? arrow.points[0] : arrow.points[arrow.points.length - 1];\n      const convergentWidget = convergesOnEnd ? endWidget : startWidget;\n      const nonConvergentWidget = convergesOnEnd ? startWidget : endWidget;\n      \n      convergencePoint = this.getWidgetSideMidPosition(convergencePoint, convergentWidget);\n      nonConvergencePoint = this.getWidgetSideMidPosition(nonConvergencePoint, nonConvergentWidget);\n    \n      if(toOrientation(arrow.chartBranch.convergenceSide || 'right') === \"horizontal\") {\n        // if inside, use 2-segment arrow\n        if(arrow.chartBranch.position >= nonConvergentWidget.x && arrow.chartBranch.position <= nonConvergentWidget.x + nonConvergentWidget.width) {\n          nonConvergencePoint.x = arrow.chartBranch.position;\n          nonConvergencePoint.y = (nonConvergentWidget.y + nonConvergentWidget.height/2) > convergencePoint.y ? nonConvergentWidget.y : nonConvergentWidget.y + nonConvergentWidget.height;\n        // otherwise use regular 3-segment arrow but make sure it connects to the correct side\n        } else {\n          nonConvergencePoint.type = arrow.chartBranch.position < nonConvergentWidget.x ? \"left\" : \"right\";\n          nonConvergencePoint = this.getWidgetSideMidPosition(nonConvergencePoint, nonConvergentWidget);\n        }\n      } else {  // vertical\n        // if inside, use 2-segment arrow\n        if(arrow.chartBranch.position >= nonConvergentWidget.y && arrow.chartBranch.position <= nonConvergentWidget.y + nonConvergentWidget.height) {\n          nonConvergencePoint.x = (nonConvergentWidget.x + nonConvergentWidget.width/2) > convergencePoint.x ? nonConvergentWidget.x : nonConvergentWidget.x + nonConvergentWidget.width;\n          nonConvergencePoint.y = arrow.chartBranch.position;\n        // otherwise use regular 3-segment arrow but make sure it connects to the correct side\n        } else {\n          nonConvergencePoint.type = arrow.chartBranch.position < nonConvergentWidget.y ? \"top\" : \"bottom\";\n          nonConvergencePoint = this.getWidgetSideMidPosition(nonConvergencePoint, nonConvergentWidget);\n        }\n      }\n\n      arrow.points[0] = convergesOnEnd ? nonConvergencePoint : convergencePoint;\n      arrow.points[arrow.points.length - 1] = convergesOnEnd ? convergencePoint : nonConvergencePoint;\n    }\n    this.setIntermidiatePoints(arrow);\n  }\n\n  setIntermidiatePoints = (arrow: ArrowWidget) => {\n    const { points } = arrow;\n    const start = points[0];\n    const end = points[points.length - 1];\n    const isHorizontalStart = start.type === \"right\" || start.type === \"left\";\n    const isHorizontalEnd = end.type === \"right\" || end.type === \"left\";\n    const midDistance = isHorizontalStart ? (end.x - start.x) / 2 : (end.y - start.y) / 2;\n    // 1-segment straight line\n    if((isHorizontalStart && start.y === end.y) || (!isHorizontalStart && start.x === end.x)) {\n      if (points.length < 5) {\n        arrow.points = [start, end];\n        arrow.arrowType = 'initial';\n        arrow.chartBranch = null;\n        return;\n      }\n    }\n    let p2, p3, p4;\n    // 2-segments line\n    if (isHorizontalStart !== isHorizontalEnd && points.length < 5) {\n      const willCoverContent = isHorizontalStart\n        ? (end.type === \"bottom\" && end.y > start.y) || (end.type === \"top\" && end.y < start.y)\n        : (end.type === \"right\" && end.x > start.x) || (end.type === \"left\" && end.x < start.x);\n      if (!willCoverContent) {\n        const middlePoint = isHorizontalStart\n          ? { x: end.x, y: start.y }\n          : { x: start.x, y: end.y };\n        arrow.points = [start, middlePoint, end];\n        return;\n      } else { // 4-segments line\n        p2 = isHorizontalStart\n        ? { x: start.x + midDistance, y: start.y }\n        : { x: start.x, y: start.y + midDistance };\n      if (end.type === \"bottom\" || end.type === \"right\") {\n        p3 = isHorizontalStart\n          ? { x: start.x + midDistance, y: end.y + 20 }\n          : { x: end.x + 20, y: start.y + midDistance };\n        p4 = isHorizontalStart\n          ? { x: end.x, y: end.y + 20 }\n          : { x: end.x + 20, y: end.y };\n      } else {\n        p3 = isHorizontalStart\n          ? { x: start.x + midDistance, y: end.y - 20 }\n          : { x: end.x - 20, y: start.y + midDistance };\n        p4 = isHorizontalStart\n          ? { x: end.x, y: end.y - 20 }\n          : { x: end.x - 20, y: end.y };\n      }\n      arrow.points = [start, p2, p3, p4, end];\n      return;\n      }\n    }\n    // 4+ segments line\n    if (points.length >= 5) {\n      p2 = isHorizontalStart\n        ? { x: points[1].x, y: start.y }\n        : { x: start.x, y: points[1].y };\n      p4 = isHorizontalEnd\n        ? { x: points[points.length - 2].x, y: end.y }\n        : { x: end.x, y: points[points.length - 2].y };\n      const unalteredPoints = points.slice(2, points.length - 2);\n      arrow.points = [start, p2, ...unalteredPoints, p4, end];\n      return;\n    }\n    // const willCoverContent = isHorizontalStart\n    //   ? (end.type === \"right\" && end.x > start.x) || (end.type === \"left\" && end.x < start.x)\n    //   : (end.type === \"bottom\" && end.y > start.y) || (end.type === \"top\" && end.y < start.y);\n    //   // 3-segments line\n    //   if (willCoverContent && !arrow.chartBranch && points.length < 5) {\n    //     if (end.type === \"bottom\" || end.type === \"right\") {\n    //       p2 = isHorizontalStart\n    //         ? {x: end.x + 20, y: start.y}\n    //         : {x: start.x, y: end.y + 20};\n    //       p3 = isHorizontalStart\n    //         ? {x: end.x + 20, y: end.y}\n    //         : {x: end.x, y: end.y + 20};\n    //     } else {\n    //       p2 = isHorizontalStart\n    //         ? {x: end.x - 20, y: start.y}\n    //         :  {x: start.x, y: end.y - 20};\n    //       p3 = isHorizontalStart\n    //         ? {x: end.x - 20, y: end.y}\n    //         :  {x: end.x, y: end.y - 20};\n    //     }\n    //     arrow.points = [start, p2, p3, end];\n    //     return;\n    //   }\n\n    // 3 segments line\n    let segment2Position = isHorizontalStart\n      ? start.x + midDistance\n      : start.y + midDistance;\n\n    if(arrow.chartBranch) {\n      const convergenceTarget = arrow.chartBranch.type === \"manyToOne\" ? end : start;\n      if(arrow.chartBranch.convergenceSide === convergenceTarget.type) {\n        segment2Position = arrow.chartBranch.position;\n      }\n    }\n\n    p2 = isHorizontalStart\n      ? { x: segment2Position, y: start.y}\n      : { x: start.x, y: segment2Position};\n    p3 = isHorizontalStart\n      ? { x: segment2Position, y: end.y}\n      : { x: end.x, y: segment2Position};\n\n    arrow.points = [start, p2, p3, end];\n    return;\n  }\n  \n  isChartSideArrow(arrow: ArrowWidget, widgets: Record<string, Widget>) {\n    // can't be chartSide if there is any chartBranch on current side\n    if(this.getSharedChartBranchArrow(arrow, widgets)) return false;\n    // can't be chartSide if their point were intentionally positioned\n    if (arrow.startPoint || arrow.endPoint) return false;\n    console.log('initialIsHorizontal: ', arrow.initialIsHorizontal);\n    return ((arrow.initialIsHorizontal && (arrow.points[0].type === \"top\" || arrow.points[0].type === \"bottom\")) ||\n    (!arrow.initialIsHorizontal && (arrow.points[0].type === \"left\" || arrow.points[0].type === \"right\")));\n  }\n\n  // returns true if using intersection chartSide\n  updateArrowChartSide(arrow: ArrowWidget, startWidget: Widget, endWidget: Widget, draggingPosition?: Position, isStart?: boolean) {\n    if (arrow.points.length >= 5) return;\n    const draggingX = draggingPosition ? draggingPosition.x : endWidget.x;\n    const draggingY = draggingPosition ? draggingPosition.y : endWidget.y;\n    const draggingWidth = draggingPosition ? 0 : endWidget.width;\n    const draggingHeight = draggingPosition ? 0 : endWidget.height;\n    // if widgets limits are intersecting, use chartSide connector\n    if(arrow.initialIsHorizontal) {\n      console.log('CASE 1');\n      const middleX = this.getIntersectionMiddle(startWidget.x, startWidget.width, draggingX, draggingWidth);\n      if(middleX) {\n        arrow.points = [{ ...arrow.points[0], x: middleX }, {...arrow.points[arrow.points.length - 1], x: middleX }]\n        return true;\n      }\n    } else {\n      console.log('CASE 2');\n      const middleY = this.getIntersectionMiddle(startWidget.y, startWidget.height, draggingY, draggingHeight);\n      if(middleY) {\n        arrow.points = [{ ...arrow.points[0], y: middleY }, {...arrow.points[arrow.points.length - 1], y: middleY }]\n        return true;\n      }\n    }\n\n    // if there is no intersection, use original axis side\n    if (isStart && draggingPosition) {\n      if(arrow.initialIsHorizontal) {\n        arrow.points[arrow.points.length - 1].type = draggingX > startWidget.x + (startWidget.width / 2) ? \"right\" : \"left\";\n      } else {\n        arrow.points[arrow.points.length - 1].type = draggingY > startWidget.y + (startWidget.height / 2) ? \"bottom\" : \"top\";\n      }\n      arrow.points[arrow.points.length - 1] = this.getWidgetSideMidPosition(arrow.points[arrow.points.length - 1], startWidget);\n    } else {\n      if(arrow.initialIsHorizontal) {\n        arrow.points[0].type = draggingX > startWidget.x + (startWidget.width / 2) ? \"right\" : \"left\";\n      } else {\n        arrow.points[0].type = draggingY > startWidget.y + (startWidget.height / 2) ? \"bottom\" : \"top\";\n      }\n      arrow.points[0] = this.getWidgetSideMidPosition(arrow.points[0], startWidget);\n    }\n    \n    const startWidgetCenter = {x: startWidget.x + (startWidget.width/2), y: startWidget.y + (startWidget.height/2)};\n    const endWidgetCenter = {x: draggingX + (draggingWidth/2), y: draggingY + (draggingHeight/2)};\n    const distX = Math.abs(startWidgetCenter.x - endWidgetCenter.x) - (startWidget.width/2 + draggingWidth/2);\n    const distY = Math.abs(startWidgetCenter.y - endWidgetCenter.y) - (startWidget.height/2 + draggingHeight/2);\n    const widgetsTooClose = arrow.initialIsHorizontal ? distX <= ARROW_MARGIN : distY <= ARROW_MARGIN;\n    \n    // if widgets are too close, use 2-segments arrow\n    if(widgetsTooClose) {\n      // never closer than 20px from origin and never less than 10px from target side\n      if (isStart) {\n        if(arrow.initialIsHorizontal) {\n          arrow.points[0].type = draggingY > arrow.points[arrow.points.length - 1].y ? \"top\" : \"bottom\";\n          let distXToCenter = startWidget.width/2 + Math.max(distX + ARROW_MARGIN, TWO_SEGMENT_ARROW_MIN);\n          arrow.points[0].x = startWidgetCenter.x + (arrow.points[arrow.points.length - 1].type === \"right\" ? distXToCenter : -distXToCenter);\n          arrow.points[0].y = arrow.points[0].type === \"top\" ? draggingY : draggingY + draggingHeight;\n        } else {\n          arrow.points[0].type = draggingX > arrow.points[arrow.points.length - 1].x ? \"left\" : \"right\";\n          let distYToCenter = startWidget.height/2 + Math.max(distY + ARROW_MARGIN, TWO_SEGMENT_ARROW_MIN);\n          arrow.points[0].x = arrow.points[arrow.points.length - 1].type === \"left\" ? draggingX : draggingX + draggingWidth;\n          arrow.points[0].y = startWidgetCenter.y + (arrow.points[arrow.points.length - 1].type === \"bottom\" ? distYToCenter : -distYToCenter);\n        }\n      } else {\n        if(arrow.initialIsHorizontal) {\n          arrow.points[arrow.points.length - 1].type = draggingY > arrow.points[0].y ? \"top\" : \"bottom\";\n          let distXToCenter = startWidget.width/2 + Math.max(distX + ARROW_MARGIN, TWO_SEGMENT_ARROW_MIN);\n          arrow.points[arrow.points.length - 1].x = startWidgetCenter.x + (arrow.points[0].type === \"right\" ? distXToCenter : -distXToCenter);\n          arrow.points[arrow.points.length - 1].y = arrow.points[arrow.points.length - 1].type === \"top\" ? draggingY : draggingY + draggingHeight;\n        } else {\n          arrow.points[arrow.points.length - 1].type = draggingX > arrow.points[0].x ? \"left\" : \"right\";\n          let distYToCenter = startWidget.height/2 + Math.max(distY + ARROW_MARGIN, TWO_SEGMENT_ARROW_MIN);\n          arrow.points[arrow.points.length - 1].x = arrow.points[arrow.points.length - 1].type === \"left\" ? draggingX : draggingX + draggingWidth;\n          arrow.points[arrow.points.length - 1].y = startWidgetCenter.y + (arrow.points[0].type === \"bottom\" ? distYToCenter : -distYToCenter);\n        }\n      }\n    // otherwise use regular 3-segments arrow\n    } else {\n      if (isStart) {\n        if(arrow.initialIsHorizontal) {\n          arrow.points[0].type = arrow.points[arrow.points.length - 1].type === \"right\" ? \"left\" : \"right\";\n        } else {\n          arrow.points[0].type = arrow.points[arrow.points.length - 1].type === \"bottom\" ? \"top\" : \"bottom\";\n        }\n        arrow.points[0] = draggingPosition ? {...arrow.points[0], x: draggingPosition.x, y: draggingPosition.y} : this.getWidgetSideMidPosition(arrow.points[0], endWidget);\n      } else {\n        if(arrow.initialIsHorizontal) {\n            arrow.points[arrow.points.length - 1].type = arrow.points[0].type === \"right\" ? \"left\" : \"right\";\n        } else {\n          arrow.points[arrow.points.length - 1].type = arrow.points[0].type === \"bottom\" ? \"top\" : \"bottom\";\n        }\n        arrow.points[arrow.points.length - 1] = draggingPosition ? {...arrow.points[arrow.points.length - 1], x: draggingPosition.x, y: draggingPosition.y} : this.getWidgetSideMidPosition(arrow.points[arrow.points.length - 1], endWidget);\n      }\n    }\n\n    return false;\n  }\n\n  // returns the middle point of an intersection\n  getIntersectionMiddle(min1: number, size1: number, min2: number, size2: number) {\n    const max1 = min1 + size1;\n    const max2 = min2 + size2;\n    if (size2 === 0) return min2 >= min1 && min2 <= max1 ? min2 : null;\n\n    // TODO: none of this works when moving endWidget\n    // TODO: make sure this works with different shaped widgets\n    // if((this.between(min1, min2, max2) && this.between(max1, min2, max2)) ||\n    //    (this.between(min2, min1, max1) && this.between(max2, min1, max1))) {\n    if((min1 === min2 && max1 === max2) ||\n      (min1 > min2 && min1 < max2)) {\n      const intersection = max2 - min1;\n      if(intersection <= ARROW_MARGIN * 2) return null;\n      \n      return min1 + (intersection / 2);\n    } else if(max1 > min2 && max1 < max2) {\n      const intersection = max1 - min2;\n      if(intersection <= ARROW_MARGIN * 2) return null;\n\n      return max1 - (intersection / 2);\n    }\n\n    // no intersection\n    return null;\n  }\n\n  between(value: number, min: number, max: number) {\n    return value>min && value<max;\n  }\n  \n  getWidgetSideMidPosition(point: Point, widget: Widget) {\n    let newPoint: Point = {type: point.type, x: 0, y: 0};\n    switch(point.type) {\n      case \"top\":\n        newPoint.x = widget.x + widget.width / 2;\n        newPoint.y = widget.y;\n        break;\n      case \"right\":\n        newPoint.x = widget.x + widget.width;\n        newPoint.y = widget.y + widget.height / 2;\n        break;\n      case \"bottom\":\n        newPoint.x = widget.x + widget.width / 2;\n        newPoint.y = widget.y + widget.height;\n        break;\n      case \"left\":\n        newPoint.x = widget.x;\n        newPoint.y = widget.y + widget.height / 2;\n        break;\n    }\n\n    return newPoint;\n  }\n\n  render() {\n    const { cursor, selected, widgets } = this.state;\n    return (\n      <div>\n        <div\n          id=\"canvas\"\n          style={{ cursor }}\n          className={`App ${cursor === 'crosshair' ? 'connector-mode' : ''}`}\n          tabIndex={1}\n          onDoubleClick={this.handleDoubleClick}\n          onKeyDown={this.handleKeyDown}\n          onMouseMove={this.handleDrag}\n          onMouseDown={this.handleMouseDown}\n          onMouseUp={this.handleMouseUp}\n          ref={this.handleRef}\n          >\n          {Object.values(widgets).map((w) => {\n            if (w.type === \"sticky\") {\n              return (\n                <Sticky\n                  cursor={cursor}\n                  onMouseDown={this.handleStickyMouseDown}\n                  onMouseUp={this.handleStickyMouseUp}\n                  onDragStart={this.handleWidgetDragStart}\n                  onMouseHover={this.handleMouseHoverSticky}\n                  onMouseLeave={this.handleMouseLeaveSticky}\n                  selected={!!selected?.includes(w.id)}\n                  widget={w}\n                  key={w.id}\n                />\n                );\n            }\n            \n            if (w.type === \"arrow\") {\n              return <Arrow\n                widget={w}\n                key={w.id}\n                onDragPointStart={this.handleArrowPointDragStart}\n                onDragSegmentEnd={this.handleDragSegmentEnd}\n                onDragSegment={this.handleDragSegment}\n                onDragSegmentStart={this.handleDragSementStart}\n                showLabels={this.state.settings.showLabels}\n              />;\n            }\n            \n            return null;\n          })}\n        </div>\n        <div id=\"settings\" style={settingsStyle}>\n          <Checkbox\n            label=\"Stick To Convergent Widget Side\"\n            onCheckedChange={this.handleCheckStick} />\n          <hr />\n          <Checkbox\n            label=\"Show labels\"\n            onCheckedChange={this.handleCheckLabels} />\n        </div>\n      </div>\n    );\n  }\n\n  handleCheckStick = (checked: boolean) => {\n    const settings = { ...this.state.settings, stickToConvergentWidgetSide: checked };\n    this.setState({ settings });\n  }\n\n  handleCheckLabels = (checked: boolean) => {\n    const settings = { ...this.state.settings, showLabels: checked };\n    this.setState({ settings });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}