{"version":3,"sources":["widgets/Sticky.tsx","widgets/Arrow.tsx","settings/Checkbox.tsx","types.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Sticky","dragging","initialX","initialY","handleDragStart","e","props","onDragStart","widget","cursor","onMouseDown","id","handleMouseUp","onMouseUp","handleMouseHover","onMouseHover","handleMouseLeave","onMouseLeave","this","selected","x","y","width","height","onMouseMove","style","top","left","border","className","SNAPPING_POINT_WIDTH","cx","cy","r","stroke","fill","React","Component","Arrow","state","direction","pointerEventsEnabled","setDirection","getPoints","start","end","isHorizontalStart","type","setState","points","enablePointerEvents","console","log","disablePointerEvents","connectionDot","key","isStart","onDragPointStart","handleMouseMove","clientX","clientY","minY","Math","min","maxY","max","minX","maxX","pathGenerator","chartBranch","isHorizontalEnd","midDistance","d","strokeWidth","p3","p4","p1","p2","p5","d1","d2","d3","d4","segment2Position","convergenceTarget","convergenceSide","position","pointerEvents","diffStartX","diffEndX","undefined","diffStartY","diffEndY","path","xmlns","version","PureComponent","Checkbox","checked","handleOnChange","prevState","onCheckedChange","onChange","defaultChecked","label","stickyFactory","spec","uuid","arrowFactory","arrowType","initialIsHorizontal","toOrientation","settingsStyle","borderStyle","backgroundColor","padding","App","ref","settings","stickToConvergentWidgetSide","initialId","endId","widgets","mousePosition","mouseOverSticky","handleArrowPointDragStart","initial","handleStickyMouseDown","arrow","updateDisconnectedArrow","handleStickyMouseUp","draggingArrow","startWidget","endWidget","Object","values","find","w","isHorizontalConnection","abs","cancelArrowCreation","handleDoubleClick","stickyWidth","ctrlKey","s","handleDrag","deltaX","deltaY","draggingWidgets","map","length","connectedArrows","filter","includes","reduce","acc","cur","updateArrow","movedWidgets","handleMouseHoverSticky","target","targetChanged","startPoint","endPoint","newWidgets","handleMouseLeaveSticky","handleWidgetDragStart","shiftKey","stopPropagation","button","handleKeyDown","newCursor","selectedWidgetsId","prevWidgets","forEach","handleMouseDown","isChartSideArrow","updateArrowChartSide","setArrowChartBranch","handleRef","focus","draggingWidget","chartBranchArrow","getSharedChartBranchArrow","assign","chartBranchArrows","draggingPosition","connectedWidget","startPosition","endPosition","getWidgetSideMidPosition","snappingPoint","convergesOnEnd","convergencePoint","nonConvergencePoint","convergentWidget","nonConvergentWidget","middleX","getIntersectionMiddle","middleY","startWidgetCenter","endWidgetCenter","distX","distY","distXToCenter","distYToCenter","a","b","distance","horizontal","aCenter","bCenter","min1","size1","min2","size2","max1","max2","intersection","ARROW_MARGIN","value","point","newPoint","tabIndex","onDoubleClick","onKeyDown","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8da56829.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Sticky.css\";\nimport { StickyWidget } from \"../types\";\n\nconst SNAPPING_POINT_WIDTH = 30;\nconst SNAPPING_POINT_CENTER = SNAPPING_POINT_WIDTH / 2;\n\ninterface PropTypes {\n  cursor: React.CSSProperties[\"cursor\"];\n  onMouseDown: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseUp: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onDragStart: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseHover: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseLeave: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  selected: boolean;\n  widget: StickyWidget;\n}\n\nclass Sticky extends React.Component<PropTypes> {\n  dragging: boolean = false;\n  initialX: number = 0;\n  initialY: number = 0;\n\n  handleDragStart = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onDragStart, widget, cursor, onMouseDown } = this.props;\n    if (cursor === 'crosshair') onMouseDown(widget.id, e);\n    else onDragStart(widget.id, e);\n  };\n\n  handleMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onMouseUp, cursor, widget } = this.props;\n    if (cursor === 'crosshair') onMouseUp(widget.id, e);\n  };\n  \n  handleMouseHover = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onMouseHover, widget } = this.props;\n    onMouseHover(widget.id, e);\n  };\n\n  handleMouseLeave = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onMouseLeave, widget } = this.props;\n    onMouseLeave(widget.id, e);\n  };\n\n  render() {\n    const {\n      cursor,\n      selected,\n      widget: { x, y , width, height},\n    } = this.props;\n    return (\n      <div\n        onMouseUp={this.handleMouseUp}\n        onMouseDown={this.handleDragStart}\n        onMouseMove={this.handleMouseHover}\n        onMouseLeave={this.handleMouseLeave}\n        style={{\n          top: y,\n          left: x,\n          width: width,\n          height: height,\n          cursor: cursor === \"crosshair\" ? \"crosshair\" : \"pointer\",\n          border: selected ? \"2px solid blue\" : \"none\",\n        }}\n        className=\"Sticky\"\n        id=\"auto\"\n        >\n        <div\n          className=\"snapping-point top\"\n          style={{\n            top: 0 - SNAPPING_POINT_CENTER,\n            left: (width / 2) - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"top\"\n        ></div>\n        <div\n          className=\"snapping-point right\"\n          style={{\n            top: (height / 2) - SNAPPING_POINT_CENTER,\n            left: width - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"right\"\n        ></div>\n        <div\n          className=\"snapping-point bottom\"\n          style={{\n            top: height - SNAPPING_POINT_CENTER,\n            left: (width / 2) - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"bottom\"\n        ></div>\n        <div\n          className=\"snapping-point left\"\n          style={{\n            top: (height / 2) - SNAPPING_POINT_CENTER,\n            left: 0 - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"left\"\n        ></div>\n        <svg className=\"auto-affordance\">\n        <circle\n          cx={`${width / 2}`}\n          cy={`${height / 2}`}\n          r=\"5\"\n          stroke={'#1c7ff9'}\n          fill='none'\n          ></circle>\n          </svg>\n      </div>\n    );\n  }\n}\n\nexport default Sticky;\n","import React from \"react\";\nimport \"./Sticky.css\";\nimport \"./Arrow.css\";\nimport { ArrowWidget, ChartBranch, Point } from \"../types\";\n\ntype Direction = 'horizontal' | 'vertical' | 'other';\n\nconst MIN_SEGMENT_DISTANCE = 10;\n\ninterface PropTypes {\n  widget: ArrowWidget;\n  onDragPointStart: (id: string, e: React.MouseEvent, isStart: boolean) => void;\n}\n\ninterface State {\n  direction: Direction;\n  pointerEventsEnabled: boolean;\n  x?: number;\n  y?: number;\n}\n\nclass Arrow extends React.PureComponent<PropTypes, State> {\n  state: State = { direction: 'other', pointerEventsEnabled: false };\n\n  componentDidMount() {\n    this.setDirection();\n  }\n\n  componentDidUpdate() {\n    const { start, end } = this.getPoints();\n\n    if (this.state.x && this.state.direction === 'vertical') {\n      const diffStartX = this.state.x - start.x\n      const diffEndX = this.state.x - end.x;\n      if ((diffStartX > 0 && diffEndX > 0) || (diffStartX < 0 && diffEndX < 0)) {\n        this.setState({ x: undefined });\n      }\n    }\n\n    if (this.state.y && this.state.direction === 'horizontal') {\n      const diffStartY = this.state.y - start.y\n      const diffEndY = this.state.y - end.y;\n      if ((diffStartY > 0 && diffEndY > 0) || (diffStartY < 0 && diffEndY < 0)) {\n        this.setState({ y: undefined });\n      }\n    }\n  }\n\n  setDirection = () => {\n    const { start, end } = this.getPoints();\n    const isHorizontalStart = start.type === \"right\" || start.type === \"left\";\n    const isHorizontalEnd = end.type === \"right\" || end.type === \"left\";\n\n    if (isHorizontalStart !== isHorizontalEnd) this.setState({ direction: 'other' });\n\n    this.setState({ direction: isHorizontalStart ? 'vertical' : 'horizontal' });\n  }\n\n  getPoints = () => {\n    const { points } = this.props.widget;\n    const start = points[0];\n    const end = points[1];\n\n    return { start, end }\n  }\n\n  enablePointerEvents = () => {\n    if (this.state.pointerEventsEnabled) return;\n\n    console.log('enable pointer events')\n\n    this.setState({ pointerEventsEnabled: true})\n  }\n\n  disablePointerEvents = () => {\n    if (!this.state.pointerEventsEnabled) return;\n\n    console.log('disable pointer events')\n\n    this.setState({ pointerEventsEnabled: false})\n  }\n\n  connectionDot = (x: number, y: number, key: string, isStart?: boolean) => {\n    const handleDragPointStart = (e: React.MouseEvent) => {\n      const { onDragPointStart, widget } = this.props;\n      onDragPointStart(widget.id, e, !!isStart);\n    }\n    return <circle\n      key={key}\n      cx={`${x}`}\n      cy={`${y}`}\n      r=\"5\"\n      stroke={isStart ? 'black' : '#1c7ff9'}\n      fill={isStart ? 'white' : '#1c7ff9'}\n      onMouseDown={handleDragPointStart}\n      ></circle>\n  };\n\n  handleMouseMove = ({ clientX, clientY }: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n    this.setDirection();\n\n    if(!this.state.pointerEventsEnabled || this.state.direction === 'other') return;\n\n    const { start, end } = this.getPoints();\n\n    if (this.state.direction === 'vertical') {\n      const minX = Math.min(start.x, end.x);\n      const maxX = Math.max(start.x, end.x);\n\n      const limitStart = minX < clientX - MIN_SEGMENT_DISTANCE;\n      const limitEnd = maxX > clientX + MIN_SEGMENT_DISTANCE;\n\n      if (limitStart && limitEnd && this.state.x !== clientX)\n        this.setState({ x: clientX })\n\n      return;\n    }\n\n    const minY = Math.min(start.y, end.y);\n    const maxY = Math.max(start.y, end.y);\n\n    const limitStart = minY < clientY - MIN_SEGMENT_DISTANCE;\n    const limitEnd = maxY > clientY + MIN_SEGMENT_DISTANCE;\n\n    if (limitStart && limitEnd && this.state.y !== clientY)\n      this.setState({ y: clientY });\n  }\n\n  pathGenerator = (\n    points: Point[],\n    chartBranch: ChartBranch | null,\n    enablePointerEvents: () => void,\n    x: number | undefined,\n    y: number | undefined\n  ) => {\n    const start = points[0];\n    const end = points[1];\n    const isHorizontalStart = start.type === \"right\" || start.type === \"left\";\n    const isHorizontalEnd = end.type === \"right\" || end.type === \"left\";\n    const midDistance = isHorizontalStart ? (end.x - start.x) / 2 : (end.y - start.y) / 2;\n\n    // 1-segment straight line\n    if((isHorizontalStart && start.y === end.y) ||\n      (!isHorizontalStart && start.x === end.x)) {\n        const d = `M ${start.x} ${start.y} L ${end.x} ${end.y}`;\n        return [\n          this.connectionDot(start.x, start.y, '0', true),\n          <path d={d} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" key=\"1\" />,\n          this.connectionDot(end.x, end.y, '2'),\n        ];\n    }\n\n    if(isHorizontalStart !== isHorizontalEnd) {\n      const willCoverContent = isHorizontalStart\n      ? (end.type === \"bottom\" && end.y > start.y) || (end.type === \"top\" && end.y < start.y)\n      : (end.type === \"right\" && end.x > start.x) || (end.type === \"left\" && end.x < start.x);\n      // 2-segments line\n      if (!willCoverContent) {\n        const p1 = `${start.x} ${start.y}`;\n        const p2 = isHorizontalStart ? `${end.x} ${start.y}` : `${start.x} ${end.y}`;\n        const p3 = `${end.x} ${end.y}`;\n  \n        const d1 = `M ${p1} L ${p2}`;\n        const d2 = `M ${p2} L ${p3}`;\n        return [\n          this.connectionDot(start.x, start.y, '0', true),\n          <path d={d1} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" key=\"1\" />,\n          <path d={d2} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" key=\"2\" />,\n          this.connectionDot(end.x, end.y, '3'),\n        ];\n      // 4-segments line\n      } else {\n        const p1 = `${start.x} ${start.y}`;\n        const p2 = isHorizontalStart ? `${start.x + midDistance} ${start.y}` : ` ${start.x} ${start.y + midDistance}`;\n        const p5 = `${end.x} ${end.y}`;\n        let p3, p4;\n        if (end.type === \"bottom\" || end.type === \"right\") {\n          p3 = isHorizontalStart ? `${start.x + midDistance} ${end.y + 20}` : ` ${end.x + 20} ${start.y + midDistance}`;\n          p4 = isHorizontalStart ? `${end.x} ${end.y + 20}` : ` ${end.x + 20} ${end.y}`;\n        } else {\n          p3 = isHorizontalStart ? `${start.x + midDistance} ${end.y - 20}` : ` ${end.x - 20} ${start.y + midDistance}`;\n          p4 = isHorizontalStart ? `${end.x} ${end.y - 20}` : ` ${end.x - 20} ${end.y}`;\n        }\n\n        const d1 = `M ${p1} L ${p2}`;\n        const d2 = `M ${p2} L ${p3}`;\n        const d3 = `M ${p3} L ${p4}`;\n        const d4 = `M ${p4} L ${p5}`;\n        return [\n          this.connectionDot(start.x, start.y, '0', true),\n          <path d={d1} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" key=\"1\" />,\n          <path\n            key=\"2\"\n            d={d2}\n            stroke=\"black\"\n            strokeWidth=\"2\"\n            fill=\"none\"\n          />,\n          <path d={d3} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" key=\"3\" />,\n          <path d={d4} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" key=\"4\" />,\n          this.connectionDot(end.x, end.y, '5'),\n        ];\n      }\n    }\n    const willCoverContent = isHorizontalStart\n      ? (end.type === \"right\" && end.x > start.x) || (end.type === \"left\" && end.x < start.x)\n      : (end.type === \"bottom\" && end.y > start.y) || (end.type === \"top\" && end.y < start.y);\n    // 3-segments line\n    if (willCoverContent && !chartBranch) {\n      const p1 = `${start.x} ${start.y}`;\n      const p4 = `${end.x} ${end.y}`;\n      let p2, p3;\n      if (end.type === \"bottom\" || end.type === \"right\") {\n        p2 = isHorizontalStart ? `${end.x + 20} ${start.y}` : ` ${start.x} ${end.y + 20}`;\n        p3 = isHorizontalStart ? `${end.x + 20} ${end.y}` : ` ${end.x} ${end.y + 20}`;\n      } else {\n        p2 = isHorizontalStart ? `${end.x - 20} ${start.y}` : ` ${start.x} ${end.y - 20}`;\n        p3 = isHorizontalStart ? `${end.x - 20} ${end.y}` : ` ${end.x} ${end.y - 20}`;\n      }\n\n      const d1 = `M ${p1} L ${p2}`;\n      const d2 = `M ${p2} L ${p3}`;\n      const d3 = `M ${p3} L ${p4}`;\n\n      return [\n        this.connectionDot(start.x, start.y, '0', true),\n        <path d={d1} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" key=\"1\" />,\n        <path\n          key=\"2\"\n          d={d2}\n          stroke=\"black\"\n          strokeWidth=\"2\"\n          fill=\"none\"\n        />,\n        <path d={d3} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" key=\"3\" />,\n        this.connectionDot(end.x, end.y, '4'),\n      ];\n    }\n    let segment2Position = isHorizontalStart && x\n      ? x\n      : !isHorizontalStart && y\n      ? y\n      : isHorizontalStart\n      ? start.x + midDistance\n      : start.y + midDistance;\n\n    if(chartBranch)\n    {\n      const convergenceTarget = chartBranch.type === \"manyToOne\" ? end : start;\n      if(chartBranch.convergenceSide === convergenceTarget.type) {\n        segment2Position = isHorizontalStart && x\n          ? x\n          : !isHorizontalStart && y\n          ? y\n          : chartBranch.position;\n      }\n    }\n\n    const p1 = `${start.x} ${start.y}`;\n    const p2 = isHorizontalStart ? `${segment2Position} ${start.y}` : ` ${start.x} ${segment2Position}`;\n    const p3 = isHorizontalStart ? `${segment2Position} ${end.y}` : ` ${end.x} ${segment2Position}`;\n    const p4 = `${end.x} ${end.y}`;\n\n    const d1 = `M ${p1} L ${p2}`;\n    const d2 = `M ${p2} L ${p3}`;\n    const d3 = `M ${p3} L ${p4}`;\n\n    const cursor = isHorizontalStart ? 'ew-resize' : 'ns-resize'\n\n    return [\n      this.connectionDot(start.x, start.y, '0', true),\n      <path d={d1} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" key=\"1\" />,\n      <path\n        key=\"2\"\n        d={d2}\n        stroke=\"black\"\n        strokeWidth=\"2\"\n        fill=\"none\"\n        style={{\n          cursor,\n          pointerEvents: 'auto'\n        }}\n        onMouseDown={enablePointerEvents}\n      />,\n      <path d={d3} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" key=\"3\" />,\n      this.connectionDot(end.x, end.y, '4'),\n    ];\n  };\n\n  render() {\n    const path = this.pathGenerator(\n      this.props.widget.points,\n      this.props.widget.chartBranch,\n      this.enablePointerEvents,\n      this.state.x,\n      this.state.y\n    );\n\n    return (\n      <svg\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          pointerEvents: this.state.pointerEventsEnabled ? \"auto\" : \"none\",\n        }}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        version=\"1.1\"\n        className=\"Arrow\"\n        onMouseUp={this.disablePointerEvents}\n        onMouseMove={this.handleMouseMove}\n      >\n        { path }\n      </svg>\n    );\n  }\n}\n\nexport default Arrow;","import React from \"react\";\r\n\r\ninterface PropTypes {\r\n  label: string;\r\n  onCheckedChange: (checked: boolean) => void;\r\n}\r\n\r\ninterface State {\r\n  checked: boolean;\r\n}\r\n\r\nclass Checkbox extends React.PureComponent<PropTypes, State> {\r\n  state: State = {\r\n    checked: false,\r\n  };\r\n\r\n  handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => { \r\n    this.setState((prevState) => {\r\n      const checked = !prevState.checked;\r\n      this.props.onCheckedChange(checked);\r\n      return {\r\n        checked\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{height: \"auto\"}}>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            style={{width: 15, height: 15}}\r\n            onChange={this.handleOnChange}\r\n            defaultChecked={this.state.checked} />\r\n          {this.props.label}\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checkbox;","import * as uuid from \"uuid\";\n\ninterface W {\n  height: number;\n  width: number;\n  id: string;\n  x: number;\n  y: number;\n}\n\nexport type PointType = \"bottom\" | \"top\" | \"left\" | \"right\";\nexport type Orientation = \"horizontal\" | \"vertical\";\nexport type ChartBranchType = \"oneToOne\" | \"oneToMany\" | \"manyToOne\";\n\nexport interface Point {\n  x: number;\n  y: number;\n  type: PointType;\n}\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport interface ChartBranch {\n  position: number; // fixed position where arrows share the 2nd branch segment\n  convergenceSide: PointType;  // side of the widget where the arrows converge (might be start or end widget depending of ChartBranchType)\n  type: ChartBranchType;\n}\n\n// initial: initial simple arrow, centered to the connected widgets on both ends, bent into 3 segments having the same length in both parallel segments.\n// chartBranch: created from an 'initial' arrow, centered to the connected widgets on both ends, bent into 3 segments, can share inital segment with other 'chartBranch' arrows, 1st segment size stays put.\n// chartSide: created from an 'initial' arrow, moved to the side of a group of 'chartBranch' arrows and can be on any point of both connected widgets.\nexport type ArrowType = \"initial\" | \"chartBranch\" | \"chartSide\";\n\nexport type StickyWidget = W & { type: \"sticky\" };\nexport type ArrowWidget = W & {\n  type: \"arrow\";\n  points: Point[];\n  start: string | null;\n  startPoint?: PointType | null;\n  endPoint?: PointType | null;\n  end: string | null;\n  arrowType: ArrowType;\n  chartBranch: ChartBranch | null;\n  initialIsHorizontal: boolean;\n};\n\nexport type Widget = StickyWidget | ArrowWidget;\n\nexport const stickyFactory = (spec: Partial<StickyWidget>): StickyWidget => ({\n  id: uuid.v4(),\n  height: spec.height ?? 100,\n  width: spec.width ?? 100,\n  type: \"sticky\",\n  x: (spec.x || 0) - 50,\n  y: (spec.y || 0) - 50,\n});\n\nexport const arrowFactory = (spec: Partial<ArrowWidget>): ArrowWidget => ({\n  id: uuid.v4(),\n  height: 0,\n  width: 0,\n  type: \"arrow\",\n  x: (spec.x || 0) - 25,\n  y: (spec.y || 0) - 25,\n  start: spec.start || null,\n  end: spec.end || null,\n  points: [],\n  arrowType: spec.arrowType || \"initial\",\n  chartBranch: null,\n  initialIsHorizontal: spec.initialIsHorizontal || true,\n});\n\nexport const toOrientation = (type: PointType) : Orientation => {\n  return type === \"left\" || type === \"right\" ? \"horizontal\" : \"vertical\";\n}\n","import React, { CSSProperties } from \"react\";\nimport \"./App.css\";\nimport Sticky from \"./widgets/Sticky\";\nimport Arrow from \"./widgets/Arrow\";\nimport Checkbox from \"./settings/Checkbox\";\nimport {\n  stickyFactory,\n  Widget,\n  StickyWidget,\n  ArrowWidget,\n  arrowFactory,\n  Point,\n  Position,\n  toOrientation,\n  ChartBranch,\n  PointType,\n} from \"./types\";\n\nexport const TOLERANCE = 10;\nexport const ARROW_MARGIN = 10;\nexport const TWO_SEGMENT_ARROW_MIN = 20;\n\nexport const settingsStyle: React.CSSProperties = {\n  position: \"absolute\",\n  top: 0,\n  width:\"auto\",\n  height: \"auto\",\n  borderStyle: \"solid\",\n  backgroundColor: \"lightgray\",\n  padding: 10,\n};\n\ninterface State {\n  settings:{\n    stickToConvergentWidgetSide: boolean;\n  };\n  cursor: React.CSSProperties[\"cursor\"];\n  dragging: string[] | null;\n  initialId: string | null;\n  endId: string | null;\n  selected: string[] | null;\n  widgets: Record<string, Widget>;\n}\n\nclass App extends React.Component<{}, State> {\n  ref: HTMLDivElement | null = null;\n\n  state: State = {\n    settings :{\n      stickToConvergentWidgetSide: false,\n    },\n    cursor: \"auto\",\n    dragging: null,\n    initialId: null,\n    endId: null,\n    selected: null,\n    widgets: {},\n  };\n  mousePosition: Position | null = null;\n  mouseOverSticky: boolean = false;\n\n  cancelArrowCreation() {\n    this.setState((prevState) => {\n      if(prevState.dragging && prevState.dragging.length) {\n        // delete dragging arrow if any\n        const draggingWidget = { ...prevState.widgets[prevState.dragging[0]] };\n        if(draggingWidget.type === \"arrow\") {\n          const prevWidgets = prevState.widgets;\n          delete prevWidgets[draggingWidget.id];\n          return {\n            ...prevState,\n            dragging: null,\n            initialId: null,\n            endId: null,\n            cursor: \"auto\",\n            widgets: { ...prevWidgets },\n          }\n        }\n      }\n\n      return {\n        ...prevState,\n        dragging: null,\n        initialId: null,\n        endId: null,\n        cursor: \"auto\",\n      }\n    });\n  }\n\n  handleArrowPointDragStart = (id: string, e: React.MouseEvent, isStart: boolean) => {\n    if (isStart) {\n      const end = (this.state.widgets[id] as ArrowWidget).end;\n      this.setState((prevState) => (\n        {\n          ...prevState,\n          cursor: 'crosshair',\n          dragging: [id],\n          endId: end,\n          initialId: null,\n          widgets: {\n            ...prevState.widgets,\n            [id]: {\n              ...prevState.widgets[id],\n              start: null,\n            }\n          }\n        }\n      ));\n    } else {\n      const initial = (this.state.widgets[id] as ArrowWidget).start;\n      this.setState((prevState) => (\n        {\n          ...prevState,\n          cursor: 'crosshair',\n          dragging: [id],\n          initialId: initial,\n          endId: null,\n          widgets: {\n            ...prevState.widgets,\n            [id]: {\n              ...prevState.widgets[id],\n              end: null,\n            }\n          }\n        }\n      ));\n    }\n  }\n\n  handleStickyMouseDown = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    if (this.state.cursor !== \"crosshair\")\n      return;\n    // start arrow creation\n    if (!this.state.dragging) {\n      const mousePosition: Position = {x: e.clientX, y: e.clientY };\n      // this.setState({initialId: id});\n\n      // create Arrow for dragging without end widget\n      this.setState((prevState) => {\n        const arrow = {\n          ...arrowFactory({ start: id, end: null }),\n        };\n\n        this.updateDisconnectedArrow(arrow, prevState.widgets, mousePosition);\n\n        return {\n          ...prevState,\n          initialId: id,\n          widgets: {\n            ...prevState.widgets,\n            [arrow.id]: arrow,\n          },\n          dragging: [arrow.id],\n        };\n      });\n\n      return;\n    }\n  }\n\n  handleStickyMouseUp = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    if (this.state.initialId === id || this.state.endId === id) {\n      this.cancelArrowCreation();\n      return;\n    }\n\n    if (this.state.cursor !== \"crosshair\")\n      return;\n    \n    this.setState((prevState) => {\n      if (!prevState.dragging)\n        return { ...prevState };\n      \n      const draggingArrow = { ...prevState.widgets[prevState.dragging[0]] } as ArrowWidget;\n      const startWidget = prevState.widgets[draggingArrow.start ?? id];\n      const endWidget = prevState.widgets[draggingArrow.end ?? id];\n\n      // avoid duplicate arrow (same start and end)\n      const duplicateArrow = Object.values(prevState.widgets).find(w => w.type===\"arrow\" && w.id !== draggingArrow.id && w.start === startWidget.id && w.end === endWidget.id);\n      if(duplicateArrow) {\n        return { ...prevState }\n      }\n      \n      // update Arrow start/end and connect it to both widgets\n      const isHorizontalConnection = Math.abs((startWidget.x - endWidget.x) / (startWidget.y - endWidget.y)) > 1;\n      draggingArrow.start = startWidget.id;\n      draggingArrow.end = endWidget.id;\n      draggingArrow.initialIsHorizontal = isHorizontalConnection;\n\n      return {\n        ...prevState,\n        cursor: \"auto\",\n        dragging: null,\n        initialId: null,\n        endId: null,\n        widgets: {\n          ...prevState.widgets,\n          [draggingArrow.id]: draggingArrow,\n        },\n      };\n    });\n  };\n\n  handleDoubleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    // create rectangular stickies while holding CTRL down\n    const stickyWidth = e.ctrlKey ? 150 : 100;\n    const s = stickyFactory({ x: e.clientX, y: e.clientY, width: stickyWidth });\n    this.setState((prevState) => ({\n      selected: [s.id],\n      widgets: {\n        ...prevState.widgets,\n        [s.id]: s,\n      },\n    }));\n  };\n\n  handleDrag = (e: React.MouseEvent<HTMLDivElement>) => {\n    const deltaX = this.mousePosition ? e.clientX - this.mousePosition.x : e.clientX;\n    const deltaY = this.mousePosition ? e.clientY - this.mousePosition.y : e.clientY;\n    this.mousePosition = {x: e.clientX, y: e.clientY };\n    const { dragging, widgets } = this.state;\n\n    if (!dragging)\n      return;\n    const draggingWidgets = dragging.map(id => widgets[id]);\n    if(draggingWidgets.length > 1 || draggingWidgets[0].type === \"sticky\") {\n      // update connected arrows\n      const connectedArrows = Object.values(widgets)\n      .filter(\n        (w) =>\n          w.type === \"arrow\" &&\n          dragging &&\n          ((w.start && dragging.includes(w.start)) ||\n          (w.end && dragging.includes(w.end))))\n      .reduce((acc, cur) => {\n        const arrow = cur as ArrowWidget;\n        this.updateArrow(arrow, widgets);\n        if (dragging &&\n          ((arrow.start && dragging.includes(arrow.start)) &&\n          (arrow.end && dragging.includes(arrow.end))) &&\n          arrow.chartBranch && arrow.chartBranch.type === 'oneToOne') {\n            arrow.chartBranch.position = arrow.chartBranch.position + (arrow.initialIsHorizontal ? deltaX : deltaY);\n          }\n        \n        return {\n          ...acc,\n          [arrow.id]: {\n            ...arrow,\n          },\n        };\n      }, {} as Record<string, Widget>);\n  \n      const movedWidgets: Record<string, Widget> = draggingWidgets.reduce((acc, cur) => {\n        return {\n          ...acc,\n          [cur.id]: {\n            ...cur,\n            x: cur.x + deltaX,\n            y: cur.y + deltaY,\n          }\n        };\n      }, {});\n      this.setState({\n        widgets: {\n          ...widgets,\n          ...movedWidgets,\n          ...connectedArrows,\n        }\n      });\n    } else if (draggingWidgets[0].type === \"arrow\" && !this.mouseOverSticky) {\n      const draggingArrow = { ...draggingWidgets[0] };\n      // update arrow dragged end\n      if (!draggingArrow.end || !draggingArrow.start)\n        this.updateDisconnectedArrow(draggingArrow, widgets, this.mousePosition);\n      \n      this.setState({\n        widgets: {\n          ...widgets,\n          [draggingArrow.id]: draggingArrow,\n        },\n      });\n    }\n  };\n\n  handleMouseHoverSticky = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    this.mouseOverSticky = true;\n    const target = (e.target as Element).id;\n    const { dragging, widgets } = this.state;\n    if (!dragging) return;\n    // stick to widget when hovering while dragging\n    const draggingWidgets = dragging.map(id => widgets[id]);\n    if(draggingWidgets.length === 1 &&\n      draggingWidgets[0].type === \"arrow\") {\n        const isStart = !draggingWidgets[0].start;\n        const targetChanged = isStart\n          ? draggingWidgets[0].startPoint !== target && draggingWidgets[0].start === id\n          : draggingWidgets[0].endPoint !== target && draggingWidgets[0].end === id;\n        if ((draggingWidgets[0].start !== id &&\n          draggingWidgets[0].end !== id) || targetChanged)\n          {\n            const draggingArrow = { ...draggingWidgets[0] };\n            // connect to widget and update arrow\n            draggingArrow.start = draggingArrow.start ?? id;\n            draggingArrow.end = draggingArrow.end ?? id;\n            this.updateArrow(draggingArrow, widgets, target as PointType | \"auto\", isStart);\n            const newWidgets = { ...widgets, [draggingArrow.id]: draggingArrow };\n            this.setState({\n              widgets: newWidgets,\n            });\n          }\n    };\n  }\n\n  handleMouseLeaveSticky = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    this.mouseOverSticky = false;\n    const { dragging, widgets } = this.state;\n    if (!dragging) return;\n    const draggingWidgets = dragging.map(id => widgets[id]);\n    if (draggingWidgets.length === 1 &&\n      draggingWidgets[0].type === \"arrow\" &&\n      draggingWidgets[0].start && draggingWidgets[0].end &&\n      (draggingWidgets[0].start === id ||\n      draggingWidgets[0].end === id)) {\n      // disconnect from widget and update arrow\n      const draggingArrow = { ...draggingWidgets[0] };\n      draggingArrow.start = draggingArrow.start === id ? null : draggingArrow.start;\n      draggingArrow.end = draggingArrow.end === id ? null : draggingArrow.end;\n      this.updateDisconnectedArrow(draggingArrow, widgets, {x: e.clientX, y: e.clientY});\n      \n      this.setState({\n        widgets: {\n          ...widgets,\n          [draggingArrow.id]: draggingArrow,\n        },\n      });\n    }\n  }\n\n  handleWidgetDragStart = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    const { shiftKey } = e;\n    e.stopPropagation();\n\n    if (e.button !== 0)\n      return;\n\n    if(this.state.dragging)\n      return;\n\n    const selected = (this.state.selected && (this.state.selected.includes(id) || shiftKey))\n    ? !this.state.selected.includes(id)\n      ? [...this.state.selected, id]\n      : this.state.selected\n    : [id];\n    const dragging = (this.state.selected && this.state.selected.includes(id)) ? this.state.selected : [id];\n\n    this.setState({\n      dragging,\n      selected,\n    });\n  };\n\n  handleKeyDown = (e: React.KeyboardEvent) => {\n    if(e.key === \"c\") {\n      const newCursor = this.state.cursor === \"auto\" ? \"crosshair\" : \"auto\";\n      if(newCursor === \"auto\") {\n        this.cancelArrowCreation();\n      } else {\n        this.setState({\n          cursor: newCursor,\n        });\n      }\n    }\n\n    if ((e.key === \"Backspace\" || e.key === \"Delete\") && !!this.state.selected) {\n      this.setState((prevState) => {\n        const selectedWidgetsId = prevState.selected || null;\n        const prevWidgets = prevState.widgets;\n        selectedWidgetsId?.forEach(id => {\n          Object.values(prevWidgets).forEach((w) => {\n            if (w.type === \"arrow\" && (w.start === id || w.end === id))\n              delete prevWidgets[w.id];\n          });\n          delete prevWidgets[id]\n        });\n\n        return {\n          ...prevState,\n          selected: null,\n          widgets: { ...prevWidgets },\n        };\n      });\n    }\n  };\n\n  handleMouseDown = () => {\n    this.setState({ selected: null });\n  };\n\n  handleMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n    const draggingWidgets = this.state.dragging && this.state.dragging.map(id => this.state.widgets[id]);\n    if(draggingWidgets && draggingWidgets.length === 1 && draggingWidgets[0].type === \"arrow\") {\n      console.log('mouse up only dragging one arrow');\n      if (this.state.initialId || this.state.endId) {\n        this.cancelArrowCreation();\n      }\n      return;\n    }\n    this.setState((prevState) => {\n      \n      if (!prevState.dragging)\n        return { ...prevState };\n      \n      const connectedArrows = Object.values(prevState.widgets)\n      .filter(\n        (w) =>\n          w.type === \"arrow\" &&\n          (((w.start && prevState.dragging?.includes(w.start)) || (w.end && prevState.dragging?.includes(w.end))))\n      ).map(w=> w as ArrowWidget)\n      .reduce((acc, arrow) => {\n\n        // stick to your branch side\n        if(!prevState.settings.stickToConvergentWidgetSide || arrow.arrowType !== \"chartBranch\") {\n          if(this.isChartSideArrow(arrow, prevState.widgets)) {\n            const startWidget = prevState.widgets[arrow.start || \"\"] as StickyWidget;\n            const endWidget = prevState.widgets[arrow.end || \"\"] as StickyWidget;\n            if(this.updateArrowChartSide(arrow, startWidget, endWidget)) {\n              arrow.arrowType = \"chartSide\";\n            }\n          }\n          \n          // update chart branches state (for both start and end arrows)\n          this.setArrowChartBranch(arrow, prevState.widgets, false);\n        }\n          \n        // update initial axis\n        arrow.initialIsHorizontal = arrow.points[0].type === \"left\" || arrow.points[0].type === \"right\";\n\n        return {\n          ...acc,\n          [arrow.id]: {\n            ...arrow,\n          },\n        };\n      }, {} as Record<string, Widget>);\n      \n      return {\n        dragging: null,\n        widgets: {\n          ...prevState.widgets,\n          ...connectedArrows,\n        },\n      };\n    });\n  };\n\n  handleRef = (ref: HTMLDivElement) => {\n    this.ref = ref;\n    // start focused to listen for key presses\n    if(this.ref) {\n      this.ref.focus();\n    }\n  }\n\n  // finds if this arrow should be a part of a branchChart\n  setArrowChartBranch(arrow: ArrowWidget, widgets: Record<string, Widget>, dragging: boolean) {\n    if(!this.state.settings.stickToConvergentWidgetSide && arrow.chartBranch) {\n      // don't recalculate if chartBranchSide didn't change\n      let convergencePoint = arrow.chartBranch.type === \"manyToOne\" ? arrow.points[1] : arrow.points[0];\n      if(convergencePoint.type === arrow.chartBranch.convergenceSide)\n      return;\n    }\n    \n    const chartBranchArrow = this.getSharedChartBranchArrow(arrow, widgets);\n    // don't force chartBranching while dragging on an empty side of the origin/end widget\n    // or if arrow has explicitly set start or end point\n    if((dragging && !chartBranchArrow) || (arrow.startPoint || arrow.endPoint)) {\n      arrow.chartBranch = null;\n      return;\n    }\n  \n    // don't set arrowType while dragging (wait until mouseUp)\n    if(!dragging) {\n      arrow.arrowType = \"chartBranch\";\n    }\n    \n    if(chartBranchArrow && chartBranchArrow.chartBranch) {\n      // become part of an existing chartBranch\n      if(chartBranchArrow.chartBranch.type === \"oneToOne\") {\n        // if we are just adding the 2nd arrow to this chartBranch, update type and convergenceSide beforehand\n        if(chartBranchArrow.start === arrow.start ){\n          chartBranchArrow.chartBranch.type = \"oneToMany\";\n          chartBranchArrow.chartBranch.convergenceSide = arrow.points[0].type;\n        } else {\n          chartBranchArrow.chartBranch.type = \"manyToOne\";\n          chartBranchArrow.chartBranch.convergenceSide = arrow.points[1].type;\n        }\n      }\n      arrow.chartBranch = Object.assign({}, chartBranchArrow.chartBranch);\n    } else {\n      // new lonely charBranch arrow\n      console.log('new lonely charBranch arrow');\n      let chartBranch: ChartBranch = {\n        position: 0,\n        convergenceSide: arrow.points[0].type,\n        type: \"oneToOne\"\n      };\n      // on new branch, set 2nd segment position to half the distance in X or Y depending on orientation \n      if(toOrientation(chartBranch.convergenceSide) === \"horizontal\") {\n        chartBranch.position = arrow.points[0].x + ((arrow.points[1].x - arrow.points[0].x) / 2);\n      } else {\n        chartBranch.position = arrow.points[0].y + ((arrow.points[1].y - arrow.points[0].y) / 2);\n      }\n      arrow.chartBranch = chartBranch;\n    }\n  }\n\n  // find another arrow that share same origin or end point and already has chartBranch defined\n  getSharedChartBranchArrow(arrow: ArrowWidget, widgets: Record<string, Widget>) {\n    const chartBranchArrows = Object.values(widgets)\n    .filter(\n      (w) =>\n      w.type === \"arrow\" &&\n      w.id !== arrow.id &&\n      w.arrowType === \"chartBranch\" &&\n      w.chartBranch &&\n      ((w.start === arrow.start && w.points[0].type === arrow.points[0].type) ||\n       (w.end === arrow.end && w.points[1].type === arrow.points[1].type))\n    ).map(w => w as ArrowWidget);\n    \n    return chartBranchArrows.length > 0 ? chartBranchArrows[0] : null;\n  }\n\n  // used when dragging an arrow point that is connected to only one widget \n  updateDisconnectedArrow(arrow: ArrowWidget, widgets: Record<string, Widget>, draggingPosition: Position) {\n    const startWidget = widgets[arrow.start || \"\"];\n    const endWidget = widgets[arrow.end || \"\"];\n    \n    const connectedWidget = startWidget ? startWidget : endWidget;\n\n    const startPosition: Position = startWidget ? {x: startWidget.x, y: startWidget.y } : draggingPosition;\n    const endPosition: Position = endWidget ? {x: endWidget.x, y: endWidget.y } : draggingPosition;\n\n    // initial dummy values\n    let points: Point[] = [{type: \"right\", x: 0, y: 0}, {type: \"left\", x: 1, y: 0}];\n\n    const isHorizontalStart = Math.abs((startPosition.x - endPosition.x) / (startPosition.y - endPosition.y)) > 1;\n    // change connections depending on positioning (and wich side is the connectedWidget)\n    if(isHorizontalStart) {\n      if(connectedWidget.x + connectedWidget.width + TOLERANCE < draggingPosition.x) {\n        points[0].type = startWidget ? \"right\" : \"left\";\n        points[1].type = startWidget ? \"left\" : \"right\";\n      } else {\n        points[0].type = startWidget ? \"left\" : \"right\";\n        points[1].type = startWidget ? \"right\" : \"left\";\n      }\n    } else {\n      if (connectedWidget.y + connectedWidget.height + TOLERANCE < draggingPosition.y) {\n        points[0].type = startWidget ? \"bottom\" : \"top\";\n        points[1].type = startWidget ? \"top\" : \"bottom\";\n      } else {\n        points[0].type = startWidget ? \"top\" : \"bottom\";\n        points[1].type = startWidget ? \"bottom\" : \"top\";\n      }\n    }\n    points[0] = startWidget ? this.getWidgetSideMidPosition(points[0], startWidget) : {...points[0], x: draggingPosition.x, y: draggingPosition.y};\n    points[1] = endWidget ? this.getWidgetSideMidPosition(points[1], endWidget) : {...points[1], x: draggingPosition.x, y: draggingPosition.y};\n    arrow.points = points;\n  }\n\n  // updates arrow points (start/end) in both position and type\n  updateArrow(arrow: ArrowWidget, widgets: Record<string, Widget>, snappingPoint?: PointType | \"auto\", isStart?: boolean) {\n    console.log('snappingPoint: ', snappingPoint);\n    const startWidget = widgets[arrow.start || \"\"];\n    const endWidget = widgets[arrow.end || \"\"];\n    \n    // initial dummy values\n    let points: Point[] = [{type: \"right\", x: 0, y: 0}, {type: \"left\", x: 1, y: 0}];\n    \n    if(arrow.points.length === 2) {\n      points = arrow.points;\n    }\n    \n    // stick to your branch side\n    if(!this.state.settings.stickToConvergentWidgetSide || arrow.arrowType !== \"chartBranch\") {\n      if (isStart && snappingPoint) {\n        arrow.startPoint = snappingPoint !== \"auto\" ? snappingPoint : null;\n      } else if (snappingPoint) {\n        arrow.endPoint = snappingPoint !== \"auto\" ? snappingPoint : null;\n        arrow.arrowType = 'initial';\n        arrow.chartBranch = null;\n      }\n      const isHorizontalStart = Math.abs((startWidget.x - endWidget.x) / (startWidget.y - endWidget.y)) > 1;\n      // change connections depending on positioning\n      if(isHorizontalStart) {\n        if (startWidget.x + startWidget.width + TOLERANCE < endWidget.x) {\n          points[0].type = arrow.startPoint || \"right\";\n          points[1].type = arrow.endPoint || \"left\";\n        } else {\n          points[0].type = arrow.startPoint || \"left\";\n          points[1].type = arrow.endPoint || \"right\";\n        }\n      } else {\n        if (startWidget.y + startWidget.height + TOLERANCE < endWidget.y) {\n          points[0].type = arrow.startPoint || \"bottom\";\n          points[1].type = arrow.endPoint || \"top\";\n        } else {\n          points[0].type = arrow.startPoint || \"top\";\n          points[1].type = arrow.endPoint || \"bottom\";\n        }\n      }\n      points[0] = this.getWidgetSideMidPosition(points[0], startWidget);\n      points[1] = this.getWidgetSideMidPosition(points[1], endWidget);\n      arrow.points = points;\n      \n      // check if being a chartSide arrow\n      if(this.isChartSideArrow(arrow, widgets)) {\n        this.updateArrowChartSide(arrow, startWidget, endWidget);\n      }\n      \n      // check if being part of a chartBranch\n      this.setArrowChartBranch(arrow, widgets, true);\n    }\n    \n    // update chartBranch arrows\n    // this is mainly used for a branched arrow whose widget is \"behind\" the branch fixed position \n    if(arrow.chartBranch) {\n      // on \"oneOnOne\" we consider the start widget as the convergent one\n      const convergesOnEnd = arrow.chartBranch.type === \"manyToOne\"; \n      let convergencePoint = convergesOnEnd ? arrow.points[1] : arrow.points[0];\n      let nonConvergencePoint = convergesOnEnd ? arrow.points[0] : arrow.points[1];\n      const convergentWidget = convergesOnEnd ? endWidget : startWidget;\n      const nonConvergentWidget = convergesOnEnd ? startWidget : endWidget;\n      \n      convergencePoint = this.getWidgetSideMidPosition(convergencePoint, convergentWidget);\n      nonConvergencePoint = this.getWidgetSideMidPosition(nonConvergencePoint, nonConvergentWidget);\n      console.log(nonConvergencePoint);\n    \n      if(toOrientation(arrow.chartBranch.convergenceSide) === \"horizontal\") {\n        // if inside, use 2-segment arrow\n        if(arrow.chartBranch.position >= nonConvergentWidget.x && arrow.chartBranch.position <= nonConvergentWidget.x + nonConvergentWidget.width) {\n          nonConvergencePoint.x = arrow.chartBranch.position;\n          nonConvergencePoint.y = (nonConvergentWidget.y + nonConvergentWidget.height/2) > convergencePoint.y ? nonConvergentWidget.y : nonConvergentWidget.y + nonConvergentWidget.height;\n        // otherwise use regular 3-segment arrow but make sure it connects to the correct side\n        } else {\n          nonConvergencePoint.type = arrow.chartBranch.position < nonConvergentWidget.x ? \"left\" : \"right\";\n          nonConvergencePoint = this.getWidgetSideMidPosition(nonConvergencePoint, nonConvergentWidget);\n        }\n      } else {  // vertical\n        // if inside, use 2-segment arrow\n        if(arrow.chartBranch.position >= nonConvergentWidget.y && arrow.chartBranch.position <= nonConvergentWidget.y + nonConvergentWidget.height) {\n          nonConvergencePoint.x = (nonConvergentWidget.x + nonConvergentWidget.width/2) > convergencePoint.x ? nonConvergentWidget.x : nonConvergentWidget.x + nonConvergentWidget.width;\n          nonConvergencePoint.y = arrow.chartBranch.position;\n        // otherwise use regular 3-segment arrow but make sure it connects to the correct side\n        } else {\n          nonConvergencePoint.type = arrow.chartBranch.position < nonConvergentWidget.y ? \"top\" : \"bottom\";\n          nonConvergencePoint = this.getWidgetSideMidPosition(nonConvergencePoint, nonConvergentWidget);\n        }\n      }\n\n      arrow.points[0] = convergesOnEnd ? nonConvergencePoint : convergencePoint;\n      arrow.points[1] = convergesOnEnd ? convergencePoint : nonConvergencePoint;\n    }\n  }\n  \n  isChartSideArrow(arrow: ArrowWidget, widgets: Record<string, Widget>) {\n    // can't be chartSide if there is any chartBranch on current side\n    if(this.getSharedChartBranchArrow(arrow, widgets)) return;\n\n    return ((arrow.initialIsHorizontal && (arrow.points[0].type === \"top\" || arrow.points[0].type === \"bottom\")) ||\n    (!arrow.initialIsHorizontal && (arrow.points[0].type === \"left\" || arrow.points[0].type === \"right\")));\n  }\n\n  // returns true if using intersection chartSide\n  updateArrowChartSide(arrow: ArrowWidget, startWidget: Widget, endWidget: Widget) {\n    // if widgets limits are intersecting, use chartSide connector\n    if(arrow.initialIsHorizontal) {\n      const middleX = this.getIntersectionMiddle(startWidget.x, startWidget.width, endWidget.x, endWidget.width);\n      if(middleX) {\n        arrow.points[0].x = middleX;\n        arrow.points[1].x = middleX;\n        return true;\n      }\n    } else {\n      const middleY = this.getIntersectionMiddle(startWidget.y, startWidget.height, endWidget.y, endWidget.height);\n      if(middleY) {\n        arrow.points[0].y = middleY;\n        arrow.points[1].y = middleY;\n        return true;\n      }\n    }\n\n    // if there is no intersection, use original axis side\n    if(arrow.initialIsHorizontal) {\n      arrow.points[0].type = endWidget.x > startWidget.x + (startWidget.width / 2) ? \"right\" : \"left\";\n    } else {\n      arrow.points[0].type = endWidget.y > startWidget.y + (startWidget.height / 2) ? \"bottom\" : \"top\";\n    }\n    arrow.points[0] = this.getWidgetSideMidPosition(arrow.points[0], startWidget);\n    \n    const startWidgetCenter = {x: startWidget.x + (startWidget.width/2), y: startWidget.y + (startWidget.height/2)};\n    const endWidgetCenter = {x: endWidget.x + (endWidget.width/2), y: endWidget.y + (endWidget.height/2)};\n    const distX = Math.abs(startWidgetCenter.x - endWidgetCenter.x) - (startWidget.width/2 + endWidget.width/2);\n    const distY = Math.abs(startWidgetCenter.y - endWidgetCenter.y) - (startWidget.height/2 + endWidget.height/2);\n    const widgetsTooClose = arrow.initialIsHorizontal ? distX <= ARROW_MARGIN : distY <= ARROW_MARGIN;\n    \n    // if widgets are too close, use 2-segments arrow\n    if(widgetsTooClose) {\n      // never closer than 20px from origin and never less than 10px from target side\n      if(arrow.initialIsHorizontal) {\n        arrow.points[1].type = endWidget.y > arrow.points[0].y ? \"top\" : \"bottom\";\n        let distXToCenter = startWidget.width/2 + Math.max(distX + ARROW_MARGIN, TWO_SEGMENT_ARROW_MIN);\n        arrow.points[1].x = startWidgetCenter.x + (arrow.points[0].type === \"right\" ? distXToCenter : -distXToCenter);\n        arrow.points[1].y = arrow.points[1].type === \"top\" ? endWidget.y : endWidget.y + endWidget.height;\n      } else {\n        arrow.points[1].type = endWidget.x > arrow.points[0].x ? \"left\" : \"right\";\n        let distYToCenter = startWidget.height/2 + Math.max(distY + ARROW_MARGIN, TWO_SEGMENT_ARROW_MIN);\n        arrow.points[1].x = arrow.points[1].type === \"left\" ? endWidget.x : endWidget.x + endWidget.width;\n        arrow.points[1].y = startWidgetCenter.y + (arrow.points[0].type === \"bottom\" ? distYToCenter : -distYToCenter);\n      }\n    // otherwise use regular 3-segments arrow\n    } else {\n      if(arrow.initialIsHorizontal) {\n        \tarrow.points[1].type = arrow.points[0].type === \"right\" ? \"left\" : \"right\";\n      } else {\n        arrow.points[1].type = arrow.points[0].type === \"bottom\" ? \"top\" : \"bottom\";\n      }\n      arrow.points[1] = this.getWidgetSideMidPosition(arrow.points[1], endWidget);\n    }\n\n    return false;\n  }\n\n  // returns if any widgets are at \"distance\" or lower in the requested axis\n  widgetsTooClose(a: Widget, b: Widget, distance: number, horizontal: boolean) {\n    const aCenter = {x: a.x + (a.width/2), y: a.y + (a.height/2)};\n    const bCenter = {x: b.x + (b.width/2), y: b.y + (b.height/2)};\n    if(horizontal) {\n      const distX = Math.abs(aCenter.x - bCenter.x) - (a.width/2 + b.width/2);\n      return distX <= distance;\n    }\n    const distY = Math.abs(aCenter.y - bCenter.y) - (a.height/2 + b.height/2);\n    return distY <= distance;\n  }\n\n  // returns the middle point of an intersection\n  getIntersectionMiddle(min1: number, size1: number, min2: number, size2: number) {\n    const max1 = min1 + size1;\n    const max2 = min2 + size2;\n\n    // TODO: none of this works when moving endWidget\n    // TODO: make sure this works with different shaped widgets\n    // if((this.between(min1, min2, max2) && this.between(max1, min2, max2)) ||\n    //    (this.between(min2, min1, max1) && this.between(max2, min1, max1))) {\n    if((min1 === min2 && max1 === max2) ||\n      (min1 > min2 && min1 < max2)) {\n      const intersection = max2 - min1;\n      if(intersection <= ARROW_MARGIN * 2) return null;\n      \n      return min1 + (intersection / 2);\n    } else if(max1 > min2 && max1 < max2) {\n      const intersection = max1 - min2;\n      if(intersection <= ARROW_MARGIN * 2) return null;\n\n      return max1 - (intersection / 2);\n    }\n\n    // no intersection\n    return null;\n  }\n\n  between(value: number, min: number, max: number) {\n    return value>min && value<max;\n  }\n  \n  getWidgetSideMidPosition(point: Point, widget: Widget) {\n    let newPoint: Point = {type: point.type, x: 0, y: 0};\n    switch(point.type) {\n      case \"top\":\n        newPoint.x = widget.x + widget.width / 2;\n        newPoint.y = widget.y;\n        break;\n      case \"right\":\n        newPoint.x = widget.x + widget.width;\n        newPoint.y = widget.y + widget.height / 2;\n        break;\n      case \"bottom\":\n        newPoint.x = widget.x + widget.width / 2;\n        newPoint.y = widget.y + widget.height;\n        break;\n      case \"left\":\n        newPoint.x = widget.x;\n        newPoint.y = widget.y + widget.height / 2;\n        break;\n    }\n\n    return newPoint;\n  }\n\n  render() {\n    const { cursor, selected, widgets } = this.state;\n    return (\n      <div>\n        <div\n          id=\"canvas\"\n          style={{ cursor }}\n          className={`App ${cursor === 'crosshair' ? 'connector-mode' : ''}`}\n          tabIndex={1}\n          onDoubleClick={this.handleDoubleClick}\n          onKeyDown={this.handleKeyDown}\n          onMouseMove={this.handleDrag}\n          onMouseDown={this.handleMouseDown}\n          onMouseUp={this.handleMouseUp}\n          ref={this.handleRef}\n          >\n          {Object.values(widgets).map((w) => {\n            if (w.type === \"sticky\") {\n              return (\n                <Sticky\n                cursor={cursor}\n                onMouseDown={this.handleStickyMouseDown}\n                onMouseUp={this.handleStickyMouseUp}\n                onDragStart={this.handleWidgetDragStart}\n                onMouseHover={this.handleMouseHoverSticky}\n                onMouseLeave={this.handleMouseLeaveSticky}\n                selected={!!selected?.includes(w.id)}\n                widget={w}\n                key={w.id}\n                />\n                );\n            }\n            \n            if (w.type === \"arrow\") {\n              return <Arrow widget={w} key={w.id} onDragPointStart={this.handleArrowPointDragStart}/>;\n            }\n            \n            return null;\n          })}\n        </div>\n        <div id=\"settings\" style={settingsStyle}>\n          <Checkbox\n            label=\"Stick To Convergent Widget Side\"\n            onCheckedChange={(checked) => this.setState({settings: { stickToConvergentWidgetSide: checked }})} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}