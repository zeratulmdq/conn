{"version":3,"sources":["widgets/Sticky.tsx","widgets/Arrow.tsx","settings/Checkbox.tsx","types.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Sticky","dragging","initialX","initialY","handleDragStart","e","props","onDragStart","widget","cursor","onMouseDown","id","handleMouseUp","onMouseUp","handleMouseHover","onMouseHover","handleMouseLeave","onMouseLeave","this","selected","x","y","width","height","onMouseMove","style","top","left","border","className","SNAPPING_POINT_WIDTH","React","Component","Arrow","state","draggingSegment","draggingSegmentNumber","getPoints","points","start","end","length","handleSegmentDragStart","index","onDragSegmentStart","clientX","clientY","normalizedIndex","setState","handleSegmentDragEnd","pos","position","onDragSegmentEnd","undefined","handleMouseMove","type","onDragSegment","connectionDot","key","direction","handleDragPointStart","onDragPointStart","stroke","fill","d","fillRule","transform","getRotation","transformOrigin","cx","cy","r","strokeWidth","dir","pathGenerator","isHorizontalStart","arrowPath","forEach","point","next","push","pointerEvents","withConnectionDot","path","console","log","xmlns","version","PureComponent","Checkbox","checked","handleOnChange","prevState","onCheckedChange","onChange","defaultChecked","label","stickyFactory","spec","uuid","arrowFactory","arrowType","chartBranch","initialIsHorizontal","toOrientation","arrowIsHorizontal","arrow","settingsStyle","borderStyle","backgroundColor","padding","App","ref","settings","stickToConvergentWidgetSide","initialId","endId","widgets","creatingNewArrow","mousePosition","mouseOverSticky","handleArrowPointDragStart","isStart","startPoint","initial","endPoint","handleStickyMouseDown","handleStickyMouseUp","stopPropagation","draggingArrow","startWidget","endWidget","setArrowChartBranch","cancelArrowCreation","handleDoubleClick","stickyWidth","ctrlKey","metaKey","s","handleDrag","deltaX","deltaY","draggingWidgets","map","arrows","Object","values","filter","w","connectedArrows","includes","reduce","acc","cur","updateArrow","a","movedWidgets","handleMouseHoverSticky","target","targetChanged","newWidgets","opositePoint","handleMouseLeaveSticky","handleWidgetDragStart","shiftKey","button","handleKeyDown","newCursor","selectedWidgetsId","prevWidgets","handleMouseDown","isDraggingArrow","getConnectedStickyPos","coords","STICKY_HEIGHT","draggingPoint","isChartSideArrow","updateArrowChartSide","handleRef","focus","getStartPointType","first","second","getEndPointType","reverse","handleDragSementStart","arrowId","horizontalDrag","isFirst","isLast","last","third","unalteredEndPoints","slice","unalteredPoints","handleDragSegment","handleDragSegmentEnd","splice","startType","endType","setIntermidiatePoints","p2","p3","p4","isHorizontalEnd","midDistance","middlePoint","segment2Position","convergenceTarget","convergenceSide","draggingWidget","chartBranchArrow","getSharedChartBranchArrow","assign","chartBranchArrows","draggingPosition","isDisconnectedArrow","connectedWidget","draggingX","draggingY","draggingWidth","getWidgetSideMidPosition","convergesOnEnd","convergencePoint","nonConvergencePoint","convergentWidget","nonConvergentWidget","draggingHeight","middleX","getIntersectionMiddle","middleY","startWidgetCenter","endWidgetCenter","distX","Math","abs","distY","distXToCenter","max","distYToCenter","min1","size1","min2","size2","max1","max2","intersection","ARROW_MARGIN","value","min","newPoint","tabIndex","onDoubleClick","onKeyDown","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bf99ccca.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Sticky.css\";\nimport { StickyWidget } from \"../types\";\n\nconst SNAPPING_POINT_WIDTH = 30;\nconst SNAPPING_POINT_CENTER = SNAPPING_POINT_WIDTH / 2;\n\ninterface PropTypes {\n  cursor: React.CSSProperties[\"cursor\"];\n  onMouseDown: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseUp: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onDragStart: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseHover: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onMouseLeave: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  selected: boolean;\n  widget: StickyWidget;\n}\n\nclass Sticky extends React.Component<PropTypes> {\n  dragging: boolean = false;\n  initialX: number = 0;\n  initialY: number = 0;\n\n  handleDragStart = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onDragStart, widget, cursor, onMouseDown } = this.props;\n    if (cursor === 'crosshair') onMouseDown(widget.id, e);\n    else onDragStart(widget.id, e);\n  };\n\n  handleMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onMouseUp, cursor, widget } = this.props;\n    if (cursor === 'crosshair') onMouseUp(widget.id, e);\n  };\n  \n  handleMouseHover = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onMouseHover, widget } = this.props;\n    onMouseHover(widget.id, e);\n  };\n\n  handleMouseLeave = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onMouseLeave, widget } = this.props;\n    onMouseLeave(widget.id, e);\n  };\n\n  render() {\n    const {\n      cursor,\n      selected,\n      widget: { x, y , width, height},\n    } = this.props;\n    return (\n      <div\n        onMouseUp={this.handleMouseUp}\n        onMouseDown={this.handleDragStart}\n        onMouseMove={this.handleMouseHover}\n        onMouseLeave={this.handleMouseLeave}\n        style={{\n          top: y,\n          left: x,\n          width: width,\n          height: height,\n          cursor: cursor === \"crosshair\" ? \"crosshair\" : \"pointer\",\n          border: selected ? \"2px solid blue\" : \"none\",\n        }}\n        className=\"Sticky\"\n        >\n        <div\n          className=\"snapping-point top\"\n          style={{\n            top: 0 - SNAPPING_POINT_CENTER,\n            left: (width / 2) - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"top\"\n        ></div>\n        <div\n          className=\"snapping-point right\"\n          style={{\n            top: (height / 2) - SNAPPING_POINT_CENTER,\n            left: width - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"right\"\n        ></div>\n        <div\n          className=\"snapping-point bottom\"\n          style={{\n            top: height - SNAPPING_POINT_CENTER,\n            left: (width / 2) - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"bottom\"\n        ></div>\n        <div\n          className=\"snapping-point left\"\n          style={{\n            top: (height / 2) - SNAPPING_POINT_CENTER,\n            left: 0 - SNAPPING_POINT_CENTER,\n            width: SNAPPING_POINT_WIDTH,\n            height: SNAPPING_POINT_WIDTH,\n          }}\n          id=\"left\"\n        ></div>\n        {/* <svg className=\"auto-affordance\">\n        <circle\n          cx={`${width / 2}`}\n          cy={`${height / 2}`}\n          r=\"5\"\n          stroke={'#1c7ff9'}\n          fill='none'\n          ></circle>\n          </svg> */}\n      </div>\n    );\n  }\n}\n\nexport default Sticky;\n","import React from \"react\";\nimport \"./Sticky.css\";\nimport \"./Arrow.css\";\nimport { ArrowWidget, PointType, Position } from \"../types\";\n\ntype Direction = 'horizontal' | 'vertical' | 'other';\n\ninterface PropTypes {\n  widget: ArrowWidget;\n  onDragPointStart: (id: string, e: React.MouseEvent, isStart: boolean) => void;\n  onDragSegmentEnd: (id: string, index: number, position?: number) => void;\n  onDragSegment: (id: string, index: number, position: Position) => void;\n  onDragSegmentStart: (id: string, index: number, position: Position) => void;\n}\n\ninterface State {\n  draggingSegment: boolean;\n  draggingSegmentNumber: number; // indicates which segment is being dragged\n  position?: number;\n}\n\nclass Arrow extends React.PureComponent<PropTypes, State> {\n  state: State = { draggingSegment: false, draggingSegmentNumber: -1 };\n\n  getPoints = () => {\n    const { points } = this.props.widget;\n    const start = points[0];\n    const end = points[points.length - 1];\n\n    return { start, end }\n  }\n\n  handleSegmentDragStart = (e: React.MouseEvent, index: number) => {\n    if (this.state.draggingSegment) return;\n    this.props.onDragSegmentStart(this.props.widget.id, index, { x: e.clientX, y: e.clientY })\n    const normalizedIndex = index === 0\n      ? 1\n      : index;\n    this.setState({ draggingSegment: true, draggingSegmentNumber: normalizedIndex })\n  }\n\n  handleSegmentDragEnd = () => {\n    if (!this.state.draggingSegment) return;\n    // Create chart branch after dragging middle segment\n    const pos = this.state.position;\n    this.props.onDragSegmentEnd(this.props.widget.id, this.state.draggingSegmentNumber, pos);\n    this.setState({ draggingSegment: false, draggingSegmentNumber: -1, position: undefined })\n  }\n\n  handleMouseMove = ({ clientX, clientY }: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n    const { draggingSegmentNumber } = this.state;\n    if(!this.state.draggingSegment) return;\n    \n    const { start } = this.getPoints();\n    \n    if ((start.type === 'right' || start.type === 'left') && draggingSegmentNumber % 2 !== 0 ) {\n      this.setState({ position: clientX });\n    } else {\n      this.setState({ position: clientY });\n    }\n    this.props.onDragSegment(this.props.widget.id, draggingSegmentNumber, { x: clientX, y: clientY });\n  }\n\n  connectionDot = (x: number, y: number, key: string, direction?: PointType) => {\n    const handleDragPointStart = (e: React.MouseEvent) => {\n      const { onDragPointStart, widget } = this.props;\n      onDragPointStart(widget.id, e, !direction);\n    }\n    if (!direction) {\n      return <circle\n        key={key}\n        cx={`${x}`}\n        cy={`${y}`}\n        r=\"2\"\n        stroke='transparent'\n        fill='black'\n        strokeWidth=\"6\"\n        onMouseDown={handleDragPointStart}\n        ></circle>\n    } else {\n      return <path\n        className='connectionDot'\n        stroke=\"#000\"\n        fill=\"#000\"\n        d={`M${x} ${y} L${x - 8} ${y + 3}V${y - 3}z`}\n        fillRule=\"evenodd\"\n        style={{ transform: `rotate(${this.getRotation(direction)}deg)`, transformOrigin: `${x}px ${y}px` }}\n        onMouseDown={handleDragPointStart}\n      />;\n    }\n  };\n  getRotation = (dir: PointType) => {\n    switch (dir) {\n      case 'right': return 180;\n      case 'left': return 0;\n      case 'top': return 90;\n      case 'bottom': return -90;\n    }\n  }\n\n  pathGenerator = () => {\n    const { points } = this.props.widget;\n    if (points.length < 2) return null;\n    // const { position } = this.state;\n    const start = points[0];\n    const end = points[points.length - 1];\n    const withConnectionDot = (arrowPath: JSX.Element[]) => [\n      this.connectionDot(start.x, start.y, '0'),\n      ...arrowPath,\n      this.connectionDot(end.x, end.y, '100', end.type),\n    ];\n    const isHorizontalStart = start.type === \"right\" || start.type === \"left\";\n    const cursor = (index: number) => (isHorizontalStart && index % 2 !== 0) || (!isHorizontalStart && index % 2 === 0) ? 'ew-resize' : 'ns-resize'\n    const arrowPath: JSX.Element[] = [];\n    points.forEach((point, index) => {\n      const onDragStart = (e: React.MouseEvent) => this.handleSegmentDragStart(e, index);\n      const next = points[index + 1];\n      if (!next) return;\n      arrowPath.push(<path\n        key={index + 1} // 0 is the first circle\n        d={`M ${point.x} ${point.y} L ${next.x} ${next.y}`}\n        stroke=\"black\"\n        strokeWidth=\"2\"\n        fill=\"none\"\n        style={{\n          cursor: cursor(index),\n          pointerEvents: 'auto'\n        }}\n        onMouseDown={onDragStart}\n      />)\n    })\n    return withConnectionDot([\n      ...arrowPath,\n    ]);\n  };\n\n  render() {\n    const path = this.pathGenerator();\n    if (!path) return null;\n    console.log(this.props.widget.points);\n    console.log(this.props.widget);\n    return (\n      <svg\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          pointerEvents: this.state.draggingSegment ? \"auto\" : \"none\",\n        }}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        version=\"1.1\"\n        className=\"Arrow\"\n        onMouseUp={this.handleSegmentDragEnd}\n        onMouseMove={this.handleMouseMove}\n      >\n        { path }\n      </svg>\n    );\n  }\n}\n\nexport default Arrow;","import React from \"react\";\r\n\r\ninterface PropTypes {\r\n  label: string;\r\n  onCheckedChange: (checked: boolean) => void;\r\n}\r\n\r\ninterface State {\r\n  checked: boolean;\r\n}\r\n\r\nclass Checkbox extends React.PureComponent<PropTypes, State> {\r\n  state: State = {\r\n    checked: false,\r\n  };\r\n\r\n  handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => { \r\n    this.setState((prevState) => {\r\n      const checked = !prevState.checked;\r\n      this.props.onCheckedChange(checked);\r\n      return {\r\n        checked\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{height: \"auto\"}}>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            style={{width: 15, height: 15}}\r\n            onChange={this.handleOnChange}\r\n            defaultChecked={this.state.checked} />\r\n          {this.props.label}\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checkbox;","import * as uuid from \"uuid\";\n\ninterface W {\n  height: number;\n  width: number;\n  id: string;\n  x: number;\n  y: number;\n}\n\nexport type PointType = \"bottom\" | \"top\" | \"left\" | \"right\";\nexport type Orientation = \"horizontal\" | \"vertical\";\nexport type ChartBranchType = \"oneToOne\" | \"oneToMany\" | \"manyToOne\";\n\nexport interface Point {\n  x: number;\n  y: number;\n  type?: PointType; // only first and last points have type\n}\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport interface ChartBranch {\n  position: number; // fixed position where arrows share the 2nd branch segment\n  convergenceSide?: PointType;  // side of the widget where the arrows converge (might be start or end widget depending of ChartBranchType)\n  type: ChartBranchType;\n}\n\n// initial: initial simple arrow, centered to the connected widgets on both ends, bent into 3 segments having the same length in both parallel segments.\n// chartBranch: created from an 'initial' arrow, centered to the connected widgets on both ends, bent into 3 segments, can share inital segment with other 'chartBranch' arrows, 1st segment size stays put.\n// chartSide: created from an 'initial' arrow, moved to the side of a group of 'chartBranch' arrows and can be on any point of both connected widgets.\nexport type ArrowType = \"initial\" | \"chartBranch\" | \"chartSide\";\n\nexport type StickyWidget = W & { type: \"sticky\" };\nexport type ArrowWidget = W & {\n  type: \"arrow\";\n  points: Point[];\n  start: string | null;\n  startPoint?: PointType | null; // when start point is manually set\n  endPoint?: PointType | null; // when end point is manually set\n  end: string | null;\n  arrowType: ArrowType;\n  chartBranch: ChartBranch | null;\n  initialIsHorizontal: boolean;\n};\n\nexport type Widget = StickyWidget | ArrowWidget;\n\nexport const stickyFactory = (spec: Partial<StickyWidget>): StickyWidget => ({\n  id: uuid.v4(),\n  height: spec.height ?? 100,\n  width: spec.width ?? 100,\n  type: \"sticky\",\n  x: spec.x || 0,\n  y: spec.y || 0,\n});\n\nexport const arrowFactory = (spec: Partial<ArrowWidget>): ArrowWidget => ({\n  id: uuid.v4(),\n  height: 0,\n  width: 0,\n  type: \"arrow\",\n  x: (spec.x || 0) - 25,\n  y: (spec.y || 0) - 25,\n  start: spec.start || null,\n  end: spec.end || null,\n  points: [],\n  arrowType: spec.arrowType || \"initial\",\n  chartBranch: null,\n  initialIsHorizontal: spec.initialIsHorizontal || true,\n});\n\nexport const toOrientation = (type: PointType) : Orientation => {\n  return type === \"left\" || type === \"right\" ? \"horizontal\" : \"vertical\";\n}\n","import React, { CSSProperties } from \"react\";\nimport \"./App.css\";\nimport Sticky from \"./widgets/Sticky\";\nimport Arrow from \"./widgets/Arrow\";\nimport Checkbox from \"./settings/Checkbox\";\nimport {\n  stickyFactory,\n  Widget,\n  StickyWidget,\n  ArrowWidget,\n  arrowFactory,\n  Point,\n  Position,\n  toOrientation,\n  ChartBranch,\n  PointType,\n} from \"./types\";\n\nexport const SNAPPING_DISTANCE = 10;\nexport const TOLERANCE = 10;\nexport const ARROW_MARGIN = 10;\nexport const TWO_SEGMENT_ARROW_MIN = 20;\nexport const STICKY_HEIGHT = 100;\n\nconst arrowIsHorizontal = (arrow: ArrowWidget) =>\n  arrow.points[0].type === 'left' || arrow.points[0].type === 'right';\n\nexport const settingsStyle: React.CSSProperties = {\n  position: \"absolute\",\n  top: 0,\n  width:\"auto\",\n  height: \"auto\",\n  borderStyle: \"solid\",\n  backgroundColor: \"lightgray\",\n  padding: 10,\n};\n\ninterface State {\n  settings:{\n    stickToConvergentWidgetSide: boolean;\n  };\n  cursor: React.CSSProperties[\"cursor\"];\n  dragging: string[] | null;\n  initialId: string | null;\n  endId: string | null;\n  selected: string[] | null;\n  widgets: Record<string, Widget>;\n  creatingNewArrow: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  ref: HTMLDivElement | null = null;\n\n  state: State = {\n    settings :{\n      stickToConvergentWidgetSide: false,\n    },\n    cursor: \"auto\",\n    dragging: null,\n    initialId: null,\n    endId: null,\n    selected: null,\n    widgets: {},\n    creatingNewArrow: false,\n  };\n  mousePosition: Position | null = null;\n  mouseOverSticky: boolean = false;\n\n  cancelArrowCreation() {\n    this.setState((prevState) => {\n      if(prevState.dragging && prevState.dragging.length) {\n        // delete dragging arrow if any\n        const draggingWidget = { ...prevState.widgets[prevState.dragging[0]] };\n        if(draggingWidget.type === \"arrow\") {\n          const prevWidgets = prevState.widgets;\n          delete prevWidgets[draggingWidget.id];\n          return {\n            ...prevState,\n            dragging: null,\n            initialId: null,\n            endId: null,\n            cursor: \"auto\",\n            widgets: { ...prevWidgets },\n          }\n        }\n      }\n\n      return {\n        ...prevState,\n        dragging: null,\n        initialId: null,\n        endId: null,\n        cursor: \"auto\",\n      }\n    });\n  }\n\n  handleArrowPointDragStart = (id: string, e: React.MouseEvent, isStart: boolean) => {\n    if (isStart) {\n      const end = (this.state.widgets[id] as ArrowWidget).end;\n      this.setState((prevState) => (\n        {\n          ...prevState,\n          cursor: 'crosshair',\n          dragging: [id],\n          endId: end,\n          initialId: null,\n          widgets: {\n            ...prevState.widgets,\n            [id]: {\n              ...prevState.widgets[id],\n              start: null,\n              startPoint: null,\n              initialIsHorizontal: arrowIsHorizontal(prevState.widgets[id] as ArrowWidget),\n            }\n          },\n          creatingNewArrow: false,\n        }\n      ));\n    } else {\n      const initial = (this.state.widgets[id] as ArrowWidget).start;\n      this.setState((prevState) => (\n        {\n          ...prevState,\n          cursor: 'crosshair',\n          dragging: [id],\n          initialId: initial,\n          endId: null,\n          widgets: {\n            ...prevState.widgets,\n            [id]: {\n              ...prevState.widgets[id],\n              end: null,\n              endPoint: null,\n              initialIsHorizontal: arrowIsHorizontal(prevState.widgets[id] as ArrowWidget),\n            }\n          },\n          creatingNewArrow: false,\n        }\n      ));\n    }\n  }\n\n  handleStickyMouseDown = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    if (this.state.cursor !== \"crosshair\")\n      return;\n    // start arrow creation\n    if (!this.state.dragging) {\n      // create Arrow for dragging without end widget\n      this.setState((prevState) => {\n        const arrow = {\n          ...arrowFactory({ start: id, end: null }),\n        };\n\n        return {\n          ...prevState,\n          initialId: id,\n          endId: null,\n          widgets: {\n            ...prevState.widgets,\n            [arrow.id]: arrow,\n          },\n          dragging: [arrow.id],\n          creatingNewArrow: true,\n        };\n      });\n\n      return;\n    }\n  }\n\n  handleStickyMouseUp = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation(); // avoid executing `handleMouseUp`\n    if (this.state.initialId === id || this.state.endId === id) {\n      this.cancelArrowCreation();\n      return;\n    }\n\n    if (this.state.cursor !== \"crosshair\")\n      return;\n    \n    this.setState((prevState) => {\n      if (!prevState.dragging)\n        return { ...prevState };\n      \n      const draggingArrow = { ...prevState.widgets[prevState.dragging[0]] } as ArrowWidget;\n      const startWidget = prevState.widgets[draggingArrow.start ?? id];\n      const endWidget = prevState.widgets[draggingArrow.end ?? id];\n      \n      // update Arrow start/end and connect it to both widgets\n      draggingArrow.start = startWidget.id;\n      draggingArrow.end = endWidget.id;\n      draggingArrow.initialIsHorizontal = arrowIsHorizontal(draggingArrow);\n      // update chart branches state (for both start and end arrows)\n      this.setArrowChartBranch(draggingArrow as ArrowWidget, this.state.widgets, false);\n\n      return {\n        ...prevState,\n        cursor: \"auto\",\n        dragging: null,\n        initialId: null,\n        endId: null,\n        widgets: {\n          ...prevState.widgets,\n          [draggingArrow.id]: draggingArrow,\n        },\n        creatingNewArrow: false,\n      };\n    });\n  };\n\n  handleDoubleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    // create rectangular stickies while holding CTRL down\n    const stickyWidth = (e.ctrlKey || e.metaKey) ? 150 : 100;\n    const s = stickyFactory({ x: e.clientX - (stickyWidth / 2), y: e.clientY - 50, width: stickyWidth });\n    this.setState((prevState) => ({\n      selected: [s.id],\n      widgets: {\n        ...prevState.widgets,\n        [s.id]: s,\n      },\n    }));\n  };\n\n  handleDrag = (e: React.MouseEvent<HTMLDivElement>) => {\n    const deltaX = this.mousePosition ? e.clientX - this.mousePosition.x : e.clientX;\n    const deltaY = this.mousePosition ? e.clientY - this.mousePosition.y : e.clientY;\n    this.mousePosition = {x: e.clientX, y: e.clientY };\n    const { dragging, widgets } = this.state;\n\n    if (!dragging)\n      return;\n    const draggingWidgets = dragging.map(id => widgets[id]);\n    if(draggingWidgets.length > 1 || draggingWidgets[0].type === \"sticky\") {\n      const arrows = Object.values(widgets).filter(w => w.type === \"arrow\") as ArrowWidget[];\n      // update connected arrows\n      const connectedArrows = Object.values(widgets)\n      .filter(\n        (w) =>\n          w.type === \"arrow\" &&\n          dragging &&\n          ((w.start && dragging.includes(w.start)) ||\n          (w.end && dragging.includes(w.end))))\n      .reduce((acc, cur) => {\n        const arrow = cur as ArrowWidget;\n        this.updateArrow(arrow);\n        if (dragging &&\n          ((arrow.start && dragging.includes(arrow.start)) &&\n          (arrow.end && dragging.includes(arrow.end))) &&\n          arrow.chartBranch) {\n            if (arrow.chartBranch.type === 'oneToOne') {\n              arrow.chartBranch.position = arrow.chartBranch.position + (arrowIsHorizontal(arrow) ? deltaX : deltaY);\n            } else {\n              arrows.forEach(a => {\n                if (a.chartBranch && a.chartBranch?.position === arrow.chartBranch?.position) {\n                  if ((a.end && !dragging.includes(a.end)) || (a.start && !dragging.includes(a.start))) {\n                    return;\n                  } else {\n                    arrow.chartBranch.position = arrow.chartBranch.position + (arrowIsHorizontal(arrow) ? deltaX : deltaY);\n                  }\n                }\n              })\n            }\n          }\n        \n        return {\n          ...acc,\n          [arrow.id]: {\n            ...arrow,\n          },\n        };\n      }, {} as Record<string, Widget>);\n  \n      const movedWidgets: Record<string, Widget> = draggingWidgets.reduce((acc, cur) => {\n        return {\n          ...acc,\n          [cur.id]: {\n            ...cur,\n            x: cur.x + deltaX,\n            y: cur.y + deltaY,\n          }\n        };\n      }, {});\n      this.setState({\n        widgets: {\n          ...widgets,\n          ...movedWidgets,\n          ...connectedArrows,\n        }\n      });\n    } else if (draggingWidgets[0].type === \"arrow\" && !this.mouseOverSticky) {\n      const draggingArrow = { ...draggingWidgets[0] };\n      // update arrow dragged end\n      if (!draggingArrow.end || !draggingArrow.start)\n        this.updateArrow(draggingArrow, this.mousePosition);\n      \n      this.setState({\n        widgets: {\n          ...widgets,\n          [draggingArrow.id]: draggingArrow,\n        },\n      });\n    }\n  };\n\n  handleMouseHoverSticky = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    this.mouseOverSticky = true;\n    const target = (e.target as Element).id || null;\n    const { dragging, widgets } = this.state;\n    if (!dragging) return;\n    // stick to widget when hovering while dragging\n    const draggingWidgets = dragging.map(id => widgets[id]);\n    if(draggingWidgets.length === 1 &&\n      draggingWidgets[0].type === \"arrow\") {\n        const draggingArrow = { ...draggingWidgets[0] };\n        // update Arrow start/end and connect it to both widgets\n        const isStart = !!this.state.endId;\n        const targetChanged = isStart\n          ? draggingArrow.startPoint !== target && draggingArrow.start === id\n          : draggingArrow.endPoint !== target && draggingArrow.end === id;\n        if ((draggingArrow.start !== id &&\n          draggingArrow.end !== id) || targetChanged)\n          {\n            // connect to widget and update arrow\n            draggingArrow.start = draggingArrow.start ?? id;\n            draggingArrow.end = draggingArrow.end ?? id;\n            console.log('creatingNewArrow: ', this.state.creatingNewArrow);\n            if (!this.state.creatingNewArrow) {\n              if (isStart) {\n                draggingArrow.startPoint = target !== \"auto\" ? target as PointType : null;\n                draggingArrow.arrowType = 'initial';\n                draggingArrow.chartBranch = null;\n              } else {\n                draggingArrow.endPoint = target !== \"auto\" ? target as PointType : null;\n                draggingArrow.arrowType = 'initial';\n                draggingArrow.chartBranch = null;\n              }\n            }\n            this.updateArrow(draggingArrow);\n            const newWidgets = { ...widgets, [draggingArrow.id]: draggingArrow };\n            this.setState({\n              widgets: newWidgets,\n            });\n          }\n    };\n  }\n\n  opositePoint = (point: PointType) => {\n    switch (point) {\n      case 'top': return 'bottom';\n      case 'bottom': return 'top';\n      case 'right': return 'left';\n      case 'left': return 'right';\n    }\n  }\n\n  handleMouseLeaveSticky = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    this.mouseOverSticky = false;\n    const { dragging, widgets } = this.state;\n    if (!dragging) return;\n    const draggingWidgets = dragging.map(id => widgets[id]);\n    if (draggingWidgets.length === 1 &&\n      draggingWidgets[0].type === \"arrow\" &&\n      draggingWidgets[0].start && draggingWidgets[0].end &&\n      (draggingWidgets[0].start === id ||\n      draggingWidgets[0].end === id)) {\n      // disconnect from widget and update arrow\n      const draggingArrow = { ...draggingWidgets[0] };\n      draggingArrow.startPoint = draggingArrow.start === id ? null : draggingArrow.startPoint;\n      draggingArrow.endPoint = draggingArrow.end === id ? null : draggingArrow.endPoint;\n      draggingArrow.start = draggingArrow.start === id ? null : draggingArrow.start;\n      draggingArrow.end = draggingArrow.end === id ? null : draggingArrow.end;\n      \n      this.setState({\n        widgets: {\n          ...widgets,\n          [draggingArrow.id]: draggingArrow,\n        },\n      });\n    }\n    if (draggingWidgets.length === 1 && draggingWidgets[0].type === \"arrow\" && ((draggingWidgets[0].start === id && !draggingWidgets[0].end) || (draggingWidgets[0].end === id && !draggingWidgets[0].start))) {\n      const draggingArrow = { ...draggingWidgets[0] };\n      const widget = this.state.widgets[id];\n      const x = e.clientX;\n      const y = e.clientY;\n      const isHorizontalStart = y > widget.y && y < widget.y + widget.height;\n      const startPoint = isHorizontalStart\n        ? x <= widget.x\n          ? 'left'\n          : 'right'\n        : y <= widget.y\n          ? 'top'\n          : 'bottom';\n      const endPoint = this.opositePoint(startPoint);\n\n      // set initial points\n      this.setState({\n        widgets: {\n          ...widgets,\n          [draggingArrow.id]: {\n            ...draggingArrow,\n            points: [{ x, y, type: startPoint }, { x, y, type: endPoint }],\n            initialIsHorizontal: isHorizontalStart,\n          },\n        },\n      });\n    }\n  }\n\n  handleWidgetDragStart = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    const { shiftKey } = e;\n    e.stopPropagation();\n\n    if (e.button !== 0)\n      return;\n\n    if(this.state.dragging)\n      return;\n\n    const selected = (this.state.selected && (this.state.selected.includes(id) || shiftKey))\n    ? !this.state.selected.includes(id)\n      ? [...this.state.selected, id]\n      : this.state.selected\n    : [id];\n    const dragging = (this.state.selected && this.state.selected.includes(id)) ? this.state.selected : [id];\n\n    this.setState({\n      dragging,\n      selected,\n    });\n  };\n\n  handleKeyDown = (e: React.KeyboardEvent) => {\n    if(e.key === \"c\" || e.key === \"C\") {\n      const newCursor = this.state.cursor === \"auto\" ? \"crosshair\" : \"auto\";\n      if(newCursor === \"auto\") {\n        this.cancelArrowCreation();\n      } else {\n        this.setState({\n          cursor: newCursor,\n        });\n      }\n    }\n\n    if ((e.key === \"Backspace\" || e.key === \"Delete\") && !!this.state.selected) {\n      this.setState((prevState) => {\n        const selectedWidgetsId = prevState.selected || null;\n        const prevWidgets = prevState.widgets;\n        selectedWidgetsId?.forEach(id => {\n          Object.values(prevWidgets).forEach((w) => {\n            if (w.type === \"arrow\" && (w.start === id || w.end === id))\n              delete prevWidgets[w.id];\n          });\n          delete prevWidgets[id]\n        });\n\n        return {\n          ...prevState,\n          selected: null,\n          widgets: { ...prevWidgets },\n        };\n      });\n    }\n  };\n\n  handleMouseDown = () => {\n    this.setState({ selected: null });\n  };\n\n  // true when creating an arrow, or when dragging arrow point\n  isDraggingArrow = () => {\n    const draggingWidgets = this.state.dragging && this.state.dragging.map(id => this.state.widgets[id]);\n    return draggingWidgets && draggingWidgets.length === 1 && draggingWidgets[0].type === \"arrow\";\n  }\n\n  getConnectedStickyPos = (point: Point, stickyWidth: number) => {\n    let coords = { x: 0, y: 0 };\n    switch(point.type) {\n      case \"top\":\n        coords.x = point.x - stickyWidth / 2;\n        coords.y = point.y;\n        break;\n      case \"right\":\n        coords.x = point.x - stickyWidth;\n        coords.y = point.y - STICKY_HEIGHT / 2;\n        break;\n      case \"bottom\":\n        coords.x = point.x - stickyWidth / 2;\n        coords.y = point.y - STICKY_HEIGHT;\n        break;\n      case \"left\":\n        coords.x = point.x;\n        coords.y = point.y - stickyWidth / 2;\n        break;\n    }\n\n    return coords;\n  }\n\n  handleMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n    if(this.isDraggingArrow()) {\n      if (this.state.initialId || this.state.endId) {\n        if (this.state.endId) {\n          this.cancelArrowCreation();\n          return;\n        }\n        // sticky auto-creation after dropping an arrow in the canvas\n        const stickyWidth = (e.ctrlKey || e.metaKey) ? 150 : 100;\n        const draggingWidgets = this.state.dragging && this.state.dragging.map(id => this.state.widgets[id]);\n        const draggingArrow = draggingWidgets && { ...draggingWidgets[0] as ArrowWidget };\n        const draggingPoint = draggingArrow && draggingArrow.points[draggingArrow.points.length - 1];\n        if (!draggingPoint || !draggingArrow) return;\n        const pos = this.getConnectedStickyPos(draggingPoint, stickyWidth);\n        const s = stickyFactory({ ...pos, width: stickyWidth });\n        draggingArrow.end = s.id;\n        draggingArrow.initialIsHorizontal = arrowIsHorizontal(draggingArrow);\n        // update chart branches state (for both start and end arrows)\n        this.setArrowChartBranch(draggingArrow as ArrowWidget, this.state.widgets, false);\n        if (draggingArrow) {\n          this.setState({\n            selected: [s.id],\n            dragging: null,\n            initialId: null,\n            endId: null,\n            cursor: \"auto\",\n            widgets: {\n              ...this.state.widgets,\n              [s.id]: s,\n              [draggingArrow.id]: {\n                ...draggingArrow,\n              }\n            },\n          });\n        }\n      }\n      return;\n    }\n    this.setState((prevState) => {\n      \n      if (!prevState.dragging)\n        return { ...prevState };\n      \n      const connectedArrows = Object.values(prevState.widgets)\n      .filter(\n        (w) =>\n          w.type === \"arrow\" &&\n          (((w.start && prevState.dragging?.includes(w.start)) || (w.end && prevState.dragging?.includes(w.end))))\n      ).map(w=> w as ArrowWidget)\n      .reduce((acc, arrow) => {\n\n        // stick to your branch side\n        if(!prevState.settings.stickToConvergentWidgetSide || arrow.arrowType !== \"chartBranch\") {\n          if(this.isChartSideArrow(arrow, prevState.widgets)) {\n            const startWidget = prevState.widgets[arrow.start || \"\"] as StickyWidget;\n            const endWidget = prevState.widgets[arrow.end || \"\"] as StickyWidget;\n            if(this.updateArrowChartSide(arrow, startWidget, endWidget)) {\n              arrow.arrowType = \"chartSide\";\n            }\n          }\n          \n          // update chart branches state (for both start and end arrows)\n          this.setArrowChartBranch(arrow, prevState.widgets, false);\n        }\n          \n        // update initial axis\n        arrow.initialIsHorizontal = arrowIsHorizontal(arrow);\n\n        return {\n          ...acc,\n          [arrow.id]: {\n            ...arrow,\n          },\n        };\n      }, {} as Record<string, Widget>);\n      \n      return {\n        dragging: null,\n        widgets: {\n          ...prevState.widgets,\n          ...connectedArrows,\n        },\n      };\n    });\n  };\n\n  handleRef = (ref: HTMLDivElement) => {\n    this.ref = ref;\n    // start focused to listen for key presses\n    if(this.ref) {\n      this.ref.focus();\n    }\n  }\n\n  getStartPointType = (points: Point[]) => {\n    if (points.length < 2) return undefined;\n    const first = points[0];\n    const second = points[1];\n    if (first.x < second.x) return 'right';\n    if (first.x > second.x) return 'left';\n    if (first.y < second.y) return 'bottom';\n    return 'top';\n  }\n\n  getEndPointType = (points: Point[]) => {\n    const reverse = [...points].reverse();\n    return this.getStartPointType(reverse);\n  }\n\n  handleDragSementStart = (arrowId: string, index: number, pos: Position) => {\n    const arrow = this.state.widgets[arrowId] as ArrowWidget;\n    const horizontalDrag = arrowIsHorizontal(arrow)\n      ? index % 2 !== 0\n      : index % 2 === 0;\n    const isFirst = index === 0;\n    const isLast = index === arrow.points.length - 2;\n    // if it's the first or last segment, create a new node\n    if (index === 0 || index === arrow.points.length - 2) {\n      if (isFirst && isLast) {\n        const first = arrow.points[0];\n        const last = arrow.points[1];\n        if (horizontalDrag) {\n          const second = { x: pos.x, y: first.y };\n          const third = { x: pos.x, y: last.y };\n          arrow.points = [{ ...first, type: 'right' }, second, third, { ...last, type: 'right' }];\n          // arrow.startPoint = 'right';\n          // arrow.endPoint = 'right';\n        } else {\n          const second = { x: first.x, y: pos.y };\n          const third = { x: last.x, y: pos.y };\n          arrow.points = [{ ...first, type: 'top' }, second, third, { ...last, type: 'top' }];\n          // arrow.startPoint = 'top';\n          // arrow.endPoint = 'top';\n        }\n      } else if (isFirst) {\n        const unalteredEndPoints = arrow.points.slice(2);\n        const first = arrow.points[0];\n        if (horizontalDrag) {\n          const second = { x: pos.x, y: first.y };\n          const third = { x: pos.x, y: arrow.points[1].y };\n          arrow.points = [{ ...first, type: 'right' }, second, third, ...unalteredEndPoints];\n          // arrow.startPoint = 'right';\n        } else {\n          const second = { x: first.x, y: pos.y };\n          const third = { x: arrow.points[1].x, y: pos.y };\n          arrow.points = [{ ...first, type: 'top' }, second, third, ...unalteredEndPoints];\n          // arrow.startPoint = 'top';\n        }\n      } else if (isLast) {\n        const unalteredPoints = arrow.points.slice(0, arrow.points.length - 2);\n        const last = arrow.points[arrow.points.length - 1];\n        if (last.type === 'right' || last.type === 'left') {\n          const second = { x: last.x, y: pos.y };\n          const third = { x: arrow.points[arrow.points.length - 2].x, y: pos.y };\n          arrow.points = [...unalteredPoints, third, second, { ...last, type: 'top' }];\n          // arrow.endPoint = 'top';\n        } else {\n          const second = { x: pos.x, y: last.y };\n          const third = { x: pos.x, y: arrow.points[arrow.points.length - 2].y };\n          arrow.points = [...unalteredPoints, third, second, { ...last, type: 'right' }];\n          // arrow.endPoint = 'right';\n        }\n      }\n      this.setState({ widgets: { ...this.state.widgets, [arrowId]: arrow} });\n    }\n  }\n\n  handleDragSegment = (arrowId: string, index: number, pos: Position) => {\n    const arrow = this.state.widgets[arrowId] as ArrowWidget;\n    const horizontalDrag = arrowIsHorizontal(arrow)\n      ? index % 2 !== 0\n      : index % 2 === 0;\n    // if it's the first or last segment, create a new node\n    if (index === 0 || index === arrow.points.length - 1) {\n      return;\n    } else {\n      if (horizontalDrag) {\n        arrow.points[index].x = pos.x;\n        arrow.points[index + 1].x = pos.x;\n      } else {\n        arrow.points[index].y = pos.y;\n        arrow.points[index + 1].y = pos.y;\n      }\n    }\n    this.setState({ widgets: { ...this.state.widgets, [arrowId]: arrow} });\n  }\n\n  handleDragSegmentEnd = (arrowId: string, index: number, position?: number) => {\n    const arrow = this.state.widgets[arrowId] as ArrowWidget;\n    const { points } = arrow;\n    // if (index === 1) {\n    //   arrow.points[0].type = startType;\n    //   // arrow.startPoint = startType;\n    //   if (points.length === 3) { // this means it's also last\n    //     arrow.points[points.length - 1].type = endType;\n    //     // arrow.endPoint = endType;\n    //   }\n    // } else if (index === points.length - 3) {\n    //   arrow.points[points.length - 1].type = endType;\n    //   // arrow.endPoint = endType;\n    // }\n    const horizontalDrag = arrowIsHorizontal(arrow)\n      ? index % 2 !== 0\n      : index % 2 === 0;\n    // merge segments if they are in the same axis\n    if (horizontalDrag) {\n      if (arrow.points[index].x === arrow.points[index - 1].x) {\n        arrow.points.splice(index, 2);\n      } else if (arrow.points[index + 1].x === arrow.points[index + 2].x) {\n        arrow.points.splice(index + 1, 2);\n      }\n    } else {\n      if (arrow.points[index].y === arrow.points[index - 1].y) {\n        arrow.points.splice(index, 2);\n      } else if (arrow.points[index + 1].y === arrow.points[index + 2].y) {\n        arrow.points.splice(index + 1, 2);\n      }\n    }\n    const startType = this.getStartPointType(points);\n    const endType = this.getEndPointType(points);\n    console.log('startType: ', startType);\n    arrow.points[0].type = startType;\n    arrow.points[points.length - 1].type = endType;\n    this.setState({ widgets: { ...this.state.widgets, [arrowId]: arrow} });\n    if (index !== 1) return; // only second segment creates a chart branch\n    this.setArrowChartBranch(arrow, this.state.widgets, false, position);\n  }\n\n  // finds if this arrow should be a part of a branchChart\n  setArrowChartBranch(arrow: ArrowWidget, widgets: Record<string, Widget>, dragging: boolean, position?: number) {\n    if(!this.state.settings.stickToConvergentWidgetSide && arrow.chartBranch) {\n      // don't recalculate if chartBranchSide and position didn't change\n      let convergencePoint = arrow.chartBranch.type === \"manyToOne\" ? arrow.points[arrow.points.length - 1] : arrow.points[0];\n      if(convergencePoint.type === arrow.chartBranch.convergenceSide && (!position || arrow.chartBranch.position === position)) {\n        console.log('not recalculating chart branch');\n        return;\n      }\n    }\n    \n    const chartBranchArrow = this.getSharedChartBranchArrow(arrow, widgets);\n    // don't force chartBranching while dragging on an empty side of the origin/end widget\n    // or if arrow has explicitly set start or end point\n    if((dragging && !chartBranchArrow) || arrow.points.length === 2) {\n      arrow.arrowType = 'initial';\n      arrow.chartBranch = null;\n      console.log('setting chart branch null');\n      return;\n    }\n\n    arrow.arrowType = \"chartBranch\";\n    \n    if(chartBranchArrow && chartBranchArrow.chartBranch && !position) {\n      // console.log('become part of an existing chartBranch');\n      // become part of an existing chartBranch\n      if(chartBranchArrow.chartBranch.type === \"oneToOne\") {\n        // if we are just adding the 2nd arrow to this chartBranch, update type and convergenceSide beforehand\n        if(chartBranchArrow.start === arrow.start ){\n          chartBranchArrow.chartBranch.type = \"oneToMany\";\n          chartBranchArrow.chartBranch.convergenceSide = arrow.points[0].type;\n        } else {\n          chartBranchArrow.chartBranch.type = \"manyToOne\";\n          chartBranchArrow.chartBranch.convergenceSide = arrow.points[arrow.points.length - 1].type;\n        }\n      }\n      arrow.chartBranch = Object.assign({}, chartBranchArrow.chartBranch);\n    } else if ((!arrow.startPoint && !arrow.endPoint) || position) {\n      // new lonely charBranch arrow\n      console.log('new lonely charBranch arrow');\n      let chartBranch: ChartBranch = {\n        position: position || 0,\n        convergenceSide: arrow.points[0].type,\n        type: \"oneToOne\"\n      };\n      // on new branch, set 2nd segment position to half the distance in X or Y depending on orientation\n      // unless explicit position is passed as parameter\n      if (!position) {\n        console.log('convergenceSide: ', chartBranch.convergenceSide);\n        if(toOrientation(chartBranch.convergenceSide || 'right') === \"horizontal\") {\n          chartBranch.position = arrow.points[0].x + ((arrow.points[arrow.points.length - 1].x - arrow.points[0].x) / 2);\n        } else {\n          chartBranch.position = arrow.points[0].y + ((arrow.points[arrow.points.length - 1].y - arrow.points[0].y) / 2);\n        }\n      }\n      arrow.chartBranch = chartBranch;\n    }\n  }\n\n  // find another arrow that share same origin or end point and already has chartBranch defined\n  getSharedChartBranchArrow(arrow: ArrowWidget, widgets: Record<string, Widget>) {\n    const chartBranchArrows = Object.values(widgets)\n    .filter(\n      (w) =>\n      w.type === \"arrow\" &&\n      w.id !== arrow.id &&\n      w.arrowType === \"chartBranch\" &&\n      w.chartBranch &&\n      ((w.start === arrow.start && w.points[0].type === arrow.points[0].type) ||\n       (w.end === arrow.end && w.points[w.points.length - 1].type === arrow.points[arrow.points.length - 1].type))\n    ).map(w => w as ArrowWidget);\n    \n    return chartBranchArrows.length > 0 ? chartBranchArrows[0] : null;\n  }\n\n  // updates arrow points (start/end) in both position and type\n  // draggingPosition is undefined when the arrow is connected to a start and\n  // end widget\n  // if it's not undefined, it means it's a disconnected arrow\n  updateArrow(arrow: ArrowWidget, draggingPosition?: Position) {\n    const { widgets } = this.state;\n    const startWidget = widgets[arrow.start || \"\"];\n    const endWidget = widgets[arrow.end || \"\"];\n    const isDisconnectedArrow = !!draggingPosition;\n\n    const connectedWidget = startWidget ? startWidget : endWidget;\n    if (!connectedWidget) return;\n\n    const points = [...arrow.points];\n\n    // stick to your branch side\n    if(!this.state.settings.stickToConvergentWidgetSide || arrow.arrowType !== \"chartBranch\") {\n      // change connections depending on positioning\n      const draggingX = draggingPosition ? draggingPosition.x : endWidget.x;\n      const draggingY = draggingPosition ? draggingPosition.y : endWidget.y;\n      const draggingWidth = draggingPosition ? 0 : endWidget.width;\n      if (points.length < 5) {\n        if (connectedWidget.x + connectedWidget.width + TOLERANCE < draggingX) {\n          points[0].type = arrow.startPoint || (startWidget ? \"right\" : \"left\");\n          points[points.length - 1].type = arrow.endPoint || (startWidget ? \"left\" : \"right\");\n        } else if (draggingX + draggingWidth + TOLERANCE < connectedWidget.x) {\n          points[0].type = arrow.startPoint || (startWidget ? \"left\" : \"right\");\n          points[points.length - 1].type = arrow.endPoint || (startWidget ? \"right\" : \"left\");\n        } else if (draggingY > connectedWidget.y + connectedWidget.height + TOLERANCE) {\n          points[0].type = arrow.startPoint || (startWidget ? \"bottom\" : \"top\");\n          points[points.length - 1].type = arrow.endPoint || (startWidget ? \"top\" : \"bottom\");\n        } else {\n          points[0].type = arrow.startPoint || (startWidget ? \"top\" : \"bottom\");\n          points[points.length - 1].type = arrow.endPoint || (startWidget ? \"bottom\" : \"top\");\n        }\n      }\n\n      points[0] = startWidget ? this.getWidgetSideMidPosition(points[0], startWidget) : {...points[0], x: (draggingPosition as Position).x, y: (draggingPosition as Position).y};\n      points[points.length - 1] = endWidget ? this.getWidgetSideMidPosition(points[points.length - 1], endWidget) : {...points[points.length - 1], x: (draggingPosition as Position).x, y: (draggingPosition as Position).y};\n      arrow.points = points;\n      \n      // check if being a chartSide arrow\n      if(this.isChartSideArrow(arrow, widgets) && points.length < 5) {\n        console.log('IS CHART SIDE ARROW');\n        if (isDisconnectedArrow) {\n          this.updateArrowChartSide(arrow, connectedWidget, endWidget, draggingPosition, !!endWidget);\n        } else {\n          this.updateArrowChartSide(arrow, startWidget, endWidget);\n        }\n      }\n\n      // snap the two points while creating an arrow\n      if (isDisconnectedArrow && arrow.points.length < 5) {\n        const points = arrow.points;\n        if (points[0].type === 'left' || points[0].type === 'right') {\n          if (points[points.length - 1].y <= points[0].y + SNAPPING_DISTANCE && points[points.length - 1].y >= points[0].y - SNAPPING_DISTANCE) {\n            points[points.length - 1].y = points[0].y;\n          }\n        } else if (points[0].type === 'top' || points[0].type === 'bottom') {\n          if (points[points.length - 1].x <= points[0].x + SNAPPING_DISTANCE && points[points.length - 1].x >= points[0].x - SNAPPING_DISTANCE) {\n            points[points.length - 1].x = points[0].x;\n          }\n        }\n      }\n      \n      // check if being part of a chartBranch\n      this.setArrowChartBranch(arrow, widgets, true);\n    }\n    \n    // update chartBranch arrows\n    // this is mainly used for a branched arrow whose widget is \"behind\" the branch fixed position \n    if(arrow.chartBranch && startWidget && endWidget && points.length < 5) {\n      // on \"oneOnOne\" we consider the start widget as the convergent one\n      const convergesOnEnd = arrow.chartBranch.type === \"manyToOne\"; \n      let convergencePoint = convergesOnEnd ? arrow.points[arrow.points.length - 1] : arrow.points[0];\n      let nonConvergencePoint = convergesOnEnd ? arrow.points[0] : arrow.points[arrow.points.length - 1];\n      const convergentWidget = convergesOnEnd ? endWidget : startWidget;\n      const nonConvergentWidget = convergesOnEnd ? startWidget : endWidget;\n      \n      convergencePoint = this.getWidgetSideMidPosition(convergencePoint, convergentWidget);\n      nonConvergencePoint = this.getWidgetSideMidPosition(nonConvergencePoint, nonConvergentWidget);\n    \n      if(toOrientation(arrow.chartBranch.convergenceSide || 'right') === \"horizontal\") {\n        // if inside, use 2-segment arrow\n        if(arrow.chartBranch.position >= nonConvergentWidget.x && arrow.chartBranch.position <= nonConvergentWidget.x + nonConvergentWidget.width) {\n          nonConvergencePoint.x = arrow.chartBranch.position;\n          nonConvergencePoint.y = (nonConvergentWidget.y + nonConvergentWidget.height/2) > convergencePoint.y ? nonConvergentWidget.y : nonConvergentWidget.y + nonConvergentWidget.height;\n        // otherwise use regular 3-segment arrow but make sure it connects to the correct side\n        } else {\n          nonConvergencePoint.type = arrow.chartBranch.position < nonConvergentWidget.x ? \"left\" : \"right\";\n          nonConvergencePoint = this.getWidgetSideMidPosition(nonConvergencePoint, nonConvergentWidget);\n        }\n      } else {  // vertical\n        // if inside, use 2-segment arrow\n        if(arrow.chartBranch.position >= nonConvergentWidget.y && arrow.chartBranch.position <= nonConvergentWidget.y + nonConvergentWidget.height) {\n          nonConvergencePoint.x = (nonConvergentWidget.x + nonConvergentWidget.width/2) > convergencePoint.x ? nonConvergentWidget.x : nonConvergentWidget.x + nonConvergentWidget.width;\n          nonConvergencePoint.y = arrow.chartBranch.position;\n        // otherwise use regular 3-segment arrow but make sure it connects to the correct side\n        } else {\n          nonConvergencePoint.type = arrow.chartBranch.position < nonConvergentWidget.y ? \"top\" : \"bottom\";\n          nonConvergencePoint = this.getWidgetSideMidPosition(nonConvergencePoint, nonConvergentWidget);\n        }\n      }\n\n      arrow.points[0] = convergesOnEnd ? nonConvergencePoint : convergencePoint;\n      arrow.points[arrow.points.length - 1] = convergesOnEnd ? convergencePoint : nonConvergencePoint;\n    }\n    this.setIntermidiatePoints(arrow);\n  }\n\n  setIntermidiatePoints = (arrow: ArrowWidget) => {\n    const { points } = arrow;\n    const start = points[0];\n    const end = points[points.length - 1];\n    const isHorizontalStart = start.type === \"right\" || start.type === \"left\";\n    const isHorizontalEnd = end.type === \"right\" || end.type === \"left\";\n    const midDistance = isHorizontalStart ? (end.x - start.x) / 2 : (end.y - start.y) / 2;\n    // 1-segment straight line\n    if((isHorizontalStart && start.y === end.y) || (!isHorizontalStart && start.x === end.x)) {\n      if (points.length < 5) {\n        arrow.points = [start, end];\n        arrow.arrowType = 'initial';\n        arrow.chartBranch = null;\n        return;\n      }\n    }\n    let p2, p3, p4;\n    // 2-segments line\n    if (isHorizontalStart !== isHorizontalEnd && points.length < 5) {\n      const willCoverContent = isHorizontalStart\n        ? (end.type === \"bottom\" && end.y > start.y) || (end.type === \"top\" && end.y < start.y)\n        : (end.type === \"right\" && end.x > start.x) || (end.type === \"left\" && end.x < start.x);\n      if (!willCoverContent) {\n        const middlePoint = isHorizontalStart\n          ? { x: end.x, y: start.y }\n          : { x: start.x, y: end.y };\n        arrow.points = [start, middlePoint, end];\n        return;\n      } else { // 4-segments line\n        p2 = isHorizontalStart\n        ? { x: start.x + midDistance, y: start.y }\n        : { x: start.x, y: start.y + midDistance };\n      if (end.type === \"bottom\" || end.type === \"right\") {\n        p3 = isHorizontalStart\n          ? { x: start.x + midDistance, y: end.y + 20 }\n          : { x: end.x + 20, y: start.y + midDistance };\n        p4 = isHorizontalStart\n          ? { x: end.x, y: end.y + 20 }\n          : { x: end.x + 20, y: end.y };\n      } else {\n        p3 = isHorizontalStart\n          ? { x: start.x + midDistance, y: end.y - 20 }\n          : { x: end.x - 20, y: start.y + midDistance };\n        p4 = isHorizontalStart\n          ? { x: end.x, y: end.y - 20 }\n          : { x: end.x - 20, y: end.y };\n      }\n      arrow.points = [start, p2, p3, p4, end];\n      return;\n      }\n    }\n    // 4+ segments line\n    if (points.length >= 5) {\n      p2 = isHorizontalStart\n        ? { x: points[1].x, y: start.y }\n        : { x: start.x, y: points[1].y };\n      p4 = isHorizontalEnd\n        ? { x: points[points.length - 2].x, y: end.y }\n        : { x: end.x, y: points[points.length - 2].y };\n      const unalteredPoints = points.slice(2, points.length - 2);\n      console.log('5+ segments line');\n      console.log(points);\n      arrow.points = [start, p2, ...unalteredPoints, p4, end];\n      return;\n    }\n    // const willCoverContent = isHorizontalStart\n    //   ? (end.type === \"right\" && end.x > start.x) || (end.type === \"left\" && end.x < start.x)\n    //   : (end.type === \"bottom\" && end.y > start.y) || (end.type === \"top\" && end.y < start.y);\n    //   // 3-segments line\n    //   if (willCoverContent && !arrow.chartBranch && points.length < 5) {\n    //     if (end.type === \"bottom\" || end.type === \"right\") {\n    //       p2 = isHorizontalStart\n    //         ? {x: end.x + 20, y: start.y}\n    //         : {x: start.x, y: end.y + 20};\n    //       p3 = isHorizontalStart\n    //         ? {x: end.x + 20, y: end.y}\n    //         : {x: end.x, y: end.y + 20};\n    //     } else {\n    //       p2 = isHorizontalStart\n    //         ? {x: end.x - 20, y: start.y}\n    //         :  {x: start.x, y: end.y - 20};\n    //       p3 = isHorizontalStart\n    //         ? {x: end.x - 20, y: end.y}\n    //         :  {x: end.x, y: end.y - 20};\n    //     }\n    //     arrow.points = [start, p2, p3, end];\n    //     return;\n    //   }\n\n    // 3 segments line\n    let segment2Position = isHorizontalStart\n      ? start.x + midDistance\n      : start.y + midDistance;\n\n    if(arrow.chartBranch) {\n      const convergenceTarget = arrow.chartBranch.type === \"manyToOne\" ? end : start;\n      if(arrow.chartBranch.convergenceSide === convergenceTarget.type) {\n        segment2Position = arrow.chartBranch.position;\n      }\n    }\n\n    p2 = isHorizontalStart\n      ? { x: segment2Position, y: start.y}\n      : { x: start.x, y: segment2Position};\n    p3 = isHorizontalStart\n      ? { x: segment2Position, y: end.y}\n      : { x: end.x, y: segment2Position};\n\n    arrow.points = [start, p2, p3, end];\n    return;\n  }\n  \n  isChartSideArrow(arrow: ArrowWidget, widgets: Record<string, Widget>) {\n    // can't be chartSide if there is any chartBranch on current side\n    if(this.getSharedChartBranchArrow(arrow, widgets)) return false;\n    // can't be chartSide if their point were intentionally positioned\n    if (arrow.startPoint || arrow.endPoint) return false;\n    return ((arrow.initialIsHorizontal && (arrow.points[0].type === \"top\" || arrow.points[0].type === \"bottom\")) ||\n    (!arrow.initialIsHorizontal && (arrow.points[0].type === \"left\" || arrow.points[0].type === \"right\")));\n  }\n\n  // returns true if using intersection chartSide\n  updateArrowChartSide(arrow: ArrowWidget, startWidget: Widget, endWidget: Widget, draggingPosition?: Position, isStart?: boolean) {\n    if (arrow.points.length >= 5) return;\n    const draggingX = draggingPosition ? draggingPosition.x : endWidget.x;\n    const draggingY = draggingPosition ? draggingPosition.y : endWidget.y;\n    const draggingWidth = draggingPosition ? 0 : endWidget.width;\n    const draggingHeight = draggingPosition ? 0 : endWidget.height;\n    // if widgets limits are intersecting, use chartSide connector\n    if(arrow.initialIsHorizontal) {\n      const middleX = this.getIntersectionMiddle(startWidget.x, startWidget.width, draggingX, draggingWidth);\n      if(middleX) {\n        arrow.points = [{ ...arrow.points[0], x: middleX }, {...arrow.points[arrow.points.length - 1], x: middleX }]\n        return true;\n      }\n    } else {\n      const middleY = this.getIntersectionMiddle(startWidget.y, startWidget.height, draggingY, draggingHeight);\n      if(middleY) {\n        arrow.points = [{ ...arrow.points[0], y: middleY }, {...arrow.points[arrow.points.length - 1], y: middleY }]\n        return true;\n      }\n    }\n\n    // if there is no intersection, use original axis side\n    if (isStart && draggingPosition) {\n      if(arrow.initialIsHorizontal) {\n        arrow.points[arrow.points.length - 1].type = draggingX > startWidget.x + (startWidget.width / 2) ? \"right\" : \"left\";\n      } else {\n        arrow.points[arrow.points.length - 1].type = draggingY > startWidget.y + (startWidget.height / 2) ? \"bottom\" : \"top\";\n      }\n      arrow.points[arrow.points.length - 1] = this.getWidgetSideMidPosition(arrow.points[arrow.points.length - 1], startWidget);\n    } else {\n      if(arrow.initialIsHorizontal) {\n        arrow.points[0].type = draggingX > startWidget.x + (startWidget.width / 2) ? \"right\" : \"left\";\n      } else {\n        arrow.points[0].type = draggingY > startWidget.y + (startWidget.height / 2) ? \"bottom\" : \"top\";\n      }\n      arrow.points[0] = this.getWidgetSideMidPosition(arrow.points[0], startWidget);\n    }\n    \n    const startWidgetCenter = {x: startWidget.x + (startWidget.width/2), y: startWidget.y + (startWidget.height/2)};\n    const endWidgetCenter = {x: draggingX + (draggingWidth/2), y: draggingY + (draggingHeight/2)};\n    const distX = Math.abs(startWidgetCenter.x - endWidgetCenter.x) - (startWidget.width/2 + draggingWidth/2);\n    const distY = Math.abs(startWidgetCenter.y - endWidgetCenter.y) - (startWidget.height/2 + draggingHeight/2);\n    const widgetsTooClose = arrow.initialIsHorizontal ? distX <= ARROW_MARGIN : distY <= ARROW_MARGIN;\n    \n    // if widgets are too close, use 2-segments arrow\n    if(widgetsTooClose) {\n      // never closer than 20px from origin and never less than 10px from target side\n      if (isStart) {\n        if(arrow.initialIsHorizontal) {\n          arrow.points[0].type = draggingY > arrow.points[arrow.points.length - 1].y ? \"top\" : \"bottom\";\n          let distXToCenter = startWidget.width/2 + Math.max(distX + ARROW_MARGIN, TWO_SEGMENT_ARROW_MIN);\n          arrow.points[0].x = startWidgetCenter.x + (arrow.points[arrow.points.length - 1].type === \"right\" ? distXToCenter : -distXToCenter);\n          arrow.points[0].y = arrow.points[0].type === \"top\" ? draggingY : draggingY + draggingHeight;\n        } else {\n          arrow.points[0].type = draggingX > arrow.points[arrow.points.length - 1].x ? \"left\" : \"right\";\n          let distYToCenter = startWidget.height/2 + Math.max(distY + ARROW_MARGIN, TWO_SEGMENT_ARROW_MIN);\n          arrow.points[0].x = arrow.points[arrow.points.length - 1].type === \"left\" ? draggingX : draggingX + draggingWidth;\n          arrow.points[0].y = startWidgetCenter.y + (arrow.points[arrow.points.length - 1].type === \"bottom\" ? distYToCenter : -distYToCenter);\n        }\n      } else {\n        if(arrow.initialIsHorizontal) {\n          arrow.points[arrow.points.length - 1].type = draggingY > arrow.points[0].y ? \"top\" : \"bottom\";\n          let distXToCenter = startWidget.width/2 + Math.max(distX + ARROW_MARGIN, TWO_SEGMENT_ARROW_MIN);\n          arrow.points[arrow.points.length - 1].x = startWidgetCenter.x + (arrow.points[0].type === \"right\" ? distXToCenter : -distXToCenter);\n          arrow.points[arrow.points.length - 1].y = arrow.points[arrow.points.length - 1].type === \"top\" ? draggingY : draggingY + draggingHeight;\n        } else {\n          arrow.points[arrow.points.length - 1].type = draggingX > arrow.points[0].x ? \"left\" : \"right\";\n          let distYToCenter = startWidget.height/2 + Math.max(distY + ARROW_MARGIN, TWO_SEGMENT_ARROW_MIN);\n          arrow.points[arrow.points.length - 1].x = arrow.points[arrow.points.length - 1].type === \"left\" ? draggingX : draggingX + draggingWidth;\n          arrow.points[arrow.points.length - 1].y = startWidgetCenter.y + (arrow.points[0].type === \"bottom\" ? distYToCenter : -distYToCenter);\n        }\n      }\n    // otherwise use regular 3-segments arrow\n    } else {\n      if (isStart) {\n        if(arrow.initialIsHorizontal) {\n          arrow.points[0].type = arrow.points[arrow.points.length - 1].type === \"right\" ? \"left\" : \"right\";\n        } else {\n          arrow.points[0].type = arrow.points[arrow.points.length - 1].type === \"bottom\" ? \"top\" : \"bottom\";\n        }\n        arrow.points[0] = draggingPosition ? {...arrow.points[0], x: draggingPosition.x, y: draggingPosition.y} : this.getWidgetSideMidPosition(arrow.points[0], endWidget);\n      } else {\n        if(arrow.initialIsHorizontal) {\n            arrow.points[arrow.points.length - 1].type = arrow.points[0].type === \"right\" ? \"left\" : \"right\";\n        } else {\n          arrow.points[arrow.points.length - 1].type = arrow.points[0].type === \"bottom\" ? \"top\" : \"bottom\";\n        }\n        arrow.points[arrow.points.length - 1] = draggingPosition ? {...arrow.points[arrow.points.length - 1], x: draggingPosition.x, y: draggingPosition.y} : this.getWidgetSideMidPosition(arrow.points[arrow.points.length - 1], endWidget);\n      }\n    }\n\n    return false;\n  }\n\n  // returns the middle point of an intersection\n  getIntersectionMiddle(min1: number, size1: number, min2: number, size2: number) {\n    const max1 = min1 + size1;\n    const max2 = min2 + size2;\n    if (size2 === 0) return min2 >= min1 && min2 <= max1 ? min2 : null;\n\n    // TODO: none of this works when moving endWidget\n    // TODO: make sure this works with different shaped widgets\n    // if((this.between(min1, min2, max2) && this.between(max1, min2, max2)) ||\n    //    (this.between(min2, min1, max1) && this.between(max2, min1, max1))) {\n    if((min1 === min2 && max1 === max2) ||\n      (min1 > min2 && min1 < max2)) {\n      const intersection = max2 - min1;\n      if(intersection <= ARROW_MARGIN * 2) return null;\n      \n      return min1 + (intersection / 2);\n    } else if(max1 > min2 && max1 < max2) {\n      const intersection = max1 - min2;\n      if(intersection <= ARROW_MARGIN * 2) return null;\n\n      return max1 - (intersection / 2);\n    }\n\n    // no intersection\n    return null;\n  }\n\n  between(value: number, min: number, max: number) {\n    return value>min && value<max;\n  }\n  \n  getWidgetSideMidPosition(point: Point, widget: Widget) {\n    console.log(point);\n    let newPoint: Point = {type: point.type, x: 0, y: 0};\n    switch(point.type) {\n      case \"top\":\n        newPoint.x = widget.x + widget.width / 2;\n        newPoint.y = widget.y;\n        break;\n      case \"right\":\n        newPoint.x = widget.x + widget.width;\n        newPoint.y = widget.y + widget.height / 2;\n        break;\n      case \"bottom\":\n        newPoint.x = widget.x + widget.width / 2;\n        newPoint.y = widget.y + widget.height;\n        break;\n      case \"left\":\n        newPoint.x = widget.x;\n        newPoint.y = widget.y + widget.height / 2;\n        break;\n    }\n\n    return newPoint;\n  }\n\n  render() {\n    const { cursor, selected, widgets } = this.state;\n    return (\n      <div>\n        <div\n          id=\"canvas\"\n          style={{ cursor }}\n          className={`App ${cursor === 'crosshair' ? 'connector-mode' : ''}`}\n          tabIndex={1}\n          onDoubleClick={this.handleDoubleClick}\n          onKeyDown={this.handleKeyDown}\n          onMouseMove={this.handleDrag}\n          onMouseDown={this.handleMouseDown}\n          onMouseUp={this.handleMouseUp}\n          ref={this.handleRef}\n          >\n          {Object.values(widgets).map((w) => {\n            if (w.type === \"sticky\") {\n              return (\n                <Sticky\n                  cursor={cursor}\n                  onMouseDown={this.handleStickyMouseDown}\n                  onMouseUp={this.handleStickyMouseUp}\n                  onDragStart={this.handleWidgetDragStart}\n                  onMouseHover={this.handleMouseHoverSticky}\n                  onMouseLeave={this.handleMouseLeaveSticky}\n                  selected={!!selected?.includes(w.id)}\n                  widget={w}\n                  key={w.id}\n                />\n                );\n            }\n            \n            if (w.type === \"arrow\") {\n              return <Arrow\n                widget={w} key={w.id}\n                onDragPointStart={this.handleArrowPointDragStart}\n                onDragSegmentEnd={this.handleDragSegmentEnd}\n                onDragSegment={this.handleDragSegment}\n                onDragSegmentStart={this.handleDragSementStart}\n              />;\n            }\n            \n            return null;\n          })}\n        </div>\n        <div id=\"settings\" style={settingsStyle}>\n          <Checkbox\n            label=\"Stick To Convergent Widget Side\"\n            onCheckedChange={(checked) => this.setState({settings: { stickToConvergentWidgetSide: checked }})} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}