{"version":3,"sources":["widgets/Sticky.tsx","widgets/Arrow.tsx","settings/Checkbox.tsx","types.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Sticky","dragging","initialX","initialY","handleContextMenu","e","props","onContextMenu","onRightClick","widget","id","handleDragStart","onDragStart","this","cursor","selected","x","y","width","height","onMouseDown","style","top","left","border","className","React","Component","Arrow","position","pointerEvents","xmlns","version","points","chartBranch","start","end","isHorizontalStart","type","isHorizontalEnd","d","stroke","strokeWidth","fill","cx","cy","r","p1","p2","p3","d1","d2","midDistance","segment2Position","convergenceTarget","convergenceSide","p4","d3","pathGenerator","PureComponent","Checkbox","state","checked","handleOnChange","setState","prevState","onCheckedChange","onChange","defaultChecked","label","stickyFactory","spec","uuid","arrowFactory","arrowType","initialIsHorizontal","toOrientation","settingsStyle","borderStyle","backgroundColor","padding","App","ref","settings","stickToConvergentWidgetSide","initialId","lastX","lastY","widgets","handleRightClick","preventDefault","stopPropagation","cancelArrowCreation","handleStickyRightClick","startWidget","endWidget","isHorizontalConnection","Math","abs","arrow","updateArrow","handleDoubleClick","stickyWidth","ctrlKey","s","clientX","clientY","handleDrag","dragged","connectedArrows","Object","values","filter","w","reduce","acc","cur","button","handleKeyDown","key","prevWidgets","forEach","handleMouseDown","handleMouseUp","map","isChartSideArrow","updateArrowChartSide","setArrowChartBranch","handleRef","chartBranchArrow","getSharedChartBranchArrow","assign","chartBranchArrows","length","getWidgetSideMidPosition","convergesOnEnd","convergencePoint","nonConvergencePoint","convergentWidget","nonConvergentWidget","middleX","getIntersectionMiddle","middleY","startWidgetCenter","endWidgetCenter","distX","distY","distXToCenter","max","distYToCenter","a","b","distance","horizontal","aCenter","bCenter","min1","size1","min2","size2","max1","max2","intersection","ARROW_MARGIN","point","newPoint","tabIndex","onDoubleClick","onKeyDown","onMouseMove","onMouseUp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.894a8b0e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Sticky.css\";\nimport { StickyWidget } from \"../types\";\n\ninterface PropTypes {\n  cursor: React.CSSProperties[\"cursor\"];\n  onRightClick: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  onDragStart: (id: string, e: React.MouseEvent<HTMLDivElement>) => void;\n  selected: boolean;\n  widget: StickyWidget;\n}\n\nclass Sticky extends React.Component<PropTypes> {\n  dragging: boolean = false;\n  initialX: number = 0;\n  initialY: number = 0;\n\n  handleContextMenu = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onRightClick: onContextMenu, widget } = this.props;\n\n    onContextMenu(widget.id, e);\n  };\n\n  handleDragStart = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { onDragStart, widget } = this.props;\n\n    onDragStart(widget.id, e);\n  };\n\n  render() {\n    const {\n      cursor,\n      selected,\n      widget: { x, y , width, height},\n    } = this.props;\n    return (\n      <div\n        onContextMenu={this.handleContextMenu}\n        onMouseDown={this.handleDragStart}\n        style={{\n          top: y,\n          left: x,\n          width: width,\n          height: height,\n          cursor: cursor === \"crosshair\" ? \"crosshair\" : \"pointer\",\n          border: selected ? \"2px solid blue\" : \"none\",\n        }}\n        className=\"Sticky\"\n      />\n    );\n  }\n}\n\nexport default Sticky;\n","import React from \"react\";\nimport \"./Sticky.css\";\nimport { ArrowWidget, ChartBranch, Point } from \"../types\";\n\ninterface PropTypes {\n  widget: ArrowWidget;\n}\n\nconst pathGenerator = (points: Point[], chartBranch: ChartBranch | null) => {\n  const start = points[0];\n  const end = points[1];\n  const isHorizontalStart = start.type === \"right\" || start.type === \"left\";\n  const isHorizontalEnd = end.type === \"right\" || end.type === \"left\";\n\n  // 1-segment straight line\n  if((isHorizontalStart && start.y === end.y) ||\n    (!isHorizontalStart && start.x === end.x)) {\n      const d = `M ${start.x} ${start.y} L ${end.x} ${end.y}`;\n      return [\n        <path d={d} stroke=\"red\" strokeWidth=\"2\" fill=\"none\" />,\n        <circle\n          cx={`${end.x}`}\n          cy={`${end.y}`}\n          r=\"5\"\n          stroke=\"#5cb85c\"\n          fill=\"#5cb85c\"\n        ></circle>,\n      ];\n  }\n\n  // 2-segments line\n  if(isHorizontalStart !== isHorizontalEnd) {\n    const p1 = `${start.x} ${start.y}`;\n    const p2 = isHorizontalStart ? `${end.x} ${start.y}` : `${start.x} ${end.y}`;\n    const p3 = `${end.x} ${end.y}`;\n    \n    const d1 = `M ${p1} L ${p2}`;\n    const d2 = `M ${p2} L ${p3}`;\n    return [\n      <path d={d1} stroke=\"red\" strokeWidth=\"2\" fill=\"none\" />,\n      <path d={d2} stroke=\"red\" strokeWidth=\"2\" fill=\"none\" />,\n      <circle\n        cx={`${end.x}`}\n        cy={`${end.y}`}\n        r=\"5\"\n        stroke=\"#5cb85c\"\n        fill=\"#5cb85c\"\n      ></circle>,\n    ];\n  }\n\n  // 3-segments line\n  const midDistance = isHorizontalStart ? (end.x - start.x) / 2 : (end.y - start.y) / 2;\n  let segment2Position = isHorizontalStart ? start.x + midDistance: start.y + midDistance;\n  if(chartBranch)\n  {\n    const convergenceTarget = chartBranch.type === \"manyToOne\" ? end : start;\n    if(chartBranch.convergenceSide === convergenceTarget.type) {\n      segment2Position = chartBranch.position;\n    }\n  }\n\n  const p1 = `${start.x} ${start.y}`;\n  const p2 = isHorizontalStart ? `${segment2Position} ${start.y}` : ` ${start.x} ${segment2Position}`;\n  const p3 = isHorizontalStart ? `${segment2Position} ${end.y}` : ` ${end.x} ${segment2Position}`;\n  const p4 = `${end.x} ${end.y}`;\n\n  const d1 = `M ${p1} L ${p2}`;\n  const d2 = `M ${p2} L ${p3}`;\n  const d3 = `M ${p3} L ${p4}`;\n\n  return [\n    <path d={d1} stroke=\"red\" strokeWidth=\"2\" fill=\"none\" />,\n    <path d={d2} stroke=\"red\" strokeWidth=\"2\" fill=\"none\" />,\n    <path d={d3} stroke=\"red\" strokeWidth=\"2\" fill=\"none\" />,\n    <circle\n      cx={`${end.x}`}\n      cy={`${end.y}`}\n      r=\"5\"\n      stroke=\"#5cb85c\"\n      fill=\"#5cb85c\"\n    ></circle>,\n  ];\n};\n\nclass Arrow extends React.PureComponent<PropTypes> {\n  render() {\n    return (\n      <svg\n        style={{ position: \"absolute\", top: 0, left: 0, pointerEvents: \"none\" }}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        version=\"1.1\"\n      >\n        {pathGenerator(this.props.widget.points, this.props.widget.chartBranch)}\n      </svg>\n    );\n  }\n}\n\nexport default Arrow;","import React from \"react\";\r\n\r\ninterface PropTypes {\r\n  label: string;\r\n  onCheckedChange: (checked: boolean) => void;\r\n}\r\n\r\ninterface State {\r\n  checked: boolean;\r\n}\r\n\r\nclass Checkbox extends React.PureComponent<PropTypes, State> {\r\n  state: State = {\r\n    checked: false,\r\n  };\r\n\r\n  handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => { \r\n    this.setState((prevState) => {\r\n      const checked = !prevState.checked;\r\n      this.props.onCheckedChange(checked);\r\n      return {\r\n        checked\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{height: \"auto\"}}>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            style={{width: 15, height: 15}}\r\n            onChange={this.handleOnChange}\r\n            defaultChecked={this.state.checked} />\r\n          {this.props.label}\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checkbox;","import * as uuid from \"uuid\";\n\ninterface W {\n  height: number;\n  width: number;\n  id: string;\n  x: number;\n  y: number;\n}\n\nexport type PointType = \"bottom\" | \"top\" | \"left\" | \"right\";\nexport type Orientation = \"horizontal\" | \"vertical\";\nexport type ChartBranchType = \"oneToOne\" | \"oneToMany\" | \"manyToOne\";\n\nexport interface Point {\n  x: number;\n  y: number;\n  type: PointType;\n}\n\nexport interface ChartBranch {\n  position: number; // fixed position where arrows share the 2nd branch segment\n  convergenceSide: PointType;  // side of the widget where the arrows converge (might be start or end widget depending of ChartBranchType)\n  type: ChartBranchType;\n}\n\n// initial: initial simple arrow, centered to the connected widgets on both ends, bent into 3 segments having the same length in both parallel segments.\n// chartBranch: created from an 'initial' arrow, centered to the connected widgets on both ends, bent into 3 segments, can share inital segment with other 'chartBranch' arrows, 1st segment size stays put.\n// chartSide: created from an 'initial' arrow, moved to the side of a group of 'chartBranch' arrows and can be on any point of both connected widgets.\nexport type ArrowType = \"initial\" | \"chartBranch\" | \"chartSide\";\n\nexport type StickyWidget = W & { type: \"sticky\" };\nexport type ArrowWidget = W & {\n  type: \"arrow\";\n  points: Point[];\n  start: string | null;\n  end: string | null;\n  arrowType: ArrowType;\n  chartBranch: ChartBranch | null;\n  initialIsHorizontal: boolean;\n};\n\nexport type Widget = StickyWidget | ArrowWidget;\n\nexport const stickyFactory = (spec: Partial<StickyWidget>): StickyWidget => ({\n  id: uuid.v4(),\n  height: spec.height ?? 100,\n  width: spec.width ?? 100,\n  type: \"sticky\",\n  x: (spec.x || 0) - 50,\n  y: (spec.y || 0) - 50,\n});\n\nexport const arrowFactory = (spec: Partial<ArrowWidget>): ArrowWidget => ({\n  id: uuid.v4(),\n  height: 0,\n  width: 0,\n  type: \"arrow\",\n  x: (spec.x || 0) - 25,\n  y: (spec.y || 0) - 25,\n  start: spec.start || null,\n  end: spec.end || null,\n  points: [],\n  arrowType: \"initial\",\n  chartBranch: null,\n  initialIsHorizontal: true,\n});\n\nexport const toOrientation = (type: PointType) : Orientation => {\n  return type === \"left\" || type === \"right\" ? \"horizontal\" : \"vertical\";\n}\n","import React, { CSSProperties } from \"react\";\nimport \"./App.css\";\nimport Sticky from \"./widgets/Sticky\";\nimport Arrow from \"./widgets/Arrow\";\nimport Checkbox from \"./settings/Checkbox\";\nimport {\n  stickyFactory,\n  Widget,\n  StickyWidget,\n  ArrowWidget,\n  arrowFactory,\n  Point,\n  toOrientation,\n  ChartBranch,\n} from \"./types\";\n\nexport const TOLERANCE = 10;\nexport const ARROW_MARGIN = 10;\nexport const TWO_SEGMENT_ARROW_MIN = 20;\n//export const STICK_TO_CONVERGENT_WIDGET_SIDE = true;\n\nexport const settingsStyle: React.CSSProperties = {\n  position: \"absolute\",\n  top: 0,\n  width:\"auto\",\n  height: \"auto\",\n  borderStyle: \"solid\",\n  backgroundColor: \"lightgray\",\n  padding: 10,\n};\n\ninterface State {\n  settings:{\n    stickToConvergentWidgetSide: boolean;\n  };\n  cursor: React.CSSProperties[\"cursor\"];\n  dragging: string | null;\n  initialId: string | null;\n  initialX: number | null;\n  initialY: number | null;\n  lastX: number | null;\n  lastY: number | null;\n  selected: string | null;\n  widgets: Record<string, Widget>;\n}\n\nclass App extends React.Component<{}, State> {\n  ref: HTMLDivElement | null = null;\n\n  state: State = {\n    settings :{\n      stickToConvergentWidgetSide: false,\n    },\n    cursor: \"auto\",\n    dragging: null,\n    initialId: null,\n    initialX: null,\n    initialY: null,\n    lastX: null,\n    lastY: null,\n    selected: null,\n    widgets: {},\n  };\n\n  cancelArrowCreation() {\n      this.setState({\n        initialId: null,\n        cursor: \"auto\",\n      });\n  }\n  \n  handleRightClick = (e: React.MouseEvent<HTMLDivElement>) => { \n    e.preventDefault();\n    e.stopPropagation();\n\n    if (this.state.initialId) {\n      this.cancelArrowCreation();\n    }\n  }\n\n  handleStickyRightClick = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // start arrow creation\n    if (!this.state.initialId) {\n      this.setState({\n        initialId: id,\n        cursor: \"crosshair\",\n      });\n      return;\n    }\n\n    if (this.state.initialId === id) {\n      this.cancelArrowCreation();\n      return;\n    }\n\n    this.setState((prevState) => {\n      // create Arrow\n      const startWidget = prevState.widgets[prevState.initialId || \"\"];\n      const endWidget = prevState.widgets[id];\n      const isHorizontalConnection = Math.abs((startWidget.x - endWidget.x) / (startWidget.y - endWidget.y)) > 1;\n      const arrow = {\n        ...arrowFactory({ start: prevState.initialId, end: id }),\n        initialIsHorizontal: isHorizontalConnection,\n      };\n\n      this.updateArrow(arrow, prevState.widgets);\n\n      return {\n        ...prevState,\n        cursor: \"auto\",\n        initialId: null,\n        widgets: {\n          ...prevState.widgets,\n          [arrow.id]: arrow,\n        },\n      };\n    });\n  };\n\n  handleDoubleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    // create rectangular stickies while holding CTRL down\n    const stickyWidth = e.ctrlKey ? 150 : 100;\n    const s = stickyFactory({ x: e.clientX, y: e.clientY, width: stickyWidth });\n    this.setState((prevState) => ({\n      selected: s.id,\n      widgets: {\n        ...prevState.widgets,\n        [s.id]: s,\n      },\n    }));\n  };\n\n  handleDrag = (e: React.MouseEvent<HTMLDivElement>) => {\n    const { clientX, clientY } = e;\n    this.setState((prevState) => {\n      if (!prevState.dragging || !prevState.lastX || !prevState.lastY)\n        return { ...prevState };\n      const dragged = {\n        ...prevState.widgets[prevState.dragging],\n      } as StickyWidget;\n\n      dragged.x = dragged.x + clientX - prevState.lastX;\n      dragged.y = dragged.y + clientY - prevState.lastY;\n\n      const connectedArrows = Object.values(prevState.widgets)\n        .filter(\n          (w) =>\n            w.type === \"arrow\" &&\n            (w.start === prevState.dragging || w.end === prevState.dragging)\n        )\n        .reduce((acc, cur) => {\n          const arrow = cur as ArrowWidget;\n          this.updateArrow(arrow, prevState.widgets);\n\n          return {\n            ...acc,\n            [arrow.id]: {\n              ...arrow,\n            },\n          };\n        }, {} as Record<string, Widget>);\n\n      return {\n        lastX: clientX,\n        lastY: clientY,\n        widgets: {\n          ...prevState.widgets,\n          [dragged.id]: dragged,\n          ...connectedArrows,\n        },\n      };\n    });\n  };\n\n  handleDragStart = (id: string, e: React.MouseEvent<HTMLDivElement>) => {\n    const { clientX: initialX, clientY: initialY } = e;\n    e.stopPropagation();\n\n    if (e.button !== 0) return;\n\n    this.setState({\n      dragging: id,\n      selected: id,\n      initialX: initialX,\n      initialY: initialY,\n      lastX: initialX,\n      lastY: initialY,\n    });\n  };\n\n  handleKeyDown = (e: React.KeyboardEvent) => {\n    if ((e.key === \"Backspace\" || e.key === \"Delete\") && this.state.selected) {\n      this.setState((prevState) => {\n        const id = prevState.selected || \"\";\n        const prevWidgets = prevState.widgets;\n        delete prevWidgets[id];\n\n        Object.values(prevWidgets).forEach((w) => {\n          if (w.type === \"arrow\" && (w.start === id || w.end === id))\n            delete prevWidgets[w.id];\n        });\n        return {\n          ...prevState,\n          selected: null,\n          widgets: { ...prevWidgets },\n        };\n      });\n    }\n  };\n\n  handleMouseDown = () => {\n    this.setState({ selected: null });\n  };\n\n  handleMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n    this.setState((prevState) => {\n      \n      if (!prevState.dragging)\n        return { ...prevState };\n      \n      const connectedArrows = Object.values(prevState.widgets)\n      .filter(\n        (w) =>\n          w.type === \"arrow\" &&\n          (w.start === prevState.dragging || w.end === prevState.dragging)\n      ).map(w=> w as ArrowWidget)\n      .reduce((acc, arrow) => {\n\n        // stick to your branch side\n        if(!prevState.settings.stickToConvergentWidgetSide || arrow.arrowType !== \"chartBranch\") {\n          if(this.isChartSideArrow(arrow, prevState.widgets)) {\n            const startWidget = prevState.widgets[arrow.start || \"\"] as StickyWidget;\n            const endWidget = prevState.widgets[arrow.end || \"\"] as StickyWidget;\n            if(this.updateArrowChartSide(arrow, startWidget, endWidget)) {\n              arrow.arrowType = \"chartSide\";\n            }\n          }\n          \n          // update chart branches state (for both start and end arrows)\n          this.setArrowChartBranch(arrow, prevState.widgets, false);\n        }\n          \n        // update initial axis\n        arrow.initialIsHorizontal = arrow.points[0].type === \"left\" || arrow.points[0].type === \"right\";\n\n        return {\n          ...acc,\n          [arrow.id]: {\n            ...arrow,\n          },\n        };\n      }, {} as Record<string, Widget>);\n      \n      return {\n        dragging: null,\n        widgets: {\n          ...prevState.widgets,\n          ...connectedArrows,\n        },\n      };\n    });\n  };\n\n  handleRef = (ref: HTMLDivElement) => (this.ref = ref);\n\n  // finds if this arrow should be a part of a branchChart\n  setArrowChartBranch(arrow: ArrowWidget, widgets: Record<string, Widget>, dragging: boolean) {\n    if(!this.state.settings.stickToConvergentWidgetSide && arrow.chartBranch) {\n      // don't recalculate if chartBranchSide didn't change\n      let convergencePoint = arrow.chartBranch.type === \"manyToOne\" ? arrow.points[1] : arrow.points[0];\n      if(convergencePoint.type === arrow.chartBranch.convergenceSide)\n        return;\n    }\n\n    const chartBranchArrow = this.getSharedChartBranchArrow(arrow, widgets);\n    // don't force chartBranching while dragging on an empty side of the origin/end widget\n    if(dragging && !chartBranchArrow) {\n      arrow.chartBranch = null;\n      return;\n    }\n  \n    // don't set arrowType while dragging (wait until mouseUp)\n    if(!dragging) {\n      arrow.arrowType = \"chartBranch\";\n    }\n    \n    if(chartBranchArrow && chartBranchArrow.chartBranch) {\n      // become part of an existing chartBranch\n      if(chartBranchArrow.chartBranch.type === \"oneToOne\") {\n        // if we are just adding the 2nd arrow to this chartBranch, update type and convergenceSide beforehand\n        if(chartBranchArrow.start === arrow.start ){\n          chartBranchArrow.chartBranch.type = \"oneToMany\";\n          chartBranchArrow.chartBranch.convergenceSide = arrow.points[0].type;\n        } else {\n          chartBranchArrow.chartBranch.type = \"manyToOne\";\n          chartBranchArrow.chartBranch.convergenceSide = arrow.points[1].type;\n        }\n      }\n      arrow.chartBranch = Object.assign({}, chartBranchArrow.chartBranch);\n    } else {\n      // new lonely charBranch arrow\n      let chartBranch: ChartBranch = {\n        position: 0,\n        convergenceSide: arrow.points[0].type,\n        type: \"oneToOne\"\n      };\n      // on new branch, set 2nd segment position to half the distance in X or Y depending on orientation \n      if(toOrientation(chartBranch.convergenceSide) === \"horizontal\") {\n        chartBranch.position = arrow.points[0].x + ((arrow.points[1].x - arrow.points[0].x) / 2);\n      } else {\n        chartBranch.position = arrow.points[0].y + ((arrow.points[1].y - arrow.points[0].y) / 2);\n      }\n      arrow.chartBranch = chartBranch;\n    }\n  }\n\n  // find another arrow that share same origin or end point and already has chartBranch defined\n  getSharedChartBranchArrow(arrow: ArrowWidget, widgets: Record<string, Widget>) {\n    const chartBranchArrows = Object.values(widgets)\n    .filter(\n      (w) =>\n      w.type === \"arrow\" &&\n      w.id !== arrow.id &&\n      w.arrowType === \"chartBranch\" &&\n      w.chartBranch &&\n      ((w.start === arrow.start && w.points[0].type === arrow.points[0].type) ||\n       (w.end === arrow.end && w.points[1].type === arrow.points[1].type))\n    ).map(w => w as ArrowWidget);\n    \n    return chartBranchArrows.length > 0 ? chartBranchArrows[0] : null;\n  }\n\n  // updates arrow points (start/end) in both position and type\n  updateArrow(arrow: ArrowWidget, widgets: Record<string, Widget>) {\n    const startWidget = widgets[arrow.start || \"\"];\n    const endWidget = widgets[arrow.end || \"\"];\n    const isHorizontalStart = Math.abs((startWidget.x - endWidget.x) / (startWidget.y - endWidget.y)) > 1;\n\n    // initial dummy values\n    let points: Point[] = [{type: \"right\", x: 0, y: 0}, {type: \"left\", x: 1, y: 0}];\n\n    if(arrow.points.length === 2) {\n      points = arrow.points;\n    }\n\n    // stick to your branch side\n    if(!this.state.settings.stickToConvergentWidgetSide || arrow.arrowType !== \"chartBranch\") {\n      // change connections depending on positioning\n      if(isHorizontalStart) {\n        if (startWidget.x + startWidget.width + TOLERANCE < endWidget.x) {\n          points[0].type = \"right\";\n          points[1].type = \"left\";\n        } else {\n          points[0].type = \"left\";\n          points[1].type = \"right\";\n        }\n      } else {\n        if (startWidget.y + startWidget.height + TOLERANCE < endWidget.y) {\n          points[0].type = \"bottom\";\n          points[1].type = \"top\";\n        } else {\n          points[0].type = \"top\";\n          points[1].type = \"bottom\";\n        }\n      }\n      points[0] = this.getWidgetSideMidPosition(points[0], startWidget);\n      points[1] = this.getWidgetSideMidPosition(points[1], endWidget);\n      arrow.points = points;\n      \n      // check if being a chartSide arrow\n      if(this.isChartSideArrow(arrow, widgets)) {\n        this.updateArrowChartSide(arrow, startWidget, endWidget);\n      }\n      \n      // check if being part of a chartBranch\n      this.setArrowChartBranch(arrow, widgets, true);\n    }\n    \n    // update chartBranch arrows\n    // this is mainly used for a branched arrow whose widget is \"behind\" the branch fixed position \n    if(arrow.chartBranch) {\n      // on \"oneOnOne\" we consider the start widget as the convergent one\n      const convergesOnEnd = arrow.chartBranch.type === \"manyToOne\"; \n      let convergencePoint = convergesOnEnd ? arrow.points[1] : arrow.points[0];\n      let nonConvergencePoint = convergesOnEnd ? arrow.points[0] : arrow.points[1];\n      const convergentWidget = convergesOnEnd ? endWidget : startWidget;\n      const nonConvergentWidget = convergesOnEnd ? startWidget : endWidget;\n      \n      convergencePoint = this.getWidgetSideMidPosition(convergencePoint, convergentWidget);\n      nonConvergencePoint = this.getWidgetSideMidPosition(nonConvergencePoint, nonConvergentWidget);\n    \n      if(toOrientation(arrow.chartBranch.convergenceSide) === \"horizontal\") {\n        // if inside, use 2-segment arrow\n        if(arrow.chartBranch.position >= nonConvergentWidget.x && arrow.chartBranch.position <= nonConvergentWidget.x + nonConvergentWidget.width) {\n          nonConvergencePoint.x = arrow.chartBranch.position;\n          nonConvergencePoint.y = (nonConvergentWidget.y + nonConvergentWidget.height/2) > convergencePoint.y ? nonConvergentWidget.y : nonConvergentWidget.y + nonConvergentWidget.height;\n        // otherwise use regular 3-segment arrow but make sure it connects to the correct side\n        } else {\n          nonConvergencePoint.type = arrow.chartBranch.position < nonConvergentWidget.x ? \"left\" : \"right\";\n          nonConvergencePoint = this.getWidgetSideMidPosition(nonConvergencePoint, nonConvergentWidget);\n        }\n      } else {  // vertical\n        // if inside, use 2-segment arrow\n        if(arrow.chartBranch.position >= nonConvergentWidget.y && arrow.chartBranch.position <= nonConvergentWidget.y + nonConvergentWidget.height) {\n          nonConvergencePoint.x = (nonConvergentWidget.x + nonConvergentWidget.width/2) > convergencePoint.x ? nonConvergentWidget.x : nonConvergentWidget.x + nonConvergentWidget.width;\n          nonConvergencePoint.y = arrow.chartBranch.position;\n        // otherwise use regular 3-segment arrow but make sure it connects to the correct side\n        } else {\n          nonConvergencePoint.type = arrow.chartBranch.position < nonConvergentWidget.y ? \"top\" : \"bottom\";\n          nonConvergencePoint = this.getWidgetSideMidPosition(nonConvergencePoint, nonConvergentWidget);\n        }\n      }\n\n      arrow.points[0] = convergesOnEnd ? nonConvergencePoint : convergencePoint;\n      arrow.points[1] = convergesOnEnd ? convergencePoint : nonConvergencePoint;\n    }\n  }\n  \n  isChartSideArrow(arrow: ArrowWidget, widgets: Record<string, Widget>) {\n    // can't be chartSide if there is any chartBranch on current side\n    if(this.getSharedChartBranchArrow(arrow, widgets)) return;\n\n    return ((arrow.initialIsHorizontal && (arrow.points[0].type === \"top\" || arrow.points[0].type === \"bottom\")) ||\n    (!arrow.initialIsHorizontal && (arrow.points[0].type === \"left\" || arrow.points[0].type === \"right\")));\n  }\n\n  // returns true if using intersection chartSide\n  updateArrowChartSide(arrow: ArrowWidget, startWidget: Widget, endWidget: Widget) {\n    // if widgets limits are intersecting, use chartSide connector\n    if(arrow.initialIsHorizontal) {\n      const middleX = this.getIntersectionMiddle(startWidget.x, startWidget.width, endWidget.x, endWidget.width);\n      if(middleX) {\n        arrow.points[0].x = middleX;\n        arrow.points[1].x = middleX;\n        return true;\n      }\n    } else {\n      const middleY = this.getIntersectionMiddle(startWidget.y, startWidget.height, endWidget.y, endWidget.height);\n      if(middleY) {\n        arrow.points[0].y = middleY;\n        arrow.points[1].y = middleY;\n        return true;\n      }\n    }\n\n    // if there is no intersection, use original axis side\n    if(arrow.initialIsHorizontal) {\n      arrow.points[0].type = endWidget.x > startWidget.x + (startWidget.width / 2) ? \"right\" : \"left\";\n    } else {\n      arrow.points[0].type = endWidget.y > startWidget.y + (startWidget.height / 2) ? \"bottom\" : \"top\";\n    }\n    arrow.points[0] = this.getWidgetSideMidPosition(arrow.points[0], startWidget);\n    \n    const startWidgetCenter = {x: startWidget.x + (startWidget.width/2), y: startWidget.y + (startWidget.height/2)};\n    const endWidgetCenter = {x: endWidget.x + (endWidget.width/2), y: endWidget.y + (endWidget.height/2)};\n    const distX = Math.abs(startWidgetCenter.x - endWidgetCenter.x) - (startWidget.width/2 + endWidget.width/2);\n    const distY = Math.abs(startWidgetCenter.y - endWidgetCenter.y) - (startWidget.height/2 + endWidget.height/2);\n    const widgetsTooClose = arrow.initialIsHorizontal ? distX <= ARROW_MARGIN : distY <= ARROW_MARGIN;\n    \n    // if widgets are too close, use 2-segments arrow\n    if(widgetsTooClose) {\n      // never closer than 20px from origin and never less than 10px from target side\n      if(arrow.initialIsHorizontal) {\n        arrow.points[1].type = endWidget.y > arrow.points[0].y ? \"top\" : \"bottom\";\n        let distXToCenter = startWidget.width/2 + Math.max(distX + ARROW_MARGIN, TWO_SEGMENT_ARROW_MIN);\n        arrow.points[1].x = startWidgetCenter.x + (arrow.points[0].type === \"right\" ? distXToCenter : -distXToCenter);\n        arrow.points[1].y = arrow.points[1].type === \"top\" ? endWidget.y : endWidget.y + endWidget.height;\n      } else {\n        arrow.points[1].type = endWidget.x > arrow.points[0].x ? \"left\" : \"right\";\n        let distYToCenter = startWidget.height/2 + Math.max(distY + ARROW_MARGIN, TWO_SEGMENT_ARROW_MIN);\n        arrow.points[1].x = arrow.points[1].type === \"left\" ? endWidget.x : endWidget.x + endWidget.width;\n        arrow.points[1].y = startWidgetCenter.y + (arrow.points[0].type === \"bottom\" ? distYToCenter : -distYToCenter);\n      }\n    // otherwise use regular 3-segments arrow\n    } else {\n      if(arrow.initialIsHorizontal) {\n        \tarrow.points[1].type = arrow.points[0].type === \"right\" ? \"left\" : \"right\";\n      } else {\n        arrow.points[1].type = arrow.points[0].type === \"bottom\" ? \"top\" : \"bottom\";\n      }\n      arrow.points[1] = this.getWidgetSideMidPosition(arrow.points[1], endWidget);\n    }\n\n    return false;\n  }\n\n  // returns if any widgets are at \"distance\" or lower in the requested axis\n  widgetsTooClose(a: Widget, b: Widget, distance: number, horizontal: boolean) {\n    const aCenter = {x: a.x + (a.width/2), y: a.y + (a.height/2)};\n    const bCenter = {x: b.x + (b.width/2), y: b.y + (b.height/2)};\n    if(horizontal) {\n      const distX = Math.abs(aCenter.x - bCenter.x) - (a.width/2 + b.width/2);\n      return distX <= distance;\n    }\n    const distY = Math.abs(aCenter.y - bCenter.y) - (a.height/2 + b.height/2);\n    return distY <= distance;\n  }\n\n  getIntersectionMiddle(min1: number, size1: number, min2: number, size2: number) {\n    const max1 = min1 + size1;\n    const max2 = min2 + size2;\n\n    if((min1 === min2 && max1 === max2) ||\n      (min1 > min2 && min1 < max2)) {\n      const intersection = max2 - min1;\n      if(intersection <= ARROW_MARGIN * 2) return null;\n      \n      return min1 + (intersection / 2);\n    } else if(max1 > min2 && max1 < max2) {\n      const intersection = max1 - min2;\n      if(intersection <= ARROW_MARGIN * 2) return null;\n\n      return max1 - (intersection / 2);\n    }\n\n    // no intersection\n    return null;\n  }\n  \n  getWidgetSideMidPosition(point: Point, widget: Widget) {\n    let newPoint: Point = {type: point.type, x: 0, y: 0};\n    switch(point.type) {\n      case \"top\":\n        newPoint.x = widget.x + widget.width / 2;\n        newPoint.y = widget.y;\n        break;\n      case \"right\":\n        newPoint.x = widget.x + widget.width;\n        newPoint.y = widget.y + widget.height / 2;\n        break;\n      case \"bottom\":\n        newPoint.x = widget.x + widget.width / 2;\n        newPoint.y = widget.y + widget.height;\n        break;\n      case \"left\":\n        newPoint.x = widget.x;\n        newPoint.y = widget.y + widget.height / 2;\n        break;\n    }\n\n    return newPoint;\n  }\n\n  render() {\n    const { cursor, selected, widgets } = this.state;\n    return (\n      <div>\n        <div\n          id=\"canvas\"\n          style={{ cursor }}\n          className=\"App\"\n          tabIndex={1}\n          onContextMenu={this.handleRightClick}\n          onDoubleClick={this.handleDoubleClick}\n          onKeyDown={this.handleKeyDown}\n          onMouseMove={this.handleDrag}\n          onMouseDown={this.handleMouseDown}\n          onMouseUp={this.handleMouseUp}\n          ref={this.handleRef}\n          >\n          {Object.values(widgets).map((w) => {\n            if (w.type === \"sticky\") {\n              return (\n                <Sticky\n                cursor={cursor}\n                onRightClick={this.handleStickyRightClick}\n                onDragStart={this.handleDragStart}\n                  selected={selected === w.id}\n                  widget={w}\n                  key={w.id}\n                  />\n                  );\n            }\n            \n            if (w.type === \"arrow\") {\n              return <Arrow widget={w} key={w.id} />;\n            }\n            \n            return null;\n          })}\n        </div>\n        <div id=\"settings\" style={settingsStyle}>\n          <Checkbox\n            label=\"Stick To Convergent Widget Side\"\n            onCheckedChange={(checked) => this.setState({settings: { stickToConvergentWidgetSide: checked }})} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}